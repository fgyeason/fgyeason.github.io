<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank&#39;s Blog</title>
  
  <subtitle>Enjoy everything fun and challenging</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://frankblog.site/"/>
  <updated>2018-06-04T07:17:14.443Z</updated>
  <id>http://frankblog.site/</id>
  
  <author>
    <name>FGY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>机器学习之逻辑回归</title>
    <link href="http://frankblog.site/2018/06/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://frankblog.site/2018/06/04/机器学习之逻辑回归/</id>
    <published>2018-06-04T06:31:16.158Z</published>
    <updated>2018-06-04T07:17:14.443Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92_%E5%B0%81%E9%9D%A2_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">从IT时代走向DT时代</font></blockquote><hr><p>logistic 回归，虽然名字里有 “回归” 二字，但实际上是解决分类问题的一类线性模型。在某些文献中，logistic 回归又被称作 logit 回归，maximum-entropy classification（MaxEnt，最大熵分类），或 log-linear classifier（对数线性分类器）。</p><h1 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h1><ul><li><strong>线性决策边界</strong><br><img src="https://upload-images.jianshu.io/upload_images/7691426-865352c301ea4139.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="link"></li></ul><ul><li><strong>非线性决策边界</strong><br><img src="https://upload-images.jianshu.io/upload_images/7691426-8304229297efc6da.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/600" alt="link"></li></ul><h1 id="手推LR"><a href="#手推LR" class="headerlink" title="手推LR"></a>手推LR</h1><p><img src="https://upload-images.jianshu.io/upload_images/2683440-6c170d929edb07a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="link"></p><p><img src="https://upload-images.jianshu.io/upload_images/2683440-4320f2c960843ab8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="link"></p><h1 id="过拟合问题"><a href="#过拟合问题" class="headerlink" title="过拟合问题"></a>过拟合问题</h1><p>正则化是结构风险最小化策略的实现，是在经验风险上加一个正则化项或惩罚项。正则化项一般是模型复杂度的单调递增函数，模型越复杂，正则化项就越大。</p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-b9800790a4052eed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="link"></p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-a2c719ed29c7d270.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/59" alt="link"></p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-873de53370529011.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/145" alt="link"></p><p>直观来看，如果我们想解决这个例子中的过拟合问题，最好能将的影响消除，也就是让。假设我们对进行惩罚，并且令其很小，一个简单的办法就是给原有的Cost函数加上两个略大惩罚项，例如：</p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-93df484a98d70fb8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/451" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-873de53370529011.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/145" alt=""></p><p>这样在最小化Cost函数的时候，。正则项可以取不同的形式，在回归问题中取平方损失，就是参数的L2范数，也可以取L1范数。取平方损失时，模型的损失函数变为：</p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-af930162ff0ec482.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/396" alt=""></p><p>lambda是正则项系数：</p><p>1.如果它的值很大，说明对模型的复杂度惩罚大，对拟合数据的损失惩罚小，这样它就不会过分拟合数据，在训练数据上的偏差较大，在未知数据上的方差较小，但是可能出现欠拟合的现象；</p><p>2.如果它的值很小，说明比较注重对训练数据的拟合，在训练数据上的偏差会小，但是可能会导致过拟合。</p><p>正则化后的梯度下降<a href="https://link.jianshu.com/?t=http://lib.csdn.net/base/datastructure" target="_blank" rel="noopener">算法</a>θ的更新变为：</p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-1c26ea27e59bdf6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/382" alt=""></p><p>正则化后的线性回归的Normal Equation的公式为：</p><p><img src="https://upload-images.jianshu.io/upload_images/4251424-18acba7908dc0e82.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/429" alt=""></p><hr><h1 id="scikit-learn-逻辑回归类"><a href="#scikit-learn-逻辑回归类" class="headerlink" title="scikit-learn 逻辑回归类"></a>scikit-learn 逻辑回归类</h1><h2 id="带L1与L2正则的逻辑回归损失函数"><a href="#带L1与L2正则的逻辑回归损失函数" class="headerlink" title="带L1与L2正则的逻辑回归损失函数"></a>带L1与L2正则的逻辑回归损失函数</h2><p>scikit-learn 中 logistic 回归在 <code>LogisticRegression</code>中的”sklearn.linear_model.LogisticRegression”类中实现了二分类（binary）、一对多分类（one-vs-rest）及多项式 logistic 回归，并带有可选的 L1 和 L2 正则化。</p><p>作为优化问题，带 L2 正则的二分类 logistic 回归要最小化以下代价函数（cost function）：</p><p>$$\underset{w, c}{min\,} \frac{1}{2}w^T w + C \sum_{i=1}^n \log(\exp(- y_i (X_i^T w + c)) + 1) $$</p><p>类似地，带 L1 正则的 logistic 回归解决的是如下优化问题：</p><p>$$\underset{w, c}{min\,} |w|<em>1 + C \sum</em>{i=1}^n \log(\exp(- y_i (X_i^T w + c)) + 1)$$</p><p>在 <code>LogisticRegression</code> 中的<code>sklearn.linear_model.LogisticRegression</code>类中实现了这些优化算法: “liblinear”， “newton-cg”， “lbfgs”， “sag” 和 “saga”。</p><h2 id="优化方法参数"><a href="#优化方法参数" class="headerlink" title="优化方法参数"></a>优化方法参数</h2><p>solver：优化算法选择参数，只有五个可选参数，即newton-cg,lbfgs,liblinear,sag,saga。默认为liblinear。solver参数决定了我们对逻辑回归损失函数的优化方法，有四种算法可以选择，分别是：</p><ul><li>liblinear：使用了开源的liblinear库实现，内部使用了坐标轴下降法来迭代优化损失函数。</li><li>lbfgs：拟牛顿法的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</li><li>newton-cg：也是牛顿法家族的一种，利用损失函数二阶导数矩阵即海森矩阵来迭代优化损失函数。</li><li>sag：即随机平均梯度下降，是梯度下降法的变种，和普通梯度下降法的区别是每次迭代仅仅用一部分的样本来计算梯度，适合于样本数据多的时候。</li><li>saga：线性收敛的随机优化算法的的变重。</li></ul><table><thead><tr><th>Case</th><th>Solver</th></tr></thead><tbody><tr><td>L1正则</td><td>“liblinear” or “saga”</td></tr><tr><td>多项式损失（multinomial loss）</td><td>“lbfgs”, “sag”, “saga” or “newton-cg”</td></tr><tr><td>大数据集（n_samples）</td><td>“sag” or “saga”</td></tr></tbody></table><p>“saga” 一般都是最佳的选择，但出于一些历史遗留原因默认的是 “liblinear”</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><h2 id="1-LR中损失函数的意义是什么？"><a href="#1-LR中损失函数的意义是什么？" class="headerlink" title="1.LR中损失函数的意义是什么？"></a>1.LR中损失函数的意义是什么？</h2><p>在LR中，最大似然函数与最小化对数损失函数等价</p><h2 id="2-LR与线性回归的联系和区别"><a href="#2-LR与线性回归的联系和区别" class="headerlink" title="2. LR与线性回归的联系和区别"></a>2. LR与线性回归的联系和区别</h2><p>逻辑回归和线性回归首先都可看做广义的线性回归，其次经典线性模型的优化目标函数是最小二乘，而逻辑回归则是似然函数，另外线性回归在整个实数域范围内进行预测，敏感度一致，而分类范围，需要在[0,1]。逻辑回归就是一种减小预测范围，将预测值限定为[0,1]间的一种回归模型，因而对于这类问题来说，逻辑回归的鲁棒性比线性回归的要好。</p><h2 id="3-LR与最大熵模型"><a href="#3-LR与最大熵模型" class="headerlink" title="3.LR与最大熵模型"></a>3.LR与最大熵模型</h2><p>逻辑回归跟最大熵模型没有本质区别。逻辑回归是最大熵对应类别为二类时的特殊情况，也就是当逻辑回归类别扩展到多类别时，就是最大熵模型。</p><ul><li><p>指数簇分布的最大熵等价于其指数形式的最大似然。</p></li><li><p>二项式分布的最大熵解等价于二项式指数形式(sigmoid)的最大似然；</p></li><li><p>多项式分布的最大熵等价于多项式分布指数形式(softmax)的最大似然。</p></li></ul><h2 id="4-LR与svm"><a href="#4-LR与svm" class="headerlink" title="4.LR与svm"></a>4.LR与svm</h2><p>不同点:</p><ol><li><p>损失函数不同，逻辑回归是cross entropy loss，svm是hinge loss</p></li><li><p>逻辑回归在优化参数时所有样本点都参与了贡献，svm则只取离分离超平面最近的支持向量样本。这也是为什么逻辑回归不用核函数，它需要计算的样本太多。并且由于逻辑回归受所有样本的影响，当样本不均衡时需要平衡一下每一类的样本个数。</p></li><li><p>逻辑回归对概率建模，svm对分类超平面建模</p></li><li><p>逻辑回归是处理经验风险最小化，svm是结构风险最小化。这点体现在svm自带L2正则化项，逻辑回归并没有</p></li><li><p>逻辑回归通过非线性变换减弱分离平面较远的点的影响，svm则只取支持向量从而消去较远点的影响</p></li><li><p>逻辑回归是统计方法，svm是几何方法</p></li></ol><h2 id="5-LR与朴素贝叶斯"><a href="#5-LR与朴素贝叶斯" class="headerlink" title="5.LR与朴素贝叶斯"></a>5.LR与朴素贝叶斯</h2><ul><li><p>相同点是，它们都能解决分类问题和都是监督学习算法。此外，有意思的是，当假设朴素贝叶斯的条件概率P(X|Y=ck)服从高斯分布时Gaussian Naive Bayes，它计算出来的P(Y=1|X)形式跟逻辑回归是一样的。</p></li><li><p>不同的地方在于，逻辑回归为判别模型求的是p(y|x)，朴素贝叶斯为生成模型求的是p(x,y)。前者需要迭代优化，后者不需要。在数据量少的情况下后者比前者好，数据量足够的情况下前者比后者好。由于朴素贝叶斯假设了条件概率P(X|Y=ck)是条件独立的，也就是每个特征权重是独立的，如果数据不符合这个情况，朴素贝叶斯的分类表现就没有逻辑回归好。</p></li></ul><h2 id="6-多分类-softmax"><a href="#6-多分类-softmax" class="headerlink" title="6. 多分类-softmax"></a>6. 多分类-softmax</h2><p>如果y不是在[0,1]中取值，而是在K个类别中取值，这时问题就变为一个多分类问题。有两种方式可以出处理该类问题：一种是我们对每个类别训练一个二元分类器（One-vs-all），当K个类别不是互斥的时候，比如用户会购买哪种品类，这种方法是合适的。如果K个类别是互斥的，即y=i的时候意味着y不能取其他的值，比如用户的年龄段，这种情况下 Softmax 回归更合适一些。Softmax 回归是直接对逻辑回归在多分类的推广，相应的模型也可以叫做多元逻辑回归（Multinomial Logistic Regression）。</p><h2 id="7-LR模型在工业界的应用"><a href="#7-LR模型在工业界的应用" class="headerlink" title="7.LR模型在工业界的应用"></a><strong>7.LR模型在工业界的应用</strong></h2><p>常见应用场景</p><ul><li><p>预估问题场景（如推荐、广告系统中的点击率预估，转化率预估等）</p></li><li><p>分类场景（如用户画像中的标签预测，判断内容是否具有商业价值，判断点击作弊等）</p></li></ul><p>LR适用上述场景的原因</p><p>LR模型自身的特点具备了应用广泛性</p><ul><li><p>模型易用：LR模型建模思路清晰，容易理解与掌握；</p></li><li><p>概率结果：输出结果可以用概率解释（二项分布），天然的可用于结果预估问题上；</p></li><li><p>强解释性：特征（向量）和标签之间通过线性累加与Sigmoid函数建立关联，参数的取值直接反应特征的强弱，具有强解释性；</p></li><li><p>简单易用：有大量的机器学习开源工具包含LR模型，如sklearn、spark-mllib等，使用起来比较方便，能快速的搭建起一个learning task pipeline；</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92_%E5%B0%81%E9%9D%A2_%E7%9C%8B%E5%9B%BE%E7%8E%8B.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://frankblog.site/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://frankblog.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="逻辑回归" scheme="http://frankblog.site/tags/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>Matplotlib基本操作</title>
    <link href="http://frankblog.site/2018/06/03/Matplotlib%20%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://frankblog.site/2018/06/03/Matplotlib 基本操作/</id>
    <published>2018-06-03T03:59:17.192Z</published>
    <updated>2018-06-04T01:42:15.913Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%8F%AF%E8%A7%86%E5%8C%96.jpg" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">一张图胜过一千句话</font></blockquote><hr><h1 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h1><h2 id="1、设置坐标轴"><a href="#1、设置坐标轴" class="headerlink" title="1、设置坐标轴"></a>1、设置坐标轴</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x = np.linspace(-3, 3, 50)</span><br><span class="line">y1 = 2*x + 1</span><br><span class="line">y2 = x**2</span><br><span class="line"></span><br><span class="line">#使用`plt.figure`定义一个图像窗口. 使用`plt.plot`画(`x` ,`y2`)曲线. 使用`plt.plot`画(`x` ,`y1`)曲线，曲线的颜色属性(`color`)为红色;曲线的宽度(`linewidth`)为1.0；曲线的类型(`linestyle`)为虚线。</span><br><span class="line"></span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=&apos;red&apos;, linewidth=1.0, linestyle=&apos;--&apos;)</span><br><span class="line"></span><br><span class="line">#使用`plt.xlim`设置x坐标轴范围：(-1, 2)； 使用`plt.ylim`设置y坐标轴范围：(-2, 3)； 使用`plt.xlabel`设置x坐标轴名称：’I am x’； 使用`plt.ylabel`设置y坐标轴名称：’I am y’；</span><br><span class="line"></span><br><span class="line">plt.xlim((-1, 2))</span><br><span class="line">plt.ylim((-2, 3))</span><br><span class="line">plt.xlabel(&apos;I am x&apos;)</span><br><span class="line">plt.ylabel(&apos;I am y&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#使用`np.linspace`定义范围以及个数：范围是(-1,2);个数是5\. 使用`print`打印出新定义的范围. 使用`plt.xticks`设置x轴刻度：范围是(-1,2);个数是5.</span><br><span class="line"></span><br><span class="line">new_ticks = np.linspace(-1, 2, 5)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line"></span><br><span class="line">#使用`plt.yticks`设置y轴刻度以及名称：刻度为[-2, -1.8, -1, 1.22, 3]；对应刻度的名称为[‘really bad’,’bad’,’normal’,’good’, ‘really good’]. 使用`plt.show`显示图像.</span><br><span class="line"></span><br><span class="line">plt.yticks([-2, -1.8, -1, 1.22, 3],[r&apos;$really\ bad$&apos;, r&apos;$bad$&apos;, r&apos;$normal$&apos;, r&apos;$good$&apos;, r&apos;$really\ good$&apos;])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E8%AE%BE%E7%BD%AE%E5%9D%90%E6%A0%87%E8%BD%B4.png" alt=""></p><h2 id="2、调整坐标轴"><a href="#2、调整坐标轴" class="headerlink" title="2、调整坐标轴"></a>2、调整坐标轴</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(-3, 3, 50)</span><br><span class="line">y1 = 2*x + 1</span><br><span class="line">y2 = x**2</span><br><span class="line">plt.figure()</span><br><span class="line">plt.plot(x, y2)</span><br><span class="line">plt.plot(x, y1, color=&apos;red&apos;, linewidth=1.0, linestyle=&apos;--&apos;)</span><br><span class="line">plt.xlim((-1, 2))</span><br><span class="line">plt.ylim((-2, 3))</span><br><span class="line">new_ticks = np.linspace(-1, 2, 5)</span><br><span class="line">plt.xticks(new_ticks)</span><br><span class="line">plt.yticks([-2, -1.8, -1, 1.22, 3],[&apos;$really\ bad$&apos;, &apos;$bad$&apos;, &apos;$normal$&apos;, &apos;$good$&apos;, &apos;$really\ good$&apos;])</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">#使用`.xaxis.set_ticks_position`设置x坐标刻度数字或名称的位置：`bottom`.（所有位置：`top`，`bottom`，`both`，`default`，`none`）</span><br><span class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</span><br><span class="line"></span><br><span class="line">#使用`.spines`设置边框：x轴；使用`.set_position`设置边框位置：y=0的位置；（位置所有属性：`outward`，`axes`，`data`）</span><br><span class="line"></span><br><span class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#使用`.yaxis.set_ticks_position`设置y坐标刻度数字或名称的位置：`left`.（所有位置：`left`，`right`，`both`，`default`，`none`）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</span><br><span class="line"></span><br><span class="line">#使用`.spines`设置边框：y轴；使用`.set_position`设置边框位置：x=0的位置；（位置所有属性：`outward`，`axes`，`data`） 使用`plt.show`显示图像。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;,0))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># set line syles</span><br><span class="line">l1, = plt.plot(x, y1, label=&apos;linear line&apos;)</span><br><span class="line">l2, = plt.plot(x, y2, color=&apos;red&apos;, linewidth=1.0, linestyle=&apos;--&apos;, label=&apos;square line&apos;)</span><br><span class="line"></span><br><span class="line">#参数 `loc=&apos;upper right&apos;` 表示图例将添加在图中的右上角.</span><br><span class="line">plt.legend(loc=&apos;upper right&apos;)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E4%BF%AE%E6%94%B9%E5%9D%90%E6%A0%87%E8%BD%B4.png" alt=""></p><h2 id="3、辅助线和标识"><a href="#3、辅助线和标识" class="headerlink" title="3、辅助线和标识"></a>3、辅助线和标识</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">x = np.linspace(-3, 3, 50)</span><br><span class="line">y = 2*x + 1</span><br><span class="line"></span><br><span class="line">#挪动坐标系</span><br><span class="line">ax = plt.gca()</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.xaxis.set_ticks_position(&apos;bottom&apos;)</span><br><span class="line">ax.spines[&apos;bottom&apos;].set_position((&apos;data&apos;, 0))</span><br><span class="line">ax.yaxis.set_ticks_position(&apos;left&apos;)</span><br><span class="line">ax.spines[&apos;left&apos;].set_position((&apos;data&apos;, 0))</span><br><span class="line"></span><br><span class="line">#辅助线</span><br><span class="line">plt.figure(num=1, figsize=(8, 5),)</span><br><span class="line">plt.plot(x, y,)</span><br><span class="line">x0 = 1</span><br><span class="line">y0 = 2*x0 + 1</span><br><span class="line">plt.plot([x0, x0,], [0, y0,], &apos;k--&apos;, linewidth=2.5)</span><br><span class="line"># set dot styles</span><br><span class="line">plt.scatter([x0, ], [y0, ], s=50, color=&apos;b&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#标注，其中参数xycoords=&apos;data&apos; 是说基于数据的值来选位置, xytext=(+30, -30) 和 textcoords=&apos;offset points&apos; 对于标注位置的描述 和 xy 偏差值, arrowprops是对图中箭头类型的一些设置.</span><br><span class="line">plt.annotate(r&apos;$2x+1=%s$&apos; % y0, xy=(x0, y0), xycoords=&apos;data&apos;, xytext=(+30, -30),</span><br><span class="line">             textcoords=&apos;offset points&apos;, fontsize=16,</span><br><span class="line">             arrowprops=dict(arrowstyle=&apos;-&gt;&apos;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">#注释</span><br><span class="line">plt.text(-3.7, 3, r&apos;$This\ is\ the\ some\ text. \mu\ \sigma_i\ \alpha_t$&apos;,</span><br><span class="line">         fontdict=&#123;&apos;size&apos;: 16, &apos;color&apos;: &apos;r&apos;&#125;)</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E8%BE%85%E5%8A%A9%E7%BA%BF%E5%92%8C%E6%A0%87%E8%AF%86.png" alt=""></p><h2 id="4、3D图框"><a href="#4、3D图框" class="headerlink" title="4、3D图框"></a>4、3D图框</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from mpl_toolkits.mplot3d import Axes3D</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line"># X, Y value</span><br><span class="line">X = np.arange(-4, 4, 0.25)</span><br><span class="line">Y = np.arange(-4, 4, 0.25)</span><br><span class="line">X, Y = np.meshgrid(X, Y)    # x-y 平面的网格</span><br><span class="line">R = np.sqrt(X ** 2 + Y ** 2)</span><br><span class="line"># height value</span><br><span class="line">Z = np.sin(R)</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/3d%E5%9B%BE.png" alt=""></p><h1 id="绘制动态图"><a href="#绘制动态图" class="headerlink" title="绘制动态图"></a>绘制动态图</h1><p>使用matplotlib为Jupyter / IPython中的动画图创建一些选项：</p><ul><li><p><strong>在循环中使用<code>display</code></strong>使用<code>IPython.display.display(fig)</code>在输出中显示图形。 使用一个循环，你需要在显示一个新数字之前清除输出。 请注意，这种技术通常不会那么流畅。 因此我会建议使用下面的任何一个。</p></li><li><p><strong><code>%matplotlib notebook</code></strong>使用IPython magic <code>%matplotlib notebook</code>将后端设置为笔记本后端。 这样可以保持图形不会显示静态PNG文件，因此也可以显示动画。 </p></li></ul><ul><li><strong><code>%matplotlib tk</code></strong>使用IPython magic <code>%matplotlib tk</code>将后端设置为tk后端。 这将在一个新的绘图窗口中打开这个图形，这是一个互动的，因此也可以显示动画。 </li></ul><ul><li><p><strong>将动画转换为mp4视频</strong> （已提供@Perfi选项）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from IPython.display import HTML</span><br><span class="line">HTML(ani.to_html5_video())</span><br></pre></td></tr></table></figure></li></ul><p>或者在笔记本的开头使用<code>plt.rcParams[&quot;animation.html&quot;] = &quot;html5&quot;</code> 。 这需要将ffmpeg视频编解码器转换为HTML5视频。 视频然后显示在内。 因此，这与<code>%matplotlib inline</code>后端兼容。 完整的例子：</p><ul><li><p><strong>将动画转换为JavaScript</strong> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from IPython.display import HTML</span><br><span class="line">HTML(ani.to_jshtml())</span><br></pre></td></tr></table></figure></li></ul><p>或者在笔记本的开头使用<code>plt.rcParams[&quot;animation.html&quot;] = &quot;jshtml&quot;</code> 。 这将使用JavaScript将动画显示为HTML。 这与大多数新浏览器以及<code>%matplotlib inline</code>后端都非常兼容。 它在matplotlib 2.1或更高版本中可用。</p><h2 id="1、sin动态点曲线"><a href="#1、sin动态点曲线" class="headerlink" title="1、sin动态点曲线"></a>1、sin动态点曲线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line">import numpy as np </span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from matplotlib import animation</span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">animation example 2</span><br><span class="line">author: Kiterun</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">x = np.linspace(0, 2*np.pi, 200)</span><br><span class="line">y = np.sin(x)</span><br><span class="line">l = ax.plot(x, y)</span><br><span class="line">dot, = ax.plot([], [], &apos;ro&apos;)</span><br><span class="line"></span><br><span class="line">def init():</span><br><span class="line">    ax.set_xlim(0, 2*np.pi)</span><br><span class="line">    ax.set_ylim(-1, 1)</span><br><span class="line">    return l</span><br><span class="line"></span><br><span class="line">def gen_dot():</span><br><span class="line">    for i in np.linspace(0, 2*np.pi, 200):</span><br><span class="line">        newdot = [i, np.sin(i)]</span><br><span class="line">        yield newdot</span><br><span class="line"></span><br><span class="line">def update_dot(newd):</span><br><span class="line">    dot.set_data(newd[0], newd[1])</span><br><span class="line">    return dot,</span><br><span class="line"></span><br><span class="line">ani = animation.FuncAnimation(fig, update_dot, frames = gen_dot, interval = 100, init_func=init)</span><br><span class="line">ani.save(&apos;sin_dot.gif&apos;, writer=&apos;imagemagick&apos;, fps=30)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/sin_dot%20%281%29.gif" alt=""></p><h2 id="2、动态雨点"><a href="#2、动态雨点" class="headerlink" title="2、动态雨点"></a>2、动态雨点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib notebook</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from matplotlib import animation</span><br><span class="line"></span><br><span class="line"># New figure with white background</span><br><span class="line">fig = plt.figure(figsize=(6,6), facecolor=&apos;white&apos;)</span><br><span class="line"></span><br><span class="line"># New axis over the whole figure, no frame and a 1:1 aspect ratio</span><br><span class="line">ax = fig.add_axes([0, 0, 1, 1], frameon=False, aspect=1)</span><br><span class="line"></span><br><span class="line"># Number of ring</span><br><span class="line">n = 50</span><br><span class="line">size_min = 50</span><br><span class="line">size_max = 50 ** 2</span><br><span class="line"></span><br><span class="line"># Ring position</span><br><span class="line">pos = np.random.uniform(0, 1, (n,2))</span><br><span class="line"></span><br><span class="line"># Ring colors</span><br><span class="line">color = np.ones((n,4)) * (0,0,0,1)</span><br><span class="line"># Alpha color channel geos from 0(transparent) to 1(opaque)</span><br><span class="line">color[:,3] = np.linspace(0, 1, n)</span><br><span class="line"></span><br><span class="line"># Ring sizes</span><br><span class="line">size = np.linspace(size_min, size_max, n)</span><br><span class="line"></span><br><span class="line"># Scatter plot</span><br><span class="line">scat = ax.scatter(pos[:,0], pos[:,1], s=size, lw=0.5, edgecolors=color, facecolors=&apos;None&apos;)</span><br><span class="line"></span><br><span class="line"># Ensure limits are [0,1] and remove ticks</span><br><span class="line">ax.set_xlim(0, 1), ax.set_xticks([])</span><br><span class="line">ax.set_ylim(0, 1), ax.set_yticks([])</span><br><span class="line"></span><br><span class="line">def update(frame):</span><br><span class="line">    global pos, color, size</span><br><span class="line"></span><br><span class="line">    # Every ring is made more transparnt</span><br><span class="line">    color[:, 3] = np.maximum(0, color[:,3]-1.0/n)</span><br><span class="line"></span><br><span class="line">    # Each ring is made larger</span><br><span class="line">    size += (size_max - size_min) / n</span><br><span class="line"></span><br><span class="line">    # Reset specific ring</span><br><span class="line">    i = frame % 50</span><br><span class="line">    pos[i] = np.random.uniform(0, 1, 2)</span><br><span class="line">    size[i] = size_min</span><br><span class="line">    color[i, 3] = 1</span><br><span class="line"></span><br><span class="line">    # Update scatter object</span><br><span class="line">    scat.set_edgecolors(color)</span><br><span class="line">    scat.set_sizes(size)</span><br><span class="line">    scat.set_offsets(pos)</span><br><span class="line"></span><br><span class="line">    # Return the modified object</span><br><span class="line">    return scat,</span><br><span class="line"></span><br><span class="line">anim = animation.FuncAnimation(fig, update, interval=10, blit=True, frames=200)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%8A%A8%E6%80%81%E9%9B%A8%E7%82%B9.png" alt=""></p><h2 id="3、阻尼摆"><a href="#3、阻尼摆" class="headerlink" title="3、阻尼摆"></a>3、阻尼摆</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from math import sin, cos</span><br><span class="line">import numpy as np</span><br><span class="line">from scipy.integrate import odeint</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.animation as animation</span><br><span class="line">%matplotlib notebook</span><br><span class="line"></span><br><span class="line">g = 9.8</span><br><span class="line">leng = 1.0</span><br><span class="line">b_const = 0.2</span><br><span class="line"></span><br><span class="line"># no decay case:</span><br><span class="line">def pendulum_equations1(w, t, l):</span><br><span class="line">    th, v = w</span><br><span class="line">    dth = v</span><br><span class="line">    dv  = - g/l * sin(th)</span><br><span class="line">    return dth, dv</span><br><span class="line"></span><br><span class="line"># the decay exist case:</span><br><span class="line">def pendulum_equations2(w, t, l, b):</span><br><span class="line">    th, v = w</span><br><span class="line">    dth = v</span><br><span class="line">    dv = -b/l * v - g/l * sin(th)</span><br><span class="line">    return dth, dv</span><br><span class="line"></span><br><span class="line">t = np.arange(0, 20, 0.1)</span><br><span class="line">track = odeint(pendulum_equations1, (1.0, 0), t, args=(leng,))</span><br><span class="line">#track = odeint(pendulum_equations2, (1.0, 0), t, args=(leng, b_const))</span><br><span class="line">xdata = [leng*sin(track[i, 0]) for i in range(len(track))]</span><br><span class="line">ydata = [-leng*cos(track[i, 0]) for i in range(len(track))]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.grid()</span><br><span class="line">line, = ax.plot([], [], &apos;o-&apos;, lw=2)</span><br><span class="line">time_template = &apos;time = %.1fs&apos;</span><br><span class="line">time_text = ax.text(0.05, 0.9, &apos;&apos;, transform=ax.transAxes)</span><br><span class="line"></span><br><span class="line">def init():</span><br><span class="line">    ax.set_xlim(-2, 2)</span><br><span class="line">    ax.set_ylim(-2, 2)</span><br><span class="line">    time_text.set_text(&apos;&apos;)</span><br><span class="line">    return line, time_text</span><br><span class="line"></span><br><span class="line">def update(i):</span><br><span class="line">    newx = [0, xdata[i]]</span><br><span class="line">    newy = [0, ydata[i]]</span><br><span class="line">    line.set_data(newx, newy)</span><br><span class="line">    time_text.set_text(time_template %(0.1*i))</span><br><span class="line">    return line, time_text</span><br><span class="line"></span><br><span class="line">ani = animation.FuncAnimation(fig, update, range(1, len(xdata)), init_func=init, interval=50)</span><br><span class="line">#ani.save(&apos;single_pendulum_decay.gif&apos;, writer=&apos;imagemagick&apos;, fps=100)</span><br><span class="line">ani.save(&apos;single_pendulum_nodecay.gif&apos;, writer=&apos;imagemagick&apos;, fps=100)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%98%BB%E5%B0%BC%E6%91%86.png" alt=""></p><h2 id="4、内切滚动球"><a href="#4、内切滚动球" class="headerlink" title="4、内切滚动球"></a>4、内切滚动球</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"></span><br><span class="line">from math import sin, cos</span><br><span class="line">import numpy as np</span><br><span class="line">from scipy.integrate import odeint</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import matplotlib.animation as animation</span><br><span class="line">%matplotlib notebook</span><br><span class="line"></span><br><span class="line">g = 9.8</span><br><span class="line">leng = 1.0</span><br><span class="line">b_const = 0.2</span><br><span class="line"></span><br><span class="line"># no decay case:</span><br><span class="line">def pendulum_equations1(w, t, l):</span><br><span class="line">    th, v = w</span><br><span class="line">    dth = v</span><br><span class="line">    dv  = - g/l * sin(th)</span><br><span class="line">    return dth, dv</span><br><span class="line"></span><br><span class="line"># the decay exist case:</span><br><span class="line">def pendulum_equations2(w, t, l, b):</span><br><span class="line">    th, v = w</span><br><span class="line">    dth = v</span><br><span class="line">    dv = -b/l * v - g/l * sin(th)</span><br><span class="line">    return dth, dv</span><br><span class="line"></span><br><span class="line">t = np.arange(0, 20, 0.1)</span><br><span class="line">track = odeint(pendulum_equations1, (1.0, 0), t, args=(leng,))</span><br><span class="line">#track = odeint(pendulum_equations2, (1.0, 0), t, args=(leng, b_const))</span><br><span class="line">xdata = [leng*sin(track[i, 0]) for i in range(len(track))]</span><br><span class="line">ydata = [-leng*cos(track[i, 0]) for i in range(len(track))]</span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots()</span><br><span class="line">ax.grid()</span><br><span class="line">line, = ax.plot([], [], &apos;o-&apos;, lw=2)</span><br><span class="line">time_template = &apos;time = %.1fs&apos;</span><br><span class="line">time_text = ax.text(0.05, 0.9, &apos;&apos;, transform=ax.transAxes)</span><br><span class="line"></span><br><span class="line">def init():</span><br><span class="line">    ax.set_xlim(-2, 2)</span><br><span class="line">    ax.set_ylim(-2, 2)</span><br><span class="line">    time_text.set_text(&apos;&apos;)</span><br><span class="line">    return line, time_text</span><br><span class="line"></span><br><span class="line">def update(i):</span><br><span class="line">    newx = [0, xdata[i]]</span><br><span class="line">    newy = [0, ydata[i]]</span><br><span class="line">    line.set_data(newx, newy)</span><br><span class="line">    time_text.set_text(time_template %(0.1*i))</span><br><span class="line">    return line, time_text</span><br><span class="line"></span><br><span class="line">ani = animation.FuncAnimation(fig, update, range(1, len(xdata)), init_func=init, interval=50)</span><br><span class="line">#ani.save(&apos;single_pendulum_decay.gif&apos;, writer=&apos;imagemagick&apos;, fps=100)</span><br><span class="line">ani.save(&apos;single_pendulum_nodecay.gif&apos;, writer=&apos;imagemagick&apos;, fps=100)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/roll.gif" alt=""></p><h2 id="5、分类超平面可视化"><a href="#5、分类超平面可视化" class="headerlink" title="5、分类超平面可视化"></a>5、分类超平面可视化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"># 算法可视化</span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line">%matplotlib notebook</span><br><span class="line">import copy</span><br><span class="line">from matplotlib import pyplot as plt</span><br><span class="line">from matplotlib import animation</span><br><span class="line"> </span><br><span class="line">training_set = [[(3, 3), 1], [(4, 3), 1], [(1, 1), -1]]</span><br><span class="line">w = [0, 0]</span><br><span class="line">b = 0</span><br><span class="line">history = []</span><br><span class="line"> </span><br><span class="line">def update(item):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    update parameters using stochastic gradient descent</span><br><span class="line">    :param item: an item which is classified into wrong class</span><br><span class="line">    :return: nothing</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    global w, b, history</span><br><span class="line">    w[0] += 1 * item[1] * item[0][0]</span><br><span class="line">    w[1] += 1 * item[1] * item[0][1]</span><br><span class="line">    b += 1 * item[1]</span><br><span class="line">    print(w, b)</span><br><span class="line">    history.append([copy.copy(w), b])</span><br><span class="line">    # you can uncomment this line to check the process of stochastic gradient descent</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">def cal(item):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    calculate the functional distance between &apos;item&apos; an the dicision surface. output yi(w*xi+b).</span><br><span class="line">    :param item:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    res = 0</span><br><span class="line">    for i in range(len(item[0])):</span><br><span class="line">        res += item[0][i] * w[i]</span><br><span class="line">    res += b</span><br><span class="line">    res *= item[1]</span><br><span class="line">    return res</span><br><span class="line"> </span><br><span class="line">def check():</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    check if the hyperplane can classify the examples correctly</span><br><span class="line">    :return: true if it can</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    flag = False</span><br><span class="line">    for item in training_set:</span><br><span class="line">        if cal(item) &lt;= 0:</span><br><span class="line">            flag = True</span><br><span class="line">            update(item)</span><br><span class="line">    # draw a graph to show the process</span><br><span class="line">    if not flag:</span><br><span class="line">        print (&quot;RESULT: w: &quot; + str(w) + &quot; b: &quot; + str(b))</span><br><span class="line">    return flag</span><br><span class="line"> </span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for i in range(1000):</span><br><span class="line">        if not check(): break</span><br><span class="line"> </span><br><span class="line">    # first set up the figure, the axis, and the plot element we want to animate</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = plt.axes(xlim=(0, 2), ylim=(-2, 2))</span><br><span class="line">    line, = ax.plot([], [], &apos;g&apos;, lw=2)</span><br><span class="line">    label = ax.text([], [], &apos;&apos;)</span><br><span class="line"> </span><br><span class="line">    # initialization function: plot the background of each frame</span><br><span class="line">    def init():</span><br><span class="line">        line.set_data([], [])</span><br><span class="line">        x, y, x_, y_ = [], [], [], []</span><br><span class="line">        for p in training_set:</span><br><span class="line">            if p[1] &gt; 0:</span><br><span class="line">                x.append(p[0][0])</span><br><span class="line">                y.append(p[0][1])</span><br><span class="line">            else:</span><br><span class="line">                x_.append(p[0][0])</span><br><span class="line">                y_.append(p[0][1])</span><br><span class="line"> </span><br><span class="line">        plt.plot(x, y, &apos;bo&apos;, x_, y_, &apos;rx&apos;)</span><br><span class="line">        plt.axis([-6, 6, -6, 6])</span><br><span class="line">        plt.grid(True)</span><br><span class="line">        plt.xlabel(&apos;x&apos;)</span><br><span class="line">        plt.ylabel(&apos;y&apos;)</span><br><span class="line">        plt.title(&apos;Perceptron Algorithm&apos;)</span><br><span class="line">        return line, label</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    # animation function.  this is called sequentially</span><br><span class="line">    def animate(i):</span><br><span class="line">        global history, ax, line, label</span><br><span class="line"> </span><br><span class="line">        w = history[i][0]</span><br><span class="line">        b = history[i][1]</span><br><span class="line">        if w[1] == 0: return line, label</span><br><span class="line">        x1 = -7</span><br><span class="line">        y1 = -(b + w[0] * x1) / w[1]</span><br><span class="line">        x2 = 7</span><br><span class="line">        y2 = -(b + w[0] * x2) / w[1]</span><br><span class="line">        line.set_data([x1, x2], [y1, y2])</span><br><span class="line">        x1 = 0</span><br><span class="line">        y1 = -(b + w[0] * x1) / w[1]</span><br><span class="line">        label.set_text(history[i])</span><br><span class="line">        label.set_position([x1, y1])</span><br><span class="line">        return line, label</span><br><span class="line"> </span><br><span class="line">    # call the animator.  blit=true means only re-draw the parts that have changed.</span><br><span class="line">    print (history)</span><br><span class="line">    anim = animation.FuncAnimation(fig, animate, init_func=init, frames=len(history), interval=1000, repeat=True,</span><br><span class="line">                                   blit=True)</span><br><span class="line">    plt.show()</span><br><span class="line">    anim.save(&apos;perceptron.gif&apos;, fps=2, writer=&apos;imagemagick&apos;)</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/perceptron1.gif" alt=""></p><h1 id="python其他可视化模块"><a href="#python其他可视化模块" class="headerlink" title="python其他可视化模块"></a>python其他可视化模块</h1><ul><li>Traits-为Python添加类型定义</li><li>TraitsUI-制作用户界面</li><li>Chaco-交互式图表</li><li>TVTK-三维可视化数据</li><li>Visual-制作3D演示动画</li><li>Mayavi-更方便的可视化</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/%E5%8F%AF%E8%A7%86%E5%8C%96.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="可视化" scheme="http://frankblog.site/categories/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
    
      <category term="可视化" scheme="http://frankblog.site/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="Matplotlib" scheme="http://frankblog.site/tags/Matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>markdown公式编辑</title>
    <link href="http://frankblog.site/2018/06/03/markdown%E5%85%AC%E5%BC%8F%E7%BC%96%E8%BE%91/"/>
    <id>http://frankblog.site/2018/06/03/markdown公式编辑/</id>
    <published>2018-06-03T03:42:27.605Z</published>
    <updated>2018-06-04T01:33:58.285Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/mathjax1.png" alt=""></p><a id="more"></a><hr><h1 id="加载mathjax"><a href="#加载mathjax" class="headerlink" title="加载mathjax"></a>加载mathjax</h1><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><p>引入脚本对网页进行渲染<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="插入方式"><a href="#插入方式" class="headerlink" title="插入方式"></a>插入方式</h2><blockquote><p>这里分两种，一种是行间插入，另一种是另取一行</p></blockquote><h3 id="行内插入"><a href="#行内插入" class="headerlink" title="行内插入"></a>行内插入</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\\(a+b\\)</span><br></pre></td></tr></table></figure><p>\(a+b\)</p><h3 id="单独一行"><a href="#单独一行" class="headerlink" title="单独一行"></a>单独一行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$a + b$$</span><br></pre></td></tr></table></figure><p>$$a + b$$</p><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="上、下标"><a href="#上、下标" class="headerlink" title="上、下标"></a>上、下标</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$$x_1$$</span><br><span class="line"></span><br><span class="line">$$x_1^2$$</span><br><span class="line"></span><br><span class="line">$$x^2_1$$</span><br><span class="line"></span><br><span class="line">$$x_&#123;22&#125;^&#123;(n)&#125;$$ #多于一位是要加 `&#123;&#125;` 包裹的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$$x_&#123;balabala&#125;^&#123;bala&#125;$$</span><br></pre></td></tr></table></figure><p>$$x_1$$</p><p>$$x_1^2$$</p><p>$$x^2_1$$</p><p>$$x_{22}^{(n)}$$</p><p>$$x_{balabala}^{bala}$$</p><h3 id="分式"><a href="#分式" class="headerlink" title="分式"></a>分式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$\frac&#123;x+y&#125;&#123;2&#125;$$</span><br><span class="line"></span><br><span class="line">$$\frac&#123;1&#125;&#123;1+\frac&#123;1&#125;&#123;2&#125;&#125;$$</span><br></pre></td></tr></table></figure><p>$$\frac{x+y}{2}$$</p><p>$$\frac{1}{1+\frac{1}{2}}$$</p><h3 id="根式"><a href="#根式" class="headerlink" title="根式"></a>根式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$$\sqrt&#123;2&#125;&lt;\sqrt[3]&#123;3&#125;$$</span><br><span class="line"></span><br><span class="line">$$\sqrt&#123;1+\sqrt[p]&#123;1+a^2&#125;&#125;$$</span><br><span class="line"></span><br><span class="line">$$\sqrt&#123;1+\sqrt[^p\!]&#123;1+a^2&#125;&#125;$$</span><br></pre></td></tr></table></figure><p>$$\sqrt{2}&lt;\sqrt[3]{3}$$<br>$$\sqrt{1+\sqrt[p]{1+a^2}}$$<br>$$\sqrt{1+\sqrt[^p!]{1+a^2}}$$</p><h3 id="求和、积分"><a href="#求和、积分" class="headerlink" title="求和、积分"></a>求和、积分</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$\sum_&#123;k=1&#125;^&#123;n&#125;\frac&#123;1&#125;&#123;k&#125;$$</span><br><span class="line"></span><br><span class="line">\\(\sum_&#123;k=1&#125;^n\frac&#123;1&#125;&#123;k&#125;\\)</span><br><span class="line"></span><br><span class="line">$$\int_a^b f(x)dx$$</span><br><span class="line"></span><br><span class="line">\\(\int_a^b f(x)dx\\)</span><br></pre></td></tr></table></figure><p>$$\sum_{k=1}^{n}\frac{1}{k}$$</p><p>\(\sum_{k=1}^n\frac{1}{k}\)</p><p>$$\int_a^b f(x)dx$$</p><p>\(\int_a^b f(x)dx\)</p><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">紧贴 $a\\!b$</span><br><span class="line"></span><br><span class="line">没有空格 $ab$</span><br><span class="line"></span><br><span class="line">小空格 a\,b</span><br><span class="line"></span><br><span class="line">中等空格 a\;b</span><br><span class="line"></span><br><span class="line">大空格 a\ b</span><br><span class="line"></span><br><span class="line">quad空格 $a\quad b$</span><br><span class="line"></span><br><span class="line">两个quad空格 $a\qquad b$</span><br></pre></td></tr></table></figure><p>$$a\!b$$</p><p>$${ab}$$</p><p>$$a\,b$$</p><p>$$a\;b$$</p><p>$$a\ b$$</p><p>$$a\quad b$$</p><p>$$a\qquad b$$</p><h3 id="公式界定符"><a href="#公式界定符" class="headerlink" title="公式界定符"></a>公式界定符</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$$\left(\sum_&#123;k=\frac&#123;1&#125;&#123;2&#125;&#125;^&#123;N^2&#125;\frac&#123;1&#125;&#123;k&#125;\right)$$</span><br></pre></td></tr></table></figure><p>通过 <code>\left</code> 和 <code>\right</code> 后面跟界定符来对同时进行界定。<br>$$\left(\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right)$$</p><h3 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$$\begin&#123;matrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;matrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;pmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;pmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;bmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;bmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;Bmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;Bmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;vmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;vmatrix&#125;$$</span><br><span class="line"></span><br><span class="line">$$\left|\begin&#123;matrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;matrix&#125;\right|$$</span><br><span class="line"></span><br><span class="line">$$\begin&#123;Vmatrix&#125;1 &amp; 2\\\\3 &amp;4\end&#123;Vmatrix&#125;$$</span><br></pre></td></tr></table></figure><p>$$\begin{matrix}1 &amp; 2\\3 &amp;4\end{matrix}$$</p><p>$$\begin{pmatrix}1 &amp; 2\\3 &amp;4\end{pmatrix}$$</p><p>$$\begin{bmatrix}1 &amp; 2\\3 &amp;4\end{bmatrix}$$</p><p>$$\begin{Bmatrix}1 &amp; 2\\3 &amp;4\end{Bmatrix}$$</p><p>$$\begin{vmatrix}1 &amp; 2\\3 &amp;4\end{vmatrix}$$</p><p>$$\left|\begin{matrix}1 &amp; 2\\3 &amp;4\end{matrix}\right|$$</p><p>$$\begin{Vmatrix}1 &amp; 2\\3 &amp;4\end{Vmatrix}$$<br>类似于 left right，这里是 begin 和 end。而且里面有具体的矩阵语法，<code>&amp;</code> 区分行间元素，<code>\\\\</code> 代表换行。可以理解为 HTML 的标签之类的。</p><h3 id="排版数组"><a href="#排版数组" class="headerlink" title="排版数组"></a>排版数组</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;X&#125; =</span><br><span class="line">\left( \begin&#123;array&#125;&#123;ccc&#125;</span><br><span class="line">x\_&#123;11&#125; &amp; x\_&#123;12&#125; &amp; \ldots \\\\</span><br><span class="line">x\_&#123;21&#125; &amp; x\_&#123;22&#125; &amp; \ldots \\\\</span><br><span class="line">\vdots &amp; \vdots &amp; \ddots</span><br><span class="line">\end&#123;array&#125; \right)</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>\mathbf{X} =<br>\left( \begin{array}{ccc}<br>x_{11} &amp; x_{12} &amp; \ldots \\<br>x_{21} &amp; x_{22} &amp; \ldots \\<br>\vdots &amp; \vdots &amp; \ddots<br>\end{array} \right)<br>$$</p><h1 id="常用公式举例"><a href="#常用公式举例" class="headerlink" title="常用公式举例"></a>常用公式举例</h1><h2 id="公式组"><a href="#公式组" class="headerlink" title="公式组"></a>公式组</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;align&#125;</span><br><span class="line">a &amp;= b+c+d \\\\</span><br><span class="line"></span><br><span class="line">x &amp;= y+z</span><br><span class="line">\end&#123;align&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>\begin{align}<br>a &amp;= b+c+d \\<br>x &amp;= y+z<br>\end{align}<br>$$</p><h2 id="分段函数"><a href="#分段函数" class="headerlink" title="分段函数"></a>分段函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">y=\begin&#123;cases&#125;</span><br><span class="line">-x,\quad x\leq 0 \\\\</span><br><span class="line">x,\quad x&gt;0</span><br><span class="line">\end&#123;cases&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>y=\begin{cases}<br>-x,\quad x\leq 0 \\<br>x,\quad x&gt;0<br>\end{cases}<br>$$</p><h1 id="常用数学符号"><a href="#常用数学符号" class="headerlink" title="常用数学符号"></a>常用数学符号</h1><h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;array&#125;&#123;|c|c|c|c|c|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">&#123;\alpha&#125; &amp; &#123;\backslash alpha&#125; &amp; &#123;\theta&#125; &amp; &#123;\backslash theta&#125; &amp; &#123;o&#125; &amp; &#123;o&#125; &amp; &#123;\upsilon&#125; &amp; &#123;\backslash upsilon&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\beta&#125; &amp; &#123;\backslash beta&#125; &amp; &#123;\vartheta&#125; &amp; &#123;\backslash vartheta&#125; &amp; &#123;\pi&#125; &amp; &#123;\backslash pi&#125; &amp; &#123;\phi&#125; &amp; &#123;\backslash phi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\gamma&#125; &amp; &#123;\backslash gamma&#125; &amp; &#123;\iota&#125; &amp; &#123;\backslash iota&#125; &amp; &#123;\varpi&#125; &amp; &#123;\backslash varpi&#125; &amp; &#123;\varphi&#125; &amp; &#123;\backslash varphi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\delta&#125; &amp; &#123;\backslash delta&#125; &amp; &#123;\kappa&#125; &amp; &#123;\backslash kappa&#125; &amp; &#123;\rho&#125; &amp; &#123;\backslash rho&#125; &amp; &#123;\chi&#125; &amp; &#123;\backslash chi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\epsilon&#125; &amp; &#123;\backslash epsilon&#125; &amp; &#123;\lambda&#125; &amp; &#123;\backslash lambda&#125; &amp; &#123;\varrho&#125; &amp; &#123;\backslash varrho&#125; &amp; &#123;\psi&#125; &amp; &#123;\backslash psi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\varepsilon&#125; &amp; &#123;\backslash varepsilon&#125; &amp; &#123;\mu&#125; &amp; &#123;\backslash mu&#125; &amp; &#123;\sigma&#125; &amp; &#123;\backslash sigma&#125; &amp; &#123;\omega&#125; &amp; &#123;\backslash omega&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\zeta&#125; &amp; &#123;\backslash zeta&#125; &amp; &#123;\nu&#125; &amp; &#123;\backslash nu&#125; &amp; &#123;\varsigma&#125; &amp; &#123;\backslash varsigma&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\eta&#125; &amp; &#123;\backslash eta&#125; &amp; &#123;\xi&#125; &amp; &#123;\backslash xi&#125; &amp; &#123;\tau&#125; &amp; &#123;\backslash tau&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\Gamma&#125; &amp; &#123;\backslash Gamma&#125; &amp; &#123;\Lambda&#125; &amp; &#123;\backslash Lambda&#125; &amp; &#123;\Sigma&#125; &amp; &#123;\backslash Sigma&#125; &amp; &#123;\Psi&#125; &amp; &#123;\backslash Psi&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\Delta&#125; &amp; &#123;\backslash Delta&#125; &amp; &#123;\Xi&#125; &amp; &#123;\backslash Xi&#125; &amp; &#123;\Upsilon&#125; &amp; &#123;\backslash Upsilon&#125; &amp; &#123;\Omega&#125; &amp; &#123;\backslash Omega&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">&#123;\Omega&#125; &amp; &#123;\backslash Omega&#125; &amp; &#123;\Pi&#125; &amp; &#123;\backslash Pi&#125; &amp; &#123;\Phi&#125; &amp; &#123;\backslash Phi&#125; &amp; &#123;&#125; &amp; &#123;&#125; \\\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;array&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p>$$<br>\begin{array}{|c|c|c|c|c|c|c|c|}<br>\hline<br>{\alpha} &amp; {\backslash alpha} &amp; {\theta} &amp; {\backslash theta} &amp; {o} &amp; {o} &amp; {\upsilon} &amp; {\backslash upsilon} \\<br>\hline<br>{\beta} &amp; {\backslash beta} &amp; {\vartheta} &amp; {\backslash vartheta} &amp; {\pi} &amp; {\backslash pi} &amp; {\phi} &amp; {\backslash phi} \\<br>\hline<br>{\gamma} &amp; {\backslash gamma} &amp; {\iota} &amp; {\backslash iota} &amp; {\varpi} &amp; {\backslash varpi} &amp; {\varphi} &amp; {\backslash varphi} \\<br>\hline<br>{\delta} &amp; {\backslash delta} &amp; {\kappa} &amp; {\backslash kappa} &amp; {\rho} &amp; {\backslash rho} &amp; {\chi} &amp; {\backslash chi} \\<br>\hline<br>{\epsilon} &amp; {\backslash epsilon} &amp; {\lambda} &amp; {\backslash lambda} &amp; {\varrho} &amp; {\backslash varrho} &amp; {\psi} &amp; {\backslash psi} \\<br>\hline<br>{\varepsilon} &amp; {\backslash varepsilon} &amp; {\mu} &amp; {\backslash mu} &amp; {\sigma} &amp; {\backslash sigma} &amp; {\omega} &amp; {\backslash omega} \\<br>\hline<br>{\zeta} &amp; {\backslash zeta} &amp; {\nu} &amp; {\backslash nu} &amp; {\varsigma} &amp; {\backslash varsigma} &amp; {} &amp; {} \\<br>\hline<br>{\eta} &amp; {\backslash eta} &amp; {\xi} &amp; {\backslash xi} &amp; {\tau} &amp; {\backslash tau} &amp; {} &amp; {} \\<br>\hline<br>{\Gamma} &amp; {\backslash Gamma} &amp; {\Lambda} &amp; {\backslash Lambda} &amp; {\Sigma} &amp; {\backslash Sigma} &amp; {\Psi} &amp; {\backslash Psi} \\<br>\hline<br>{\Delta} &amp; {\backslash Delta} &amp; {\Xi} &amp; {\backslash Xi} &amp; {\Upsilon} &amp; {\backslash Upsilon} &amp; {\Omega} &amp; {\backslash Omega} \\<br>\hline<br>{\Omega} &amp; {\backslash Omega} &amp; {\Pi} &amp; {\backslash Pi} &amp; {\Phi} &amp; {\backslash Phi} &amp; {} &amp; {} \\<br>\hline<br>\end{array}<br>$$</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol><li><a href="http://blog.csdn.net/xiahouzuoxin/article/details/26478179" target="_blank" rel="noopener">Markdown中插入数学公式的方法</a></li><li><a href="http://www.cnblogs.com/houkai/p/3399646.html" target="_blank" rel="noopener">LATEX数学公式基本语法</a></li><li><a href="https://liam0205.me/2014/09/08/latex-introduction/" target="_blank" rel="noopener">一份其实很短的 LaTeX 入门文档</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/mathjax1.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="写作" scheme="http://frankblog.site/categories/%E5%86%99%E4%BD%9C/"/>
    
    
      <category term="markdown" scheme="http://frankblog.site/tags/markdown/"/>
    
      <category term="LaTex" scheme="http://frankblog.site/tags/LaTex/"/>
    
  </entry>
  
  <entry>
    <title>SVM可视化</title>
    <link href="http://frankblog.site/2018/06/02/svm%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <id>http://frankblog.site/2018/06/02/svm可视化/</id>
    <published>2018-06-02T08:02:15.545Z</published>
    <updated>2018-06-03T13:21:05.388Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/SVM_%E5%B0%81%E9%9D%A2_1.jpg" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">从IT时代走向DT时代</font></blockquote><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">class1 = np.array([[1, 1], [1, 3], [2, 1], [1, 2], [2, 2]])</span><br><span class="line">class2 = np.array([[4, 4], [5, 5], [5, 4], [5, 3], [4, 5], [6, 4]])</span><br><span class="line">plt.figure(figsize=(6, 4), dpi=120)</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Decision Boundary&apos;)</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 8)</span><br><span class="line">plt.ylim(0, 6)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.scatter(class1[:, 0], class1[:, 1], marker=&apos;o&apos;)</span><br><span class="line">plt.scatter(class2[:, 0], class2[:, 1], marker=&apos;s&apos;)</span><br><span class="line">plt.plot([1, 5], [5, 1], &apos;-r&apos;)</span><br><span class="line">plt.arrow(4, 4, -1, -1, shape=&apos;full&apos;, color=&apos;r&apos;)</span><br><span class="line">plt.plot([3, 3], [0.5, 6], &apos;--b&apos;)</span><br><span class="line">plt.arrow(4, 4, -1, 0, shape=&apos;full&apos;, color=&apos;b&apos;, linestyle=&apos;--&apos;)</span><br><span class="line">plt.annotate(r&apos;margin 1&apos;,</span><br><span class="line">             xy=(3.5, 4), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(3.1, 4.5), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;margin 2&apos;,</span><br><span class="line">             xy=(3.5, 3.5), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(4, 3.5), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;support vector&apos;,</span><br><span class="line">             xy=(4, 4), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(5, 4.5), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;support vector&apos;,</span><br><span class="line">             xy=(2, 2), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(0.5, 1.5), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/svm%E7%94%BB%E5%9B%BE.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(6, 4), dpi=120)</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Support Vector Machine&apos;)</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 8)</span><br><span class="line">plt.ylim(0, 6)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.scatter(class1[:, 0], class1[:, 1], marker=&apos;o&apos;)</span><br><span class="line">plt.scatter(class2[:, 0], class2[:, 1], marker=&apos;s&apos;)</span><br><span class="line">plt.plot([1, 5], [5, 1], &apos;-r&apos;)</span><br><span class="line">plt.plot([0, 4], [4, 0], &apos;--b&apos;, [2, 6], [6, 2], &apos;--b&apos;)</span><br><span class="line">plt.arrow(4, 4, -1, -1, shape=&apos;full&apos;, color=&apos;b&apos;)</span><br><span class="line">plt.annotate(r&apos;$w^T x + b = 0$&apos;,</span><br><span class="line">             xy=(5, 1), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(6, 1), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;$w^T x + b = 1$&apos;,</span><br><span class="line">             xy=(6, 2), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(7, 2), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;$w^T x + b = -1$&apos;,</span><br><span class="line">             xy=(3.5, 0.5), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(4.5, 0.2), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;d&apos;,</span><br><span class="line">             xy=(3.5, 3.5), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(2, 4.5), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;A&apos;,</span><br><span class="line">             xy=(4, 4), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(5, 4.5), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/SVM%E7%94%BB%E5%9B%BE1.jpg" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.datasets import make_blobs</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(10, 4), dpi=140)</span><br><span class="line"></span><br><span class="line"># sub plot 1</span><br><span class="line">plt.subplot(1, 2, 1)</span><br><span class="line"></span><br><span class="line">X, y = make_blobs(n_samples=100, </span><br><span class="line"> n_features=2, </span><br><span class="line"> centers=[(1, 1), (2, 2)], </span><br><span class="line"> random_state=4, </span><br><span class="line"> shuffle=False,</span><br><span class="line"> cluster_std=0.4)</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Non-linear Separatable&apos;)</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 3)</span><br><span class="line">plt.ylim(0, 3)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.scatter(X[y==0][:, 0], X[y==0][:, 1], marker=&apos;o&apos;)</span><br><span class="line">plt.scatter(X[y==1][:, 0], X[y==1][:, 1], marker=&apos;s&apos;)</span><br><span class="line">plt.plot([0.5, 2.5], [2.5, 0.5], &apos;-r&apos;)</span><br><span class="line"></span><br><span class="line"># sub plot 2</span><br><span class="line">plt.subplot(1, 2, 2)</span><br><span class="line"></span><br><span class="line">class1 = np.array([[1, 1], [1, 3], [2, 1], [1, 2], [2, 2], [1.5, 1.5], [1.2, 1.7]])</span><br><span class="line">class2 = np.array([[4, 4], [5, 5], [5, 4], [5, 3], [4, 5], [6, 4], [5.5, 3.5], [4.5, 4.5], [2, 1.5]])</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Slack Variable&apos;)</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 7)</span><br><span class="line">plt.ylim(0, 7)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.scatter(class1[:, 0], class1[:, 1], marker=&apos;o&apos;)</span><br><span class="line">plt.scatter(class2[:, 0], class2[:, 1], marker=&apos;s&apos;)</span><br><span class="line">plt.plot([1, 5], [5, 1], &apos;-r&apos;)</span><br><span class="line">plt.plot([0, 4], [4, 0], &apos;--b&apos;, [2, 6], [6, 2], &apos;--b&apos;)</span><br><span class="line">plt.arrow(2, 1.5, 2.25, 2.25, shape=&apos;full&apos;, color=&apos;b&apos;)</span><br><span class="line">plt.annotate(r&apos;violate margin rule.&apos;,</span><br><span class="line"> xy=(2, 1.5), xycoords=&apos;data&apos;,</span><br><span class="line"> xytext=(0.2, 0.5), fontsize=10,</span><br><span class="line"> arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;normal sample. $\epsilon = 0$&apos;,</span><br><span class="line"> xy=(4, 5), xycoords=&apos;data&apos;,</span><br><span class="line"> xytext=(4.5, 5.5), fontsize=10,</span><br><span class="line"> arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;$\epsilon &gt; 0$&apos;,</span><br><span class="line"> xy=(3, 2.5), xycoords=&apos;data&apos;,</span><br><span class="line"> xytext=(3, 1.5), fontsize=10,</span><br><span class="line"> arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/svm%E7%94%BB%E5%9B%BE2.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(6, 4), dpi=120)</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Cost&apos;)</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 4)</span><br><span class="line">plt.ylim(0, 2)</span><br><span class="line">plt.xlabel(&apos;$y^&#123;(i)&#125; (w^T x^&#123;(i)&#125; + b)$&apos;)</span><br><span class="line">plt.ylabel(&apos;Cost&apos;)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.plot([0, 1], [1.5, 0], &apos;-r&apos;)</span><br><span class="line">plt.plot([1, 3], [0.015, 0.015], &apos;-r&apos;)</span><br><span class="line">plt.annotate(r&apos;$J_i = R \epsilon_i$ for $y^&#123;(i)&#125; (w^T x^&#123;(i)&#125; + b) \geq 1 - \epsilon_i$&apos;,</span><br><span class="line">             xy=(0.7, 0.5), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(1, 1), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br><span class="line">plt.annotate(r&apos;$J_i = 0$ for $y^&#123;(i)&#125; (w^T x^&#123;(i)&#125; + b) \geq 1$&apos;,</span><br><span class="line">             xy=(1.5, 0), xycoords=&apos;data&apos;,</span><br><span class="line">             xytext=(1.8, 0.2), fontsize=10,</span><br><span class="line">             arrowprops=dict(arrowstyle=&quot;-&gt;&quot;, connectionstyle=&quot;arc3,rad=.2&quot;))</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/svm%E7%94%BB%E5%9B%BE3.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">plt.figure(figsize=(10, 4), dpi=144)</span><br><span class="line"></span><br><span class="line">class1 = np.array([[1, 1], [1, 2], [1, 3], [2, 1], [2, 2], [3, 2], [4, 1], [5, 1]])</span><br><span class="line">class2 = np.array([[2.2, 4], [1.5, 5], [1.8, 4.6], [2.4, 5], [3.2, 5], [3.7, 4], [4.5, 4.5], [5.4, 3]])</span><br><span class="line"></span><br><span class="line"># sub plot 1</span><br><span class="line">plt.subplot(1, 2, 1)</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Non-linear Separatable in Low Dimension&apos;)</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 6)</span><br><span class="line">plt.ylim(0, 6)</span><br><span class="line">plt.yticks(())</span><br><span class="line">plt.xlabel(&apos;X1&apos;)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line">ax.spines[&apos;left&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.scatter(class1[:, 0], np.zeros(class1[:, 0].shape[0]) + 0.05, marker=&apos;o&apos;)</span><br><span class="line">plt.scatter(class2[:, 0], np.zeros(class2[:, 0].shape[0]) + 0.05, marker=&apos;s&apos;)</span><br><span class="line"></span><br><span class="line"># sub plot 2</span><br><span class="line">plt.subplot(1, 2, 2)</span><br><span class="line"></span><br><span class="line">plt.title(&apos;Linear Separatable in High Dimension&apos;)</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 6)</span><br><span class="line">plt.ylim(0, 6)</span><br><span class="line">plt.xlabel(&apos;X1&apos;)</span><br><span class="line">plt.ylabel(&apos;X2&apos;)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.scatter(class1[:, 0], class1[:, 1], marker=&apos;o&apos;)</span><br><span class="line">plt.scatter(class2[:, 0], class2[:, 1], marker=&apos;s&apos;)</span><br><span class="line">plt.plot([1, 5], [3.8, 2], &apos;-r&apos;)</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/svm%E7%94%BB%E5%9B%BE4.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">def gaussian_kernel(x, mean, sigma):</span><br><span class="line"> return np.exp(- (x - mean)**2 / (2 * sigma**2))</span><br><span class="line"></span><br><span class="line">x = np.linspace(0, 6, 500)</span><br><span class="line">mean = 1</span><br><span class="line">sigma1 = 0.1</span><br><span class="line">sigma2 = 0.3</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(10, 3), dpi=144)</span><br><span class="line"></span><br><span class="line"># sub plot 1</span><br><span class="line">plt.subplot(1, 2, 1)</span><br><span class="line">plt.title(&apos;Gaussian for $\sigma=&#123;0&#125;$&apos;.format(sigma1))</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 2)</span><br><span class="line">plt.ylim(0, 1.1)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.plot(x, gaussian_kernel(x, mean, sigma1), &apos;r-&apos;)</span><br><span class="line"></span><br><span class="line"># sub plot 2</span><br><span class="line">plt.subplot(1, 2, 2)</span><br><span class="line">plt.title(&apos;Gaussian for $\sigma=&#123;0&#125;$&apos;.format(sigma2))</span><br><span class="line"></span><br><span class="line">plt.xlim(0, 2)</span><br><span class="line">plt.ylim(0, 1.1)</span><br><span class="line">ax = plt.gca()                                  # gca 代表当前坐标轴，即 &apos;get current axis&apos;</span><br><span class="line">ax.spines[&apos;right&apos;].set_color(&apos;none&apos;)            # 隐藏坐标轴</span><br><span class="line">ax.spines[&apos;top&apos;].set_color(&apos;none&apos;)</span><br><span class="line"></span><br><span class="line">plt.plot(x, gaussian_kernel(x, mean, sigma2), &apos;r-&apos;)</span><br></pre></td></tr></table></figure><p><img src="http://p4rlzrioq.bkt.clouddn.com/svm%E7%94%BB%E5%9B%BE5.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/SVM_%E5%B0%81%E9%9D%A2_1.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://frankblog.site/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="可视化" scheme="http://frankblog.site/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
      <category term="SVM" scheme="http://frankblog.site/tags/SVM/"/>
    
  </entry>
  
  <entry>
    <title>如何用形象的比喻描述大数据的技术生态？Hadoop、Hive、Spark 之间是什么关系？</title>
    <link href="http://frankblog.site/2018/06/01/%E5%A6%82%E4%BD%95%E7%94%A8%E5%BD%A2%E8%B1%A1%E7%9A%84%E6%AF%94%E5%96%BB%E6%8F%8F%E8%BF%B0%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E6%8A%80%E6%9C%AF%E7%94%9F%E6%80%81%EF%BC%9FHadoop%E3%80%81Hive%E3%80%81Spark%20%E4%B9%8B%E9%97%B4%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB%EF%BC%9F/"/>
    <id>http://frankblog.site/2018/06/01/如何用形象的比喻描述大数据的技术生态？Hadoop、Hive、Spark 之间是什么关系？/</id>
    <published>2018-06-01T12:06:43.304Z</published>
    <updated>2018-06-02T08:01:26.843Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/Bigdata.jpg" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">从IT时代走向DT时代</font></blockquote><hr><p>如何用形象的比喻描述大数据的技术生态？Hadoop、Hive、Spark 之间是什么关系？<br>这是知乎上某大神的解释：</p><p><strong>学习很重要的是能将纷繁复杂的信息进行归类和抽象。</strong><br>对应到大数据技术体系，虽然各种技术百花齐放，层出不穷，但大数据技术本质上无非解决4个核心问题：</p><ul><li>存储，海量的数据怎样有效的存储？主要包括hdfs、Kafka；</li><li>计算，海量的数据怎样快速计算？主要包括MapReduce、Spark、Flink等；</li><li>查询，海量数据怎样快速查询？主要为Nosql和Olap，Nosql主要包括Hbase、 Cassandra 等，其中olap包括kylin、impla等，其中Nosql主要解决随机查询，Olap技术主要解决关联查询；挖掘，海量数据怎样挖掘出隐藏的知识？也就是当前火热的机器学习和深度学习等技术，包括TensorFlow、caffe、mahout等；</li></ul><p><strong>大数据技术生态其实是一个江湖….</strong><br>在一个夜黑风高的晚上，江湖第一大帮会Google三本阵法修炼秘籍流出，大数据技术江湖从此纷争四起、永无宁日…<br>这三本秘籍分别为：</p><ul><li>《Google file system》：论述了怎样借助普通机器有效的存储海量的大数据；</li><li>《Google MapReduce》：论述了怎样快速计算海量的数据；</li><li>《Google BigTable》：论述了怎样实现海量数据的快速查询；</li></ul><p><strong>以上三篇论文秘籍是大数据入门的最好文章，通俗易懂，先看此三篇再看其它技术；</strong></p><p>在Google三大秘籍流出之后，江湖上，致力于武学开放的apache根据这三本秘籍分别研究出了对应的武学巨著《hadoop》，并开放给各大门派研习。<br>Hadoop包括三大部分，分别是hdfs、MapReduce和hbase：</p><ul><li>hdfs解决大数据的存储问题。</li><li>mapreduce解决大数据的计算问题。</li><li>hbase解决大数据量的查询问题。</li></ul><p>之后，在各大门派的支持下，Hadoop不断衍生和进化各种分支流派，其中最激烈的当属计算技术，其次是查询技术。存储技术基本无太多变化，hdfs一统天下。以下为大概的演进：</p><ul><li>1，传统数据仓库派说你mapreduce修炼太复杂，老子不会编程，老子以前用sql吃遍天下，为了将这拨人收入门下，并降低大数据修炼难度，遂出了hive，pig、impla等SQL ON Hadoop的简易修炼秘籍；</li><li>2，伯克利派说你MapReduce只重招数，内力无法施展，且不同的场景需要修炼不同的技术，太过复杂，于是推出基于内力（内存）的《Spark》，意图解决所有大数据计算问题。</li><li>3，流式计算相关门派说你hadoop只能憋大招（批量计算），太麻烦，于是出了SparkStreaming、Storm，S4等流式计算技术，能够实现数据一来就即时计算。</li><li>4，apache看各大门派纷争四起，推出flink，想一统流计算和批量计算的修炼；</li></ul><p>原文地址：<a href="https://www.zhihu.com/question/27974418/answer/156227565" target="_blank" rel="noopener">知乎</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/Bigdata.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://frankblog.site/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hadoop" scheme="http://frankblog.site/tags/hadoop/"/>
    
      <category term="spark" scheme="http://frankblog.site/tags/spark/"/>
    
  </entry>
  
  <entry>
    <title>梯度下降法总结</title>
    <link href="http://frankblog.site/2018/06/01/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://frankblog.site/2018/06/01/梯度下降法总结/</id>
    <published>2018-06-01T08:20:06.419Z</published>
    <updated>2018-06-02T07:09:29.464Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95.gif" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">从IT时代走向DT时代</font></blockquote><hr><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h1><p>梯度实际上就是多变量微分的一般化。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%A2%AF%E5%BA%A66.2_0.png" alt="link"></p><p>梯度是微积分中一个很重要的概念，之前提到过梯度的意义</p><ul><li>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率</li><li>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向。</li></ul><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%A2%AF%E5%BA%A66.2.png" alt="link"></p><p>此公式的意义是：J是关于Θ的一个函数，我们当前所处的位置为Θ0点，要从这个点走到J的最小值点，也就是山底。首先我们先确定前进的方向，也就是梯度的反向，然后走一段距离的步长，也就是α，走完这个段步长，就到达了Θ1这个点！<br>α在梯度下降算法中被称作为<strong>学习率</strong>或者<strong>步长</strong>，意味着我们可以通过α来控制每一步走的距离。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%A2%AF%E5%BA%A66.2_1.png" alt="link"></p><h1 id="多元函数的梯度下降"><a href="#多元函数的梯度下降" class="headerlink" title="多元函数的梯度下降"></a>多元函数的梯度下降</h1><p>我们假设有一个目标函数</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B06.2.png" alt="多元函数的梯度下降"></p><p>现在要通过梯度下降法计算这个函数的最小值。我们通过观察就能发现最小值其实就是 (0，0)点。但是接下来，我们会从梯度下降算法开始一步步计算到这个最小值！<br>我们假设初始的起点为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B06.2_1.png" alt="image.png"></p><p>初始的学习率为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B06.2_2.png" alt="image.png"></p><p>函数的梯度为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B06.2_3.png" alt="image.png"></p><p>进行多次迭代：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B06.2_4.png" alt="image.png"></p><p>我们发现，已经基本靠近函数的最小值点</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B06.2_5.png" alt="image.png"></p><h1 id="学习率"><a href="#学习率" class="headerlink" title="学习率"></a>学习率</h1><h2 id="选择合适的学习速率"><a href="#选择合适的学习速率" class="headerlink" title="选择合适的学习速率"></a>选择合适的学习速率</h2><p><img src="http://wx1.sinaimg.cn/mw690/a9c4d5f6gy1fe0p7olqw1j212k0mqjvn.jpg" alt=""></p><p>假设从左边最高点开始，如果 learning rate 调整的刚刚好，比如红色的线，就能顺利找到最低点。如果 learning rate 调整的太小，比如蓝色的线，就会走的太慢，虽然这种情况给足够多的时间也可以找到最低点，实际情况可能会等不及出结果。如果 learning rate 调整的有点大，比如绿色的线，就会在上面震荡，走不下去，永远无法到达最低点。还有可能非常大，比如黄色的线，直接就飞出去了，update参数的时候只会发现损失函数越更新越大。</p><p>虽然这样的可视化可以很直观观察，但可视化也只是能在参数是一维或者二维的时候进行，更高维的情况已经无法可视化了。</p><h2 id="自适应学习速率"><a href="#自适应学习速率" class="headerlink" title="自适应学习速率"></a>自适应学习速率</h2><p>举一个简单的思想：随着次数的增加，通过一些因子来减少 learning rate</p><ul><li>通常刚开始，初始点会距离最低点比较远，所以使用大一点的 learning rate</li><li>update好几次参数之后呢，比较靠近最低点了，此时减少 learning rate</li><li>比如 \(\eta^{t} = \eta / \sqrt{t+1}\)，t是次数。随着次数的增加，\(η_t\)减小</li></ul><h1 id="Feature-Scaling（特征缩放）"><a href="#Feature-Scaling（特征缩放）" class="headerlink" title="Feature Scaling（特征缩放）"></a>Feature Scaling（特征缩放）</h1><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%89%B9%E5%BE%81%E7%BC%A9%E6%94%BE.jpg" alt=""></p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%89%B9%E5%BE%81%E7%BC%A9%E6%94%BE1.jpg" alt=""></p><p>图左边是\(x_{1}\)的scale比的scale比\(x_{2}\)要小很多，所以当要小很多，所以当\(w_{1}\)和和\(w_{2}\)做同样的变化时，做同样的变化时，\(w_{1}\)对y的变化影响是比较小的，对y的变化影响是比较小的，\(x_{2}\)对y的变化影响是比较大的。</p><p>坐标系中是两个参数的error surface（现在考虑左边蓝色），因为\(w_{1}\)对y的变化影响比较小，所以对y的变化影响比较小，所以\(w_{1}\)对损失函数的影响比较小，对损失函数的影响比较小，\(w_{1}\)对损失函数有比较小的微分，所以对损失函数有比较小的微分，所以vw_{1}\)方向上是比较平滑的。同理方向上是比较平滑的。同理\(x_{2}\)对y的影响比较大，所以对y的影响比较大，所以\(x_{2}\)对损失函数的影响比较大，所以在对损失函数的影响比较大，所以在\(x_{2}\)方向有比较尖的峡谷。</p><p>上图右边是两个参数scaling比较接近，右边的绿色图就比较接近圆形。</p><p>对于左边的情况，两个方向上需要不同的学习率，同一组学习率会搞不定它。而右边情形更新参数就会变得比较容易。左边的梯度下降并不是向着最低点方向走的，而是顺着等高线切线法线方向走的。但绿色就可以向着圆心（最低点）走，这样做参数更新也是比较有效率。</p><h1 id="常见的算法"><a href="#常见的算法" class="headerlink" title="常见的算法"></a>常见的算法</h1><ul><li><strong>批量梯度下降</strong>：批量梯度下降每次更新使用了所有的训练数据。<strong>如果只有一个极小值，那么批梯度下降是考虑了训练集所有数据，是朝着最小值迭代运动的，</strong>但是缺点是如果样本值很大的话，更新速度会很慢。</li><li><strong>随机梯度下降</strong>：随机也就是说用一个样本的梯度来近似所有的样本，来调整θ，这样会大大加快训练数据，但是有可能由于训练数据的噪声点较多。<strong>每一次利用噪声点进行更新的过程中，不一定是朝着极小值方向更新，但是由于多次迭代，整体方向还是大致朝着极小值方向更新，提高了速度。</strong></li><li><strong>小批量梯度下降</strong>：小批量梯度下降法是<strong>为了解决批梯度下降法的训练速度慢，以及随机梯度下降法的准确性综合而来，但是这里注意，不同问题的batch是不一样的</strong>。</li></ul><h2 id="批量梯度下降代码"><a href="#批量梯度下降代码" class="headerlink" title="批量梯度下降代码"></a>批量梯度下降代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">#This is a sample to simulate a function y = theta1*x1 + theta2*x2</span><br><span class="line">input_x = [[1,4], [2,5], [5,1], [4,2]] </span><br><span class="line">y = [19,26,19,20] </span><br><span class="line">theta = [1,1]</span><br><span class="line">loss = 10</span><br><span class="line">step_size = 0.001</span><br><span class="line">eps =0.0001</span><br><span class="line">max_iters = 10000</span><br><span class="line">error =0</span><br><span class="line">iter_count = 0</span><br><span class="line">while( loss &gt; eps and iter_count &lt; max_iters):</span><br><span class="line">    loss = 0</span><br><span class="line">#这里更新权重的时候所有的样本点都用上了</span><br><span class="line">    for i in range (3):</span><br><span class="line"> pred_y = theta[0]*input_x[i][0]+theta[1]*input_x[i][1]</span><br><span class="line">theta[0] = theta[0] - step_size * (pred_y - y[i]) * input_x[i][0]</span><br><span class="line"> theta[1] = theta[1] - step_size * (pred_y - y[i]) * input_x[i][1]</span><br><span class="line">    for i in range (3):</span><br><span class="line">pred_y = theta[0]*input_x[i][0]+theta[1]*input_x[i][1]</span><br><span class="line">error = 0.5*(pred_y - y[i])**2</span><br><span class="line">loss = loss + error</span><br><span class="line">    iter_count += 1</span><br><span class="line">    print &apos;iters_count&apos;, iter_count</span><br><span class="line"></span><br><span class="line">print &apos;theta: &apos;,theta </span><br><span class="line">print &apos;final loss: &apos;, loss</span><br><span class="line">print &apos;iters: &apos;, iter_count</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line"></span><br><span class="line">iters_count 219</span><br><span class="line">iters_count 220</span><br><span class="line">iters_count 221</span><br><span class="line">iters_count 222</span><br><span class="line">iters_count 223</span><br><span class="line">iters_count 224</span><br><span class="line">iters_count 225</span><br><span class="line">theta: [3.0027765778748003, 3.997918297015663]</span><br><span class="line">final loss: 9.68238055213e-05</span><br><span class="line">iters: 225</span><br><span class="line">[Finished in 0.2s]</span><br></pre></td></tr></table></figure><h2 id="随机梯度下降代码"><a href="#随机梯度下降代码" class="headerlink" title="随机梯度下降代码"></a>随机梯度下降代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"># 每次选取一个值,随机一个点更新 θ</span><br><span class="line">import random</span><br><span class="line">#This is a sample to simulate a function y = theta1*x1 + theta2*x2</span><br><span class="line">input_x = [[1,4], [2,5], [5,1], [4,2]] </span><br><span class="line">y = [19,26,19,20] </span><br><span class="line">theta = [1,1]</span><br><span class="line">loss = 10</span><br><span class="line">step_size = 0.001</span><br><span class="line">eps =0.0001</span><br><span class="line">max_iters = 10000</span><br><span class="line">error =0</span><br><span class="line">iter_count = 0</span><br><span class="line">while( loss &gt; eps and iter_count &lt; max_iters):</span><br><span class="line">    loss = 0</span><br><span class="line"> #每一次选取随机的一个点进行权重的更新</span><br><span class="line">    i = random.randint(0,3)</span><br><span class="line">    pred_y = theta[0]*input_x[i][0]+theta[1]*input_x[i][1]</span><br><span class="line">    theta[0] = theta[0] - step_size * (pred_y - y[i]) * input_x[i][0]</span><br><span class="line">    theta[1] = theta[1] - step_size * (pred_y - y[i]) * input_x[i][1]</span><br><span class="line">    for i in range (3):</span><br><span class="line">pred_y = theta[0]*input_x[i][0]+theta[1]*input_x[i][1]</span><br><span class="line">error = 0.5*(pred_y - y[i])**2</span><br><span class="line">loss = loss + error</span><br><span class="line">    iter_count += 1</span><br><span class="line">    print &apos;iters_count&apos;, iter_count</span><br><span class="line"></span><br><span class="line">print &apos;theta: &apos;,theta </span><br><span class="line">print &apos;final loss: &apos;, loss</span><br><span class="line">print &apos;iters: &apos;, iter_count</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#output:</span><br><span class="line">iters_count 1226</span><br><span class="line">iters_count 1227</span><br><span class="line">iters_count 1228</span><br><span class="line">iters_count 1229</span><br><span class="line">iters_count 1230</span><br><span class="line">iters_count 1231</span><br><span class="line">iters_count 1232</span><br><span class="line">theta: [3.002441488688225, 3.9975844154600226]</span><br><span class="line">final loss: 9.989420302e-05</span><br><span class="line">iters: 1232</span><br><span class="line">[Finished in 0.3s]</span><br></pre></td></tr></table></figure><h2 id="小批量梯度下降代码"><a href="#小批量梯度下降代码" class="headerlink" title="小批量梯度下降代码"></a>小批量梯度下降代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 这里用2个样本点</span><br><span class="line">import random</span><br><span class="line">#This is a sample to simulate a function y = theta1*x1 + theta2*x2</span><br><span class="line">input_x = [[1,4], [2,5], [5,1], [4,2]] </span><br><span class="line">y = [19,26,19,20] </span><br><span class="line">theta = [1,1]</span><br><span class="line">loss = 10</span><br><span class="line">step_size = 0.001</span><br><span class="line">eps =0.0001</span><br><span class="line">max_iters = 10000</span><br><span class="line">error =0</span><br><span class="line">iter_count = 0</span><br><span class="line">while( loss &gt; eps and iter_count &lt; max_iters):</span><br><span class="line">    loss = 0</span><br><span class="line"></span><br><span class="line">    i = random.randint(0,3) #注意这里，我这里批量每次选取的是2个样本点做更新，另一个点是随机点+1的相邻点</span><br><span class="line">    j = (i+1)%4</span><br><span class="line">    pred_y = theta[0]*input_x[i][0]+theta[1]*input_x[i][1]</span><br><span class="line">    theta[0] = theta[0] - step_size * (pred_y - y[i]) * input_x[i][0]</span><br><span class="line">    theta[1] = theta[1] - step_size * (pred_y - y[i]) * input_x[i][1]</span><br><span class="line"></span><br><span class="line">    pred_y = theta[0]*input_x[j][0]+theta[1]*input_x[j][1]</span><br><span class="line">    theta[0] = theta[0] - step_size * (pred_y - y[j]) * input_x[j][0]</span><br><span class="line">    theta[1] = theta[1] - step_size * (pred_y - y[j]) * input_x[j][1]</span><br><span class="line">    for i in range (3):</span><br><span class="line">pred_y = theta[0]*input_x[i][0]+theta[1]*input_x[i][1]</span><br><span class="line">error = 0.5*(pred_y - y[i])**2</span><br><span class="line">loss = loss + error</span><br><span class="line">    iter_count += 1</span><br><span class="line">    print &apos;iters_count&apos;, iter_count</span><br><span class="line"></span><br><span class="line">print &apos;theta: &apos;,theta </span><br><span class="line">print &apos;final loss: &apos;, loss</span><br><span class="line">print &apos;iters: &apos;, iter_count</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">output:</span><br><span class="line">iters_count 543</span><br><span class="line">iters_count 544</span><br><span class="line">iters_count 545</span><br><span class="line">iters_count 546</span><br><span class="line">iters_count 547</span><br><span class="line">iters_count 548</span><br><span class="line">iters_count 549</span><br><span class="line">theta: [3.0023012574840764, 3.997553282857357]</span><br><span class="line">final loss: 9.81717138358e-05</span><br><span class="line">iters: 549</span><br></pre></td></tr></table></figure><h1 id="梯度下降的局限"><a href="#梯度下降的局限" class="headerlink" title="梯度下降的局限"></a>梯度下降的局限</h1><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E5%B1%80%E9%99%90.jpg" alt=""></p><ul><li>容易陷入局部极值</li><li>还有可能卡在不是极值，但微分值是0的地方</li><li>还有可能实际中只是当微分值小于某一个数值就停下来了，但这里只是比较平缓，并不是极值点</li></ul><p>参考：<a href="https://zhuanlan.zhihu.com/qinlibo-ml" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/qinlibo-ml</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://frankblog.site/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="优化算法" scheme="http://frankblog.site/tags/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>深度学习之Tensorflow(一)</title>
    <link href="http://frankblog.site/2018/06/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8BTensorflow(%E4%B8%80)/"/>
    <id>http://frankblog.site/2018/06/01/深度学习之Tensorflow(一)/</id>
    <published>2018-06-01T07:35:47.712Z</published>
    <updated>2018-06-01T09:10:04.104Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/tensorflow.jpg" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">从IT时代走向DT时代</font></blockquote><hr><h1 id="Tensorflow简单示例"><a href="#Tensorflow简单示例" class="headerlink" title="Tensorflow简单示例"></a>Tensorflow简单示例</h1><h2 id="1-基本运算"><a href="#1-基本运算" class="headerlink" title="1. 基本运算"></a>1. 基本运算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#定义一个常量</span><br><span class="line">a = tf.constant([3,3])</span><br><span class="line">#定义一个变量</span><br><span class="line">x = tf.Variable([1,2])</span><br><span class="line"></span><br><span class="line">#定义一个加法op</span><br><span class="line">add = tf.add(a,x)</span><br><span class="line">#定义一个减法</span><br><span class="line">sub = tf.subtract(a,x)</span><br><span class="line">#定义一个乘法op</span><br><span class="line">mul = tf.multiply(a,x)</span><br><span class="line">#定义初始化</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">#定义多个操作</span><br><span class="line">add2 = tf.add(a,add)</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">sess.run(init)</span><br><span class="line">print(&quot;加法：&quot;,sess.run(add)) #执行加法</span><br><span class="line">print(&quot;减法：&quot;,sess.run(sub)) #执行减法</span><br><span class="line">print(&quot;乘法：&quot;,sess.run(mul)) #执行乘法</span><br><span class="line">#同时执行乘法op和加法op</span><br><span class="line">result = sess.run([add,add2,sub,mul])</span><br><span class="line">print(&quot;执行多个：&quot;,result)</span><br></pre></td></tr></table></figure><h2 id="2-使用占位符"><a href="#2-使用占位符" class="headerlink" title="2. 使用占位符"></a>2. 使用占位符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#Feed：先定义占位符，等需要的时候再传入数据</span><br><span class="line">#创建占位符</span><br><span class="line">input1 = tf.placeholder(tf.float32)</span><br><span class="line">input2 = tf.placeholder(tf.float32)</span><br><span class="line">#定义乘法op</span><br><span class="line">output = tf.multiply(input1,input2)</span><br><span class="line">add = tf.add(input1,input2)</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">#feed的数据以字典的形式传入</span><br><span class="line">print(sess.run(add, feed_dict=&#123;input1:[8.],input2:[2.]&#125;))</span><br></pre></td></tr></table></figure><h1 id="Tensorflow简单回归模型"><a href="#Tensorflow简单回归模型" class="headerlink" title="Tensorflow简单回归模型"></a>Tensorflow简单回归模型</h1><h2 id="1-最简单的线性回归模型"><a href="#1-最简单的线性回归模型" class="headerlink" title="1. 最简单的线性回归模型"></a>1. 最简单的线性回归模型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">#使用numpy生成100个随机点</span><br><span class="line">#样本点</span><br><span class="line">x_data = np.random.rand(100)</span><br><span class="line">y_data = x_data*0.1 + 0.2</span><br><span class="line"></span><br><span class="line">#构造一个线性模型</span><br><span class="line">d = tf.Variable(1.1)</span><br><span class="line">k = tf.Variable(0.5)</span><br><span class="line">y = k*x_data + d</span><br><span class="line"></span><br><span class="line">#二次代价函数&lt;均方差&gt;</span><br><span class="line">loss = tf.losses.mean_squared_error(y_data,y)</span><br><span class="line">#定义一个梯度下降法来进行训练的优化器</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(0.3)</span><br><span class="line">#最小化代价函数</span><br><span class="line">train = optimizer.minimize(loss)</span><br><span class="line"></span><br><span class="line">#初始化变量</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">sess.run(init)</span><br><span class="line"> for step in range(1000):</span><br><span class="line"> sess.run(train)</span><br><span class="line"> if step%100 ==0:</span><br><span class="line"> print(step,sess.run([k,d]))</span><br></pre></td></tr></table></figure><h2 id="2-非线性回归的问题"><a href="#2-非线性回归的问题" class="headerlink" title="2. 非线性回归的问题"></a>2. 非线性回归的问题</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line"></span><br><span class="line">#使用numpy生成200个随机点</span><br><span class="line">x_data = np.linspace(-0.5,0.5,200).reshape(-1,1)</span><br><span class="line">noise = np.random.normal(0,0.015,x_data.shape)</span><br><span class="line">y_data = np.square(x_data) + noise</span><br><span class="line"></span><br><span class="line">#定义两个placeholder，列数为1，行数未知</span><br><span class="line">x = tf.placeholder(tf.float32,[None,1])</span><br><span class="line">y = tf.placeholder(tf.float32,[None,1])</span><br><span class="line"></span><br><span class="line">#定义神经网络结构：1-20-1，一个输入一个输出一个隐藏层包含20个神经元</span><br><span class="line"></span><br><span class="line">#定义神经网络中间层</span><br><span class="line">Weights_L1 = tf.Variable(tf.random_normal([1,20])) # 初始化1行20列权值</span><br><span class="line">biases_L1 = tf.Variable(tf.zeros([1,20])) # 初始化1行20列偏置</span><br><span class="line">Wx_plus_b_L1 = tf.matmul(x,Weights_L1) + biases_L1 # 计算神经元信号</span><br><span class="line">L1 = tf.nn.tanh(Wx_plus_b_L1) # 使用激活函数计算神经元输出信号</span><br><span class="line"></span><br><span class="line">#定义神经网络输出层</span><br><span class="line">Weights_L2 = tf.Variable(tf.random_normal([20,1]))</span><br><span class="line">biases_L2 = tf.Variable(tf.zeros([1,1]))</span><br><span class="line">Wx_plus_b_L2 = tf.matmul(L1,Weights_L2) + biases_L2</span><br><span class="line">prediction = tf.nn.tanh(Wx_plus_b_L2)</span><br><span class="line"># prediction = Wx_plus_b_L2</span><br><span class="line"></span><br><span class="line">#二次代价函数</span><br><span class="line">loss = tf.losses.mean_squared_error(y,prediction)</span><br><span class="line">#使用梯度下降法最小化代价函数训练</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">#变量初始化</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line">for _ in range(1000):</span><br><span class="line">sess.run(train_step,feed_dict=&#123;x:x_data,y:y_data&#125;)</span><br><span class="line"></span><br><span class="line">#获得预测值</span><br><span class="line">prediction_value = sess.run(prediction,feed_dict=&#123;x:x_data&#125;)</span><br><span class="line">#画图</span><br><span class="line">plt.figure()</span><br><span class="line">plt.scatter(x_data,y_data)</span><br><span class="line">plt.plot(x_data,prediction_value,&apos;r-&apos;,lw=5)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">这里思考下中间层和输出层的激活函数的选取问题。</span><br><span class="line">1\. 中间层和输出层的激活函数均采用tanh函数，当迭代1000次时，数据拟合效果良好；输出层激活函数换成恒等函数时，效果会更好一点。</span><br><span class="line">2\. 这里使用sigmoid函数或者softmax函数，当迭代1000次时，无法拟合。事实证明在这个数据集里sigmoid函数和softmax函数均不能作为输出层的激活函数。当输出层激活函数为softmax时预测值恒为1这个很好理解；同理sigmoid此类函数收到输出值域的限制，在该数据里是无法用来作为输出激活函数的。</span><br><span class="line">3\. 经过有限次的测试发现，很对该数据情况下输出层的激活函数可以使用tanh、softsign和恒等函数；其中恒等激活函数表现最好（个人考虑是因为该数据非常简单）。</span><br><span class="line">4\. 经过有限次的测试发现，sigmoid、softmax、softsign、tanh均可作为该数据情况下的中间层激活函数（恒等函数除外）。其中tanh和softsign拟合的最快但softsign效果不好；sigmoid和softmax函数拟合较慢。随着迭代次数增加到20000次，最终都能很好地拟合数据。</span><br><span class="line">5\. sigmoid作为激活函数对神经炎要求的数量一般情况下要比tanh高。</span><br></pre></td></tr></table></figure><h1 id="Tensorflow分类模型"><a href="#Tensorflow分类模型" class="headerlink" title="Tensorflow分类模型"></a>Tensorflow分类模型</h1><p>本节用到Tensorflow自带的 mnist 数据集。这里使用独热编码将多元回归的问题转换成10个数值的二元分类问题。使用softmax作为输出层激活函数的意义在于将输出的概率数组归一化并凸显概率最大的值。当然这里也可以使用sigmoid或其他作为输出层激活函数。</p><h2 id="1-简单的MNIST数据集分类"><a href="#1-简单的MNIST数据集分类" class="headerlink" title="1. 简单的MNIST数据集分类"></a>1. 简单的MNIST数据集分类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.examples.tutorials.mnist import input_data</span><br><span class="line"></span><br><span class="line">#载入数据集</span><br><span class="line">mnist = input_data.read_data_sets(&quot;MNIST_data&quot;,one_hot=True)</span><br><span class="line"></span><br><span class="line">#每个批次的大小</span><br><span class="line">batch_size = 64</span><br><span class="line">#计算一共有多少个批次</span><br><span class="line">n_batch = mnist.train.num_examples // batch_size</span><br><span class="line"></span><br><span class="line">#定义两个placeholder</span><br><span class="line">x = tf.placeholder(tf.float32,[None,784])</span><br><span class="line">y = tf.placeholder(tf.float32,[None,10])</span><br><span class="line"></span><br><span class="line">#创建一个简单的神经网络</span><br><span class="line">W = tf.Variable(tf.zeros([784,10]))</span><br><span class="line">b = tf.Variable(tf.zeros([10]))</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(x,W)+b)</span><br><span class="line"></span><br><span class="line">#二次代价函数</span><br><span class="line">loss = tf.losses.mean_squared_error(y,prediction)</span><br><span class="line">#交叉熵代价函数</span><br><span class="line">loss = tf.losses.softmax_cross_entropy(y,prediction) </span><br><span class="line">#使用梯度下降法</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(0.2).minimize(loss)</span><br><span class="line"></span><br><span class="line">#初始化变量</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">#结果存放在一个布尔型列表中。</span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(prediction,1))#argmax返回一维张量中最大的值所在的位置</span><br><span class="line">#求准确率。</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">sess.run(init)</span><br><span class="line">#epoch：所有数据训练一次，就是一个epoch周期</span><br><span class="line">for epoch in range(21):</span><br><span class="line">#batch：一般为32，64个数据</span><br><span class="line">for batch in range(n_batch):</span><br><span class="line">batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</span><br><span class="line">sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys&#125;)</span><br><span class="line"></span><br><span class="line">acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels&#125;)</span><br><span class="line">print(&quot;Iter &quot; + str(epoch) + &quot;,Testing Accuracy &quot; + str(acc))</span><br></pre></td></tr></table></figure><h2 id="2-过拟合解决及梯度下降优化器"><a href="#2-过拟合解决及梯度下降优化器" class="headerlink" title="2. 过拟合解决及梯度下降优化器"></a>2. 过拟合解决及梯度下降优化器</h2><p>Dropout采用随机的方式“做空”神经元的权重，L1正则化采用的是“做空”贡献非常小的神经元权重，L2正则化是消弱每个神经元的权重让每个都有少许的贡献。<br>在神经网络中它们之间也可以结合使用，dropout应用较多些。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.examples.tutorials.mnist import input_data</span><br><span class="line"></span><br><span class="line">#载入数据集</span><br><span class="line">mnist = input_data.read_data_sets(&quot;MNIST_data&quot;,one_hot=True)</span><br><span class="line"></span><br><span class="line">#每个批次的大小</span><br><span class="line">batch_size = 64</span><br><span class="line">#计算一共有多少个批次</span><br><span class="line">n_batch = mnist.train.num_examples // batch_size</span><br><span class="line"></span><br><span class="line">#定义三个placeholder</span><br><span class="line">x = tf.placeholder(tf.float32,[None,784])</span><br><span class="line">y = tf.placeholder(tf.float32,[None,10])</span><br><span class="line">keep_prob=tf.placeholder(tf.float32)</span><br><span class="line"></span><br><span class="line"># 784-1000-500-10</span><br><span class="line">W1 = tf.Variable(tf.truncated_normal([784,1000],stddev=0.1))</span><br><span class="line">b1 = tf.Variable(tf.zeros([1000])+0.1)</span><br><span class="line">L1 = tf.nn.tanh(tf.matmul(x,W1)+b1)</span><br><span class="line">L1_drop = tf.nn.dropout(L1,keep_prob) </span><br><span class="line"></span><br><span class="line">W2 = tf.Variable(tf.truncated_normal([1000,500],stddev=0.1))</span><br><span class="line">b2 = tf.Variable(tf.zeros([500])+0.1)</span><br><span class="line">L2 = tf.nn.tanh(tf.matmul(L1_drop,W2)+b2)</span><br><span class="line">L2_drop = tf.nn.dropout(L2,keep_prob) </span><br><span class="line"></span><br><span class="line">W3 = tf.Variable(tf.truncated_normal([500,10],stddev=0.1))</span><br><span class="line">b3 = tf.Variable(tf.zeros([10])+0.1)</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(L2_drop,W3)+b3)</span><br><span class="line"></span><br><span class="line">#同样这里也可以使用正则项</span><br><span class="line">#l2_loss = tf.nn.l2_loss(W1) + tf.nn.l2_loss(b1) + #tf.nn.l2_loss(W2) + tf.nn.l2_loss(b2) + tf.nn.l2_loss(W3) + #tf.nn.l2_loss(b3)</span><br><span class="line"></span><br><span class="line">#交叉熵代价函数</span><br><span class="line">loss = tf.losses.softmax_cross_entropy(y,prediction)</span><br><span class="line"></span><br><span class="line">#正则后的交叉熵代价函数</span><br><span class="line">#loss = tf.losses.softmax_cross_entropy(y,prediction) + #0.0005*l2_loss #这里0.0005为学习率</span><br><span class="line">#使用梯度下降法</span><br><span class="line">train_step = tf.train.GradientDescentOptimizer(0.5).minimize(loss)</span><br><span class="line"></span><br><span class="line">#train_step = tf.train.AdamOptimizer(0.001).minimize(loss)# 使用优化器的梯度下降，同时还有其他很多种基于梯度下降的优化。这里的学习率取值比传统的梯度下降法要小</span><br><span class="line"></span><br><span class="line">#初始化变量</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">#结果存放在一个布尔型列表中</span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(prediction,1))#argmax返回一维张量中最大的值所在的位置</span><br><span class="line">#求准确率</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">sess.run(init)</span><br><span class="line">for epoch in range(31):</span><br><span class="line">for batch in range(n_batch):</span><br><span class="line">batch_xs,batch_ys =  mnist.train.next_batch(batch_size)</span><br><span class="line">sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys,keep_prob:0.5&#125;) #这里keep_prob:0.5 表示保留50%的神经元，这里把另它为1的时候保留所有神经元测试结果准确率提高了2个百分点，同时相对应的计算量也增大了</span><br><span class="line"></span><br><span class="line">test_acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels,keep_prob:1.0&#125;)</span><br><span class="line">train_acc = sess.run(accuracy,feed_dict=&#123;x:mnist.train.images,y:mnist.train.labels,keep_prob:1.0&#125;)</span><br><span class="line">print(&quot;Iter &quot; + str(epoch) + &quot;,Testing Accuracy &quot; + str(test_acc) +&quot;,Training Accuracy &quot; + str(train_acc))</span><br></pre></td></tr></table></figure></p><h2 id="3-神经网络优化"><a href="#3-神经网络优化" class="headerlink" title="3. 神经网络优化"></a>3. 神经网络优化</h2><p>这里的优化方式是不断减小学习率，使得在极小值附近迭代速度放缓，解决因学习率过大反复震荡无法拟合的问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.examples.tutorials.mnist import input_data</span><br><span class="line"></span><br><span class="line">#载入数据集</span><br><span class="line">mnist = input_data.read_data_sets(&quot;MNIST_data&quot;,one_hot=True)</span><br><span class="line"></span><br><span class="line">#每个批次的大小</span><br><span class="line">batch_size = 64</span><br><span class="line">#计算一共有多少个批次</span><br><span class="line">n_batch = mnist.train.num_examples // batch_size</span><br><span class="line"></span><br><span class="line">#定义三个placeholder</span><br><span class="line">x = tf.placeholder(tf.float32,[None,784])</span><br><span class="line">y = tf.placeholder(tf.float32,[None,10])</span><br><span class="line">keep_prob=tf.placeholder(tf.float32)</span><br><span class="line">lr = tf.Variable(0.001, dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"># 784-500-300-10</span><br><span class="line">#创建一个神经网络</span><br><span class="line">W1 = tf.Variable(tf.truncated_normal([784,500],stddev=0.1))</span><br><span class="line">b1 = tf.Variable(tf.zeros([500])+0.1)</span><br><span class="line">L1 = tf.nn.tanh(tf.matmul(x,W1)+b1)</span><br><span class="line">L1_drop = tf.nn.dropout(L1,keep_prob)</span><br><span class="line"></span><br><span class="line">W2 = tf.Variable(tf.truncated_normal([500,300],stddev=0.1))</span><br><span class="line">b2 = tf.Variable(tf.zeros([300])+0.1)</span><br><span class="line">L2 = tf.nn.tanh(tf.matmul(L1_drop,W2)+b2)</span><br><span class="line">L2_drop = tf.nn.dropout(L2,keep_prob)</span><br><span class="line"></span><br><span class="line">W3 = tf.Variable(tf.truncated_normal([300,10],stddev=0.1))</span><br><span class="line">b3 = tf.Variable(tf.zeros([10])+0.1)</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(L2_drop,W3)+b3)</span><br><span class="line"></span><br><span class="line">#交叉熵代价函数</span><br><span class="line">loss = tf.losses.softmax_cross_entropy(y,prediction)</span><br><span class="line">#训练</span><br><span class="line">train_step = tf.train.AdamOptimizer(lr).minimize(loss)</span><br><span class="line"></span><br><span class="line">#初始化变量</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line"></span><br><span class="line">#结果存放在一个布尔型列表中</span><br><span class="line">correct_prediction = tf.equal(tf.argmax(y,1),tf.argmax(prediction,1))#argmax返回一维张量中最大的值所在的位置</span><br><span class="line">#求准确率</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">sess.run(init)</span><br><span class="line">for epoch in range(21):</span><br><span class="line">sess.run(tf.assign(lr, 0.001 * (0.95 ** epoch)))</span><br><span class="line">for batch in range(n_batch):</span><br><span class="line">batch_xs,batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys,keep_prob:1.0&#125;)</span><br><span class="line"></span><br><span class="line">learning_rate = sess.run(lr)</span><br><span class="line">acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels,keep_prob:1.0&#125;)</span><br><span class="line">print (&quot;Iter &quot; + str(epoch) + &quot;, Testing Accuracy= &quot; + str(acc) + &quot;, Learning Rate= &quot; + str(learning_rate))</span><br></pre></td></tr></table></figure></p><h1 id="CNN卷积神经网络"><a href="#CNN卷积神经网络" class="headerlink" title="CNN卷积神经网络"></a>CNN卷积神经网络</h1><p>以上的案例采用的都是BP神经网络。考虑一张图片像素为100*100，则需要一万个输入神经元，若隐藏层也有一万个神经元则需要训练一亿个参数，这不仅需要更多计算昂还需要大量额训练样本用来“求解”。因此下面我们考虑用卷积神经网络来解决这个问题。</p><ul><li>CNN通过<strong>局部感受野</strong>和<strong>权值共享</strong>减少了神经网络需要训练的参数（权值）的个数。</li><li><p>卷积核/滤波器<br><img src="https://ihoge.cn/2018/media/15273889821782.jpg" alt=""></p></li><li><p>卷积Padding</p><ul><li>SAME PADDING</li><li>VALID PADDING</li></ul></li><li>池化<ul><li>max-pooling 提取卷积后特征的最大值也就是最重要的特征，进一步压缩参数</li><li>mean-pooling</li><li>随机-pooling<br><img src="https://ihoge.cn/2018/media/15273890234010.jpg" alt=""></li></ul></li><li><p>池化Padding</p><ul><li>SAME PADDING</li><li>VALID PADDING</li></ul></li></ul><p>下面看一个 CNN 卷积神经网络用于 MINIST 数据的分类问题。在CPU上运行比较耗时，16G内存的Mac-Pro大概两三分钟一个周期。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">import tensorflow as tf</span><br><span class="line">from tensorflow.examples.tutorials.mnist import input_data</span><br><span class="line"></span><br><span class="line">mnist = input_data.read_data_sets(&apos;MNIST_data&apos;,one_hot=True)</span><br><span class="line"></span><br><span class="line">#每个批次的大小</span><br><span class="line">batch_size = 64</span><br><span class="line">#计算一共有多少个批次</span><br><span class="line">n_batch = mnist.train.num_examples // batch_size</span><br><span class="line">#定义两个placeholder</span><br><span class="line">x = tf.placeholder(tf.float32,[None,784])#28*28</span><br><span class="line">y = tf.placeholder(tf.float32,[None,10])</span><br><span class="line"></span><br><span class="line">#初始化权值</span><br><span class="line">def weight_variable(shape):</span><br><span class="line">initial = tf.truncated_normal(shape,stddev=0.1)#生成一个截断的正态分布</span><br><span class="line">return tf.Variable(initial)</span><br><span class="line"></span><br><span class="line">#初始化偏置</span><br><span class="line">def bias_variable(shape):</span><br><span class="line">initial = tf.constant(0.1,shape=shape)</span><br><span class="line">return tf.Variable(initial)</span><br><span class="line"></span><br><span class="line">#卷积层</span><br><span class="line">def conv2d(x,W):</span><br><span class="line">#x input tensor of shape `[batch, in_height, in_width, in_channels]`</span><br><span class="line">#W filter / kernel tensor of shape [filter_height, filter_width, in_channels, out_channels]</span><br><span class="line">#`strides[0] = strides[3] = 1`. strides[1]代表x方向的步长，strides[2]代表y方向的步长</span><br><span class="line">#padding: A `string` from: `&quot;SAME&quot;, &quot;VALID&quot;`</span><br><span class="line">return tf.nn.conv2d(x,W,strides=[1,1,1,1],padding=&apos;SAME&apos;)</span><br><span class="line"></span><br><span class="line">#池化层</span><br><span class="line">def max_pool_2x2(x):</span><br><span class="line">#ksize [1,x,y,1]</span><br><span class="line">return tf.nn.max_pool(x,ksize=[1,2,2,1],strides=[1,2,2,1],padding=&apos;SAME&apos;)</span><br><span class="line"></span><br><span class="line">#改变x的格式转为4D的格式[batch, in_height, in_width, in_channels]`</span><br><span class="line">x_image = tf.reshape(x,[-1,28,28,1])</span><br><span class="line"></span><br><span class="line">#初始化第一个卷积层的权值和偏置</span><br><span class="line">W_conv1 = weight_variable([5,5,1,32])#5*5的采样窗口，32个卷积核从1个平面抽取特征</span><br><span class="line">b_conv1 = bias_variable([32])#每一个卷积核一个偏置值</span><br><span class="line"></span><br><span class="line">#把x_image和权值向量进行卷积，再加上偏置值，然后应用于relu激活函数</span><br><span class="line">h_conv1 = tf.nn.relu(conv2d(x_image,W_conv1) + b_conv1)</span><br><span class="line">h_pool1 = max_pool_2x2(h_conv1)#进行max-pooling</span><br><span class="line"></span><br><span class="line">#初始化第二个卷积层的权值和偏置</span><br><span class="line">W_conv2 = weight_variable([5,5,32,64])#5*5的采样窗口，64个卷积核从32个平面抽取特征</span><br><span class="line">b_conv2 = bias_variable([64])#每一个卷积核一个偏置值</span><br><span class="line"></span><br><span class="line">#把h_pool1和权值向量进行卷积，再加上偏置值，然后应用于relu激活函数</span><br><span class="line">h_conv2 = tf.nn.relu(conv2d(h_pool1,W_conv2) + b_conv2)</span><br><span class="line">h_pool2 = max_pool_2x2(h_conv2)#进行max-pooling</span><br><span class="line"></span><br><span class="line">#28*28的图片第一次卷积后还是28*28，第一次池化后变为14*14</span><br><span class="line">#第二次卷积后为14*14，第二次池化后变为了7*7</span><br><span class="line">#进过上面操作后得到64张7*7的平面</span><br><span class="line"></span><br><span class="line">#初始化第一个全连接层的权值</span><br><span class="line">W_fc1 = weight_variable([7*7*64,1024])#上一层有7*7*64个神经元，全连接层有1024个神经元</span><br><span class="line">b_fc1 = bias_variable([1024])#1024个节点</span><br><span class="line"></span><br><span class="line">#把池化层2的输出扁平化为1维</span><br><span class="line">h_pool2_flat = tf.reshape(h_pool2,[-1,7*7*64])</span><br><span class="line">#求第一个全连接层的输出</span><br><span class="line">h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat,W_fc1) + b_fc1)</span><br><span class="line"></span><br><span class="line">#keep_prob用来表示神经元的输出概率</span><br><span class="line">keep_prob = tf.placeholder(tf.float32)</span><br><span class="line">h_fc1_drop = tf.nn.dropout(h_fc1,keep_prob)</span><br><span class="line"></span><br><span class="line">#初始化第二个全连接层</span><br><span class="line">W_fc2 = weight_variable([1024,10])</span><br><span class="line">b_fc2 = bias_variable([10])</span><br><span class="line"></span><br><span class="line">#计算输出</span><br><span class="line">prediction = tf.nn.softmax(tf.matmul(h_fc1_drop,W_fc2) + b_fc2)</span><br><span class="line"></span><br><span class="line">#交叉熵代价函数</span><br><span class="line">cross_entropy = tf.losses.softmax_cross_entropy(y,prediction)</span><br><span class="line">#使用AdamOptimizer进行优化</span><br><span class="line">train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)</span><br><span class="line">#结果存放在一个布尔列表中</span><br><span class="line">correct_prediction = tf.equal(tf.argmax(prediction,1),tf.argmax(y,1))#argmax返回一维张量中最大的值所在的位置</span><br><span class="line">#求准确率</span><br><span class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction,tf.float32))</span><br><span class="line"></span><br><span class="line">with tf.Session() as sess:</span><br><span class="line">sess.run(tf.global_variables_initializer())</span><br><span class="line">for epoch in range(21):</span><br><span class="line">for batch in range(n_batch):</span><br><span class="line">batch_xs,batch_ys = mnist.train.next_batch(batch_size)</span><br><span class="line">sess.run(train_step,feed_dict=&#123;x:batch_xs,y:batch_ys,keep_prob:0.7&#125;)</span><br><span class="line"></span><br><span class="line">acc = sess.run(accuracy,feed_dict=&#123;x:mnist.test.images,y:mnist.test.labels,keep_prob:1.0&#125;)</span><br><span class="line">print (&quot;Iter &quot; + str(epoch) + &quot;, Testing Accuracy= &quot; + str(acc))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/tensorflow.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="深度学习" scheme="http://frankblog.site/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://frankblog.site/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="tensorflow" scheme="http://frankblog.site/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基础（二）</title>
    <link href="http://frankblog.site/2018/05/30/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://frankblog.site/2018/05/30/机器学习基础（二）/</id>
    <published>2018-05-30T06:05:51.455Z</published>
    <updated>2018-06-04T06:24:49.520Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/ai%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.jpg" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">从IT时代走向DT时代</font></blockquote><hr><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"></script><h1 id="线性代数"><a href="#线性代数" class="headerlink" title="线性代数"></a>线性代数</h1><h2 id="1-数据类型比较"><a href="#1-数据类型比较" class="headerlink" title="1.数据类型比较"></a>1.数据类型比较</h2><p>Scalar: 标量，可以看成一个数<br>Vector: 向量，可以看成一个一维数组<br>Matrix: 矩阵，可以看成二维数组<br>Tensor: 张量，三维或三维以上的数组的统称，维度不定</p><h2 id="2-矩阵导数"><a href="#2-矩阵导数" class="headerlink" title="2.矩阵导数"></a>2.矩阵导数</h2><ul><li>分子、分母布局：<br>分子布局：分子为列向量，或者分母为行向量；<br>分母布局：分母为列向量，或者分子为行向量；</li><li>运算规则：<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%9F%A9%E9%98%B5%E5%88%86%E5%AD%90%E5%88%86%E6%AF%8D%E5%B8%83%E5%B1%80%E8%BF%90%E7%AE%97.png" alt=""></li><li>需要注意的规则：<br>以下公式默认在分子布局下的结果<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E8%A7%84%E5%88%99.png" alt="">；<img src="http://p4rlzrioq.bkt.clouddn.com/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E8%A7%84%E5%88%991.png" alt="">；<img src="http://p4rlzrioq.bkt.clouddn.com/%E7%9F%A9%E9%98%B5%E6%B1%82%E5%AF%BC%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E8%A7%84%E5%88%992.png" alt=""></li><li>常用公式<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%B8%B8%E8%A7%81%E6%B1%82%E5%AF%BC%E6%96%B9%E5%BC%8F.png" alt=""></li></ul><h2 id="3-张量（Tensor）"><a href="#3-张量（Tensor）" class="headerlink" title="3.张量（Tensor）"></a>3.<strong>张量（Tensor）</strong></h2><ul><li><p>几何代数中定义的张量是基于向量和矩阵的推广，通俗一点理解的话，我们可以将标量视为零阶张量，矢量视为一阶张量，那么矩阵就是二阶张量。<br>例如，可以将任意一张彩色图片表示成一个三阶张量，三个维度分别是图片的高度、宽度和色彩数据。将这张图用张量表示出来，就是最下方的那张表格：<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E4%B8%89%E9%98%B6%E5%BC%A0%E9%87%8F.jpg" alt=""></p></li><li><p>当然我们还可以将这一定义继续扩展，即：我们可以用四阶张量表示一个包含多张图片的数据集，这四个维度分别是：图片在数据集中的编号，图片高度、宽度，以及色彩数据。</p></li><li><p>张量在深度学习中是一个很重要的概念，因为它是一个深度学习框架中的一个核心组件，后续的所有运算和优化算法几乎都是基于张量进行的。</p></li></ul><h2 id="4-范数（Norm）"><a href="#4-范数（Norm）" class="headerlink" title="4.范数（Norm）"></a>4.<strong>范数（Norm）</strong></h2><p>有时我们需要衡量一个向量的大小。在机器学习中，我们经常使用被称为范数(norm) 的函数衡量矩阵大小。Lp 范数如下：</p><p>$$<br>Lp=\sqrt[p]{\sum\limits_{1}^n  x_i^p}，x=(x_1,x_2,\cdots,x_n)<br>$$<br>所以：<br>L1范数\(\left| \left| x \right| \right|\)：为x向量各个元素绝对值之和；<br>L2范数\(\left| \left| x \right| \right| _{2}\)： 为x向量各个元素平方和。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E8%8C%83%E6%95%B0.jpg" alt="link"></p><h2 id="5-特殊矩阵"><a href="#5-特殊矩阵" class="headerlink" title="5.特殊矩阵"></a>5.特殊矩阵</h2><p>对角矩阵<br>实对称矩阵及其性质：<br>（1）A的特征值为实数，且其特征向量为实向量<br>（2）A的不同特征值对应的特征向量必定正交<br>（3）A一定有n个线性无关的特征向量，从而A相似于对角矩阵<br>正交矩阵的性质： \(A^{-1}=A^{\top}\)</p><h2 id="6-奇异值分解（Singular-Value-Decomposition，SVD）"><a href="#6-奇异值分解（Singular-Value-Decomposition，SVD）" class="headerlink" title="6.奇异值分解（Singular Value Decomposition，SVD）"></a>6.<strong>奇异值分解（Singular Value Decomposition，SVD）</strong></h2><p>那就是只有对可对角化的矩阵才可以进行特征分解。但实际中很多矩阵往往不满足这一条件，甚至很多矩阵都不是方阵，就是说连矩阵行和列的数目都不相等。这时候怎么办呢？人们将矩阵的特征分解进行推广，得到了一种叫作“矩阵的奇异值分解”的方法，简称SVD。</p><p>$$A=UDV^{T} $$<br>假设A是一个<strong>m\(\times \)n</strong>矩阵，那么<strong>U是一个m\(\times \)m矩阵</strong>，<strong>D是一个m\(\times \)n矩阵</strong>，<strong>V是一个n\(\times \)n矩阵</strong>。</p><p>这些矩阵每一个都拥有特殊的结构，其中U和V都是正交矩阵，D是对角矩阵（注意，D不一定是方阵）。对角矩阵D对角线上的元素被称为矩阵A的奇异值。矩阵U的列向量被称为<strong>左奇异向量</strong>，矩阵V 的列向量被称<strong>右奇异向量</strong>。</p><p>SVD最有用的一个性质可能是拓展矩阵求逆到非方矩阵上。另外，SVD可用于推荐系统中。</p><h2 id="7-Moore-Penrose伪逆"><a href="#7-Moore-Penrose伪逆" class="headerlink" title="7.Moore-Penrose伪逆"></a>7.<strong>Moore-Penrose伪逆</strong></h2><p>对于非方矩阵而言，其逆矩阵没有定义。假设在下面问题中，我们想通过矩阵A的左逆B来求解线性方程：</p><p>\(Ax=y\)</p><p>等式两边同时左乘左逆B后，得到：</p><p>\(x=By\)</p><p>是否存在唯一的映射将A映射到B取决于问题的形式。</p><p>如果矩阵A的行数大于列数，那么上述方程可能没有解；如果矩阵A的行数小于列数，那么上述方程可能有多个解。</p><p>Moore-Penrose伪逆使我们能够解决这种情况，矩阵A的伪逆定义为：</p><p><img src="https://pic4.zhimg.com/80/v2-1581c66947da5c30172f4ef80dd0b70f_hd.jpg" alt=""></p><p>但是计算伪逆的实际算法没有基于这个式子，而是使用下面的公式：</p><p><img src="https://pic4.zhimg.com/80/v2-2845b623dc537e3bae0db22c4938e9c1_hd.jpg" alt=""></p><p>其中，矩阵U，D 和V 是矩阵A奇异值分解后得到的矩阵。对角矩阵D 的伪逆D+ 是其非零元素取倒之后再转置得到的。</p><h2 id="8-常见距离"><a href="#8-常见距离" class="headerlink" title="8.常见距离"></a>8.常见距离</h2><p>上面大致说过， 在机器学习里，我们的运算一般都是基于向量的，一条用户具有100个特征，那么他对应的就是一个100维的向量，通过计算两个用户对应向量之间的距离值大小，有时候能反映出这两个用户的相似程度。这在后面的KNN算法和K-means算法中很明显。</p><p>设有两个n维变量\(A=\left[ x_{11}, x_{12},…,x_{1n} \right]\)和\(A=\left[ x_{11}, x_{12},…,x_{1n} \right]\)，则一些常用的距离公式定义如下：</p><h3 id="曼哈顿距离"><a href="#曼哈顿距离" class="headerlink" title="曼哈顿距离"></a><strong>曼哈顿距离</strong></h3><ul><li>曼哈顿距离也称为城市街区距离，数学定义如下：</li></ul><p>$$<br>d_{12} =\sum_{k=1}^{n}{\left| x_{1k}-x_{2k} \right| }<br>$$</p><ul><li>曼哈顿距离的Python实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">print</span> sum(abs(vector1-vector2))</span><br></pre></td></tr></table></figure><h3 id="欧氏距离"><a href="#欧氏距离" class="headerlink" title="欧氏距离"></a><strong>欧氏距离</strong></h3><ul><li>欧氏距离其实就是L2范数，数学定义如下：</li></ul><p>$$d_{12} =\sqrt{\sum_{k=1}^{n}{\left( x_{1k} -x_{2k} \right) ^{2} } }$$</p><ul><li>欧氏距离的Python实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">print</span> sqrt((vector1-vector2)*(vector1-vector2).T)</span><br></pre></td></tr></table></figure><h3 id="闵可夫斯基距离"><a href="#闵可夫斯基距离" class="headerlink" title="闵可夫斯基距离"></a><strong>闵可夫斯基距离</strong></h3><ul><li>从严格意义上讲，闵可夫斯基距离不是一种距离，而是一组距离的定义：</li></ul><p>$$d_{12} =\sqrt[p]{\sum_{k=1}^{n}{\left( x_{1k} -x_{2k} \right) ^{p} } } $$</p><ul><li>实际上，当p=1时，就是曼哈顿距离；当p=2时，就是欧式距离。</li></ul><h3 id="切比雪夫距离"><a href="#切比雪夫距离" class="headerlink" title="切比雪夫距离"></a><strong>切比雪夫距离</strong></h3><ul><li>切比雪夫距离就是\(L_{\varpi}\)<br>即无穷范数，数学表达式如下：</li></ul><p>$$d_{12} =max\left( \left| x_{1k}-x_{2k} \right| \right)$$</p><ul><li>切比雪夫距离额Python实现如下：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">print</span> sqrt(abs(vector1-vector2).max)</span><br></pre></td></tr></table></figure><h3 id="夹角余弦"><a href="#夹角余弦" class="headerlink" title="夹角余弦"></a><strong>夹角余弦</strong></h3><ul><li><p>夹角余弦的取值范围为[-1,1]，可以用来衡量两个向量方向的差异；夹角余弦越大，表示两个向量的夹角越小；当两个向量的方向重合时，夹角余弦取最大值1；当两个向量的方向完全相反时，夹角余弦取最小值-1。</p></li><li><p>机器学习中用这一概念来衡量样本向量之间的差异，其数学表达式如下：</p></li></ul><p>$$cos\theta =\frac{AB}{\left| A \right| \left|B \right| } =\frac{\sum_{k=1}^{n}{x_{1k}x_{2k} } }{\sqrt{\sum_{k=1}^{n}{x_{1k}^{2} } } \sqrt{\sum_{k=1}^{n}{x_{2k}^{2} } } } $$</p><ul><li>夹角余弦的Python实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">vector1 = mat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">vector2 = mat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"><span class="keyword">print</span> dot(vector1,vector2)/(linalg.norm(vector1)*linalg.norm(vector2))</span><br></pre></td></tr></table></figure><h3 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a><strong>汉明距离</strong></h3><ul><li>汉明距离定义的是两个字符串中不相同位数的数目。<br>例如：字符串‘1111’与‘1001’之间的汉明距离为2。</li><li>信息编码中一般应使得编码间的汉明距离尽可能的小。</li><li>汉明距离的Python实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line">matV = mat([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line">smstr = nonzero(matV[<span class="number">0</span>]-matV[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> smstr</span><br></pre></td></tr></table></figure><h3 id="杰卡德相似系数"><a href="#杰卡德相似系数" class="headerlink" title="杰卡德相似系数"></a><strong>杰卡德相似系数</strong></h3><ul><li>两个集合A和B的交集元素在A和B的并集中所占的比例称为两个集合的杰卡德相似系数，用符号J(A,B)表示，数学表达式为：</li></ul><p>$$J\left( A,B \right) =\frac{\left| A\cap B\right| }{\left|A\cup B \right| } $$</p><ul><li>杰卡德相似系数是衡量两个集合的相似度的一种指标。一般可以将其用在衡量样本的相似度上。</li></ul><h3 id="杰卡德距离"><a href="#杰卡德距离" class="headerlink" title="杰卡德距离"></a><strong>杰卡德距离</strong></h3><ul><li>与杰卡德相似系数相反的概念是杰卡德距离，其定义式为：</li></ul><p>$$J_{\sigma} =1-J\left( A,B \right) =\frac{\left| A\cup B \right| -\left| A\cap B \right| }{\left| A\cup B \right| } $$</p><ul><li>杰卡德距离的Python实现：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> scipy.spatial.distance <span class="keyword">as</span> dist</span><br><span class="line">matV = mat([<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>])</span><br><span class="line"><span class="keyword">print</span> dist.pdist(matV,<span class="string">'jaccard'</span>)</span><br></pre></td></tr></table></figure><hr><h1 id="概率论和统计"><a href="#概率论和统计" class="headerlink" title="概率论和统计"></a>概率论和统计</h1><h2 id="1-统计量"><a href="#1-统计量" class="headerlink" title="1.统计量"></a>1.统计量</h2><h3 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h3><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%8D%8F%E6%96%B9%E5%B7%AE.png" alt=""><br><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%8D%8F%E6%96%B9%E5%B7%AE1.png" alt=""><br><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%8D%8F%E6%96%B9%E5%B7%AE2.png" alt=""></p><h3 id="Pearson相关系数"><a href="#Pearson相关系数" class="headerlink" title="Pearson相关系数"></a><strong>Pearson相关系数</strong></h3><p><img src="http://p4rlzrioq.bkt.clouddn.com/Pearson%E7%9B%B8%E5%85%B3%E7%B3%BB%E6%95%B0.png" alt=""></p><h3 id="协方差矩阵"><a href="#协方差矩阵" class="headerlink" title="协方差矩阵"></a><strong>协方差矩阵</strong></h3><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%8D%8F%E6%96%B9%E5%B7%AE%E7%9F%A9%E9%98%B5.png" alt=""></p><h2 id="2-独立与不相关"><a href="#2-独立与不相关" class="headerlink" title="2.独立与不相关"></a>2.<strong>独立与不相关</strong></h2><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%8B%AC%E7%AB%8B%E4%B8%8E%E4%B8%8D%E7%9B%B8%E5%85%B3.png" alt=""> </p><h2 id="3-贝叶斯公式"><a href="#3-贝叶斯公式" class="headerlink" title="3.贝叶斯公式"></a>3.<strong>贝叶斯公式</strong></h2><p>先看看什么是“先验概率”和“后验概率”，以一个例子来说明：</p><p>假设某种病在人群中的发病率是0.001，即1000人中大概会有1个人得病，则有： <strong>P(患病) = 0.1%</strong>；即：在没有做检验之前，我们预计的患病率为<strong>P(患病)=0.1%</strong>，这个就叫作<strong>“先验概率”</strong>。</p><p>再假设现在有一种该病的检测方法，其检测的准确率为<strong>95%</strong>；即：如果真的得了这种病，该检测法有<strong>95%</strong>的概率会检测出阳性，但也有<strong>5%</strong>的概率检测出阴性；或者反过来说，但如果没有得病，采用该方法有<strong>95%</strong>的概率检测出阴性，但也有<strong>5%</strong>的概率检测为阳性。用概率条件概率表示即为：<strong>P(显示阳性|患病)=95%</strong></p><p>现在我们想知道的是：在做完检测显示为阳性后，某人的患病率<strong>P(患病|显示阳性)</strong>，这个其实就称为<strong>“后验概率”。</strong></p><p>而这个叫贝叶斯的人其实就是为我们提供了一种可以<strong>利用先验概率计算后验概率</strong>的方法，我们将其称为<strong>“贝叶斯公式”。</strong></p><p>这里先了解<strong>条件概率公式</strong>：</p><p>$$P\left( B|A \right)=\frac{P\left( AB \right)}{P\left( A \right)} , P\left( A|B \right)=\frac{P\left( AB \right)}{P\left( B \right)}$$</p><p>由条件概率可以得到<strong>乘法公式</strong>：</p><p>$$P\left( AB \right)=P\left( B|A \right)P\left( A \right)=P\left( A|B \right)P\left( B \right)$$<br>将条件概率公式和乘法公式结合可以得到：</p><p>$$P\left( B|A \right)=\frac{P\left( A|B \right)\cdot P\left( B \right)}{P\left( A \right)}$$</p><p>再由<strong>全概率公式</strong>：</p><p>$$P\left( A \right)=\sum_{i=1}^{N}{P\left( A|B_{i} \right) \cdot P\left( B_{i}\right)} $$</p><p>代入可以得到<strong>贝叶斯公式</strong>：</p><p>$$P\left( B_{i}|A \right)=\frac{P\left( A|B_{i} \right)\cdot P\left( B_{i} \right)}{\sum_{i=1}^{N}{P\left( A|B_{i} \right) \cdot P\left( B_{i}\right)} }$$</p><h2 id="4-常见分布函数"><a href="#4-常见分布函数" class="headerlink" title="4.常见分布函数"></a>4.<strong>常见分布函数</strong></h2><h3 id="0-1分布"><a href="#0-1分布" class="headerlink" title="0-1分布"></a><strong>0-1分布</strong></h3><p>0-1分布是单个二值型离散随机变量的分布，其概率分布函数为：</p><p>$$P\left( X=1 \right) =p$$<br>$$P\left( X=0 \right) =1-p$$</p><h3 id="几何分布"><a href="#几何分布" class="headerlink" title="几何分布"></a><strong>几何分布</strong></h3><p>几何分布是离散型概率分布，其定义为：在n次伯努利试验中，试验k次才得到第一次成功的机率。即：前k-1次皆失败，第k次成功的概率。其概率分布函数为：</p><p>$$P\left( X=k \right) =\left( 1-p \right) ^{k-1} p$$</p><p>性质：<br>\(E\left( X \right) =\frac{1}{p}\)<br>\(Var\left( X \right) =\frac{1-p}{p^{2} }\)</p><h3 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a><strong>二项分布</strong></h3><p>二项分布即重复n次伯努利试验，各次试验之间都相互独立，并且每次试验中只有两种可能的结果，而且这两种结果发生与否相互对立。如果每次试验时，事件发生的概率为p，不发生的概率为1-p，则n次重复独立试验中发生k次的概率为：</p><p>$$P\left( X=k \right) =C_{n}^{k} p^{k} \left( 1-p \right) ^{n-k}$$</p><p>性质：<br>\(E\left( X \right) =np\)<br>\(Var\left( X \right) =np\left( 1-p \right)\)</p><h3 id="高斯分布"><a href="#高斯分布" class="headerlink" title="高斯分布"></a><strong>高斯分布</strong></h3><p>高斯分布又叫正态分布，其曲线呈钟型，两头低，中间高，左右对称因其曲线呈钟形，如下图所示：<br><img src="http://p4rlzrioq.bkt.clouddn.com/488px-Normal_Distribution_PDF.svg.png" alt=""></p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.png" alt=""></p><p>若随机变量X服从一个数学期望为\(\mu\)，方差为\(\sigma ^{2}\)的正态分布，则我们将其记为：\(N\left( \mu ,\sigma^{2} \right)\)决定了正态分布的位置，其标准差\(\sigma\)（方差的开方）决定了正态分布的幅度。</p><h3 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a><strong>指数分布</strong></h3><p>指数分布是事件的时间间隔的概率，它的一个重要特征是无记忆性。例如：如果某一元件的寿命的寿命为T，已知元件使用了t小时，它总共使用至少t+s小时的条件概率，与从开始使用时算起它使用至少s小时的概率相等。下面这些都属于指数分布：</p><ul><li>婴儿出生的时间间隔</li><li>网站访问的时间间隔</li><li>奶粉销售的时间间隔</li></ul><p>指数分布的公式可以从泊松分布推断出来。如果下一个婴儿要间隔时间t，就等同于t之内没有任何婴儿出生，即：</p><p>$$P\left( X\geq t \right) =P\left( N\left( t \right) =0 \right) =\frac{\left( \lambda t \right) ^{0}\cdot e^{-\lambda t} }{0!}=e^{-\lambda t} $$<br>则：</p><p>$$P\left( X\leq t \right) =1-P\left( X\geq t \right) =1-e^{-\lambda t}$$<br>如：接下来15分钟，会有婴儿出生的概率为：</p><p>$$P\left( X\leq \frac{1}{4} \right) =1-e^{-3\cdot \frac{1}{4} } \approx 0.53$$</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%8C%87%E6%95%B0%E5%88%86%E5%B8%83.jpg" alt=""></p><h3 id="泊松分布"><a href="#泊松分布" class="headerlink" title="泊松分布"></a><strong>泊松分布</strong></h3><p>日常生活中，大量事件是有固定频率的，比如：</p><ul><li>某医院平均每小时出生3个婴儿</li><li>某网站平均每分钟有2次访问</li><li>某超市平均每小时销售4包奶粉</li></ul><p>它们的特点就是，我们可以预估这些事件的总数，但是没法知道具体的发生时间。已知平均每小时出生3个婴儿，请问下一个小时，会出生几个？有可能一下子出生6个，也有可能一个都不出生，这是我们没法知道的。</p><p><strong>泊松分布就是描述某段时间内，事件具体的发生概率。</strong>其概率函数为：</p><p>$$P\left( N\left( t \right) =n \right) =\frac{\left( \lambda t \right) ^{n}e^{-\lambda t} }{n!} $$<br>其中：</p><p>P表示概率，N表示某种函数关系，t表示时间，n表示数量，1小时内出生3个婴儿的概率，就表示为 P(N(1) = 3) ；λ 表示事件的频率。</p><p>还是以上面医院平均每小时出生3个婴儿为例，则\(\lambda =3\)；</p><p>那么，接下来两个小时，一个婴儿都不出生的概率可以求得为：</p><p>$$P\left( N\left(2 \right) =0 \right) =\frac{\left( 3\cdot 2 \right) ^{o} \cdot e^{-3\cdot 2} }{0!} \approx 0.0025$$<br>同理，我们可以求接下来一个小时，至少出生两个婴儿的概率：</p><p>$$P\left( N\left( 1 \right) \geq 2 \right) =1-P\left( N\left( 1 \right)=0 \right) - P\left( N\left( 1 \right)=1 \right)\approx 0.8$$</p><h2 id="5-常见的分布总结"><a href="#5-常见的分布总结" class="headerlink" title="5.常见的分布总结"></a>5.常见的分布总结</h2><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%B8%B8%E8%A7%81%E5%88%86%E5%B8%83.jpg" alt="常见分布"></p><h2 id="6-极大似然估计（MLE）"><a href="#6-极大似然估计（MLE）" class="headerlink" title="6.极大似然估计（MLE）"></a>6.极大似然估计（MLE）</h2><p>极大似然估计是建立在这样的思想上：已知某个参数能使这个样本出现的概率最大，我们当然不会再去选择其他小概率的样本，所以干脆就把这个参数作为估计的真实值。</p><p>求极大似然函数估计值的一般步骤：</p><p>（1） 写出似然函数，即每个随机实验出现概率相乘，为这个抽样出现的概率。<br>（2） 对似然函数取对数，为了方便求导；<br>（3） 对参数求导数。<br>（4） 令导数=0，即求解极值，由实际情况知，该极值为极大值。解似然方程。</p><hr><h1 id="微积分"><a href="#微积分" class="headerlink" title="微积分"></a>微积分</h1><h2 id="1-导数与梯度"><a href="#1-导数与梯度" class="headerlink" title="1.导数与梯度"></a>1.导数与梯度</h2><ul><li><strong>导数</strong>：一个一元函数函数在某一点的导数描述了这个函数在这一点附近的变化率。</li><li><strong>梯度</strong>:多元函数的导数就是梯度。<ul><li>一阶导数，即梯度（gradient）</li><li>二阶导数，Hessian矩阵</li></ul></li></ul><h2 id="2-泰勒展开"><a href="#2-泰勒展开" class="headerlink" title="2.泰勒展开"></a>2.<strong>泰勒展开</strong></h2><ul><li>一元函数的泰勒展开：<br><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d0070da6cb78cda75d9ff9521f85702c97862673" alt="link"></li><li>基尼指数的图像、熵、分类误差率三者之间的关系。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%B3%B0%E5%8B%92%E5%B1%95%E5%BC%80.jpg" alt="link"></li></ul><h2 id="3-Lagrange乘子法"><a href="#3-Lagrange乘子法" class="headerlink" title="3.Lagrange乘子法"></a>3.<strong>Lagrange乘子法</strong></h2><p>对于一般的求极值问题我们都知道，求导等于0就可以了。但是如果我们不但要求极值，还要求一个满足一定约束条件的极值，那么此时就可以构造Lagrange函数，其实就是<strong>把约束项添加到原函数上，然后对构造的新函数求导</strong>。</p><p>对于一个要求极值的函数\(f\left( x,y \right)\)，图上的蓝圈就是这个函数的等高图，就是说 \(f\left( x,y \right) =c_{1} ,c_{2} ,…,c_{n}\)分别代表不同的数值(每个值代表一圈，等高图)，我要找到一组\(\left( x,y \right)\)，使它的\(c_{i}\)值越大越好，但是这点必须满足约束条件\(g\left( x,y \right)\)（在黄线上）。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%8B%89%E6%A0%BC%E6%9C%97%E6%97%A5%E4%B9%98%E6%95%B0.jpg" alt=""></p><p>也就是说\(f(x,y)\)相切，或者说它们的梯度▽ \({f}\)和▽\({g}\)平行，因此它们的梯度（偏导）成倍数关系；那我么就假设为\(\lambda\)倍，然后把约束条件加到原函数后再对它求导，其实就等于满足了下图上的式子。</p><p>在<strong>支持向量机模型（SVM）</strong>的推导中一步很关键的就是利用拉格朗日对偶性将原问题转化为对偶问题。</p><hr><h1 id="信息论"><a href="#信息论" class="headerlink" title="信息论"></a>信息论</h1><h2 id="1-信息熵"><a href="#1-信息熵" class="headerlink" title="1.信息熵"></a>1.<strong>信息熵</strong></h2><p><img src="https://upload-images.jianshu.io/upload_images/1724098-82f593d6f36318a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/260" alt="link"><br>熵是随机变量不确定性的度量，不确定性越大，熵值越大；</p><ul><li>若随机变量退化为定值，则熵最小，为0；</li><li>若随机分布为均匀分布，熵最大。</li></ul><p>信息熵可以作为概率分布集散程度的度量，使用熵的近似可以推导出gini系数，在统计问题、决策树等问题中有重要应用</p><h2 id="2-相对熵-交叉熵-K-L散度"><a href="#2-相对熵-交叉熵-K-L散度" class="headerlink" title="2.相对熵/交叉熵/K-L散度"></a>2.<strong>相对熵/交叉熵/K-L散度</strong></h2><ul><li><p>交叉熵<br>交叉熵考察的是两个的信息（分布）的期望<br>交叉熵和熵，相当于，协方差和方差</p></li><li><p>相对熵<br>相对熵考察两个信息（分布）之间的<strong>不相似性</strong><br><strong>所谓相对，自然在两个随机变量之间。又称互熵，Kullback–Leibler divergence（K-L 散度）等。设p(x)和q(x)是X取值的两个概率分布，则p对q的相对熵为</strong></p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1724098-ff4b6a2250268993.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/250" alt="link"></p><p>在一定程度上，<strong>熵可以度量两个随机变量的距离</strong>。KL 散度是两个概率分布 P 和 Q 差别的<strong>非对称性的度量</strong>。KL 散度是用来度量使用基于 Q 的编码来编码来自 P 的样本平均所需的额外的位元数。</p><p>典型情况下，<strong>P 表示数据的真实分布</strong>，Q 表示数据的<strong>理论分布</strong>，模型分布，或 P 的近似分布。</p><p>用图像形象化的表示二者之间的关系可以如下图：<br><img src="http://colah.github.io/posts/2015-09-Visual-Information/img/CrossEntropyQP.png" alt="这里写图片描述"><br>上面是q所含的信息量/平均编码长度[Math Processing Error]H(p)<br>第二行是cross-entropy，即用q来编码p所含的信息量/平均编码长度|或者称之为q对p的cross-entropy<br>第三行是上面两者之间的差值即为q对p的KL距离</p><p>个人理解是KL距离是对于同一个随机事件的不同分布度量之间的距离，所以是1.<strong>同一随机事件<em>*2.</em></strong>不同分布*</p><h2 id="3-互信息（信息增益）"><a href="#3-互信息（信息增益）" class="headerlink" title="3.互信息（信息增益）"></a>3.<strong>互信息（信息增益）</strong></h2><p>互信息就是一个联合分布中的两个信息的纠缠程度/或者叫相互影响那部分的信息量。<br><strong>决策树中的信息增益就是互信息</strong>，决策树是采用的上面第二种计算方法，即把分类的不同结果看成不同随机事件Y，然后把当前选择的特征看成X，则信息增益就是当前Y的信息熵减去已知X情况下的信息熵。</p><p><img src="https://images2015.cnblogs.com/blog/731104/201606/731104-20160614091107276-500441635.png" alt=""></p><p>可以通过简单的计算得到：</p><p>H(X|Y) = H(X) - I(X, Y), </p><p>互信息为0，则随机变量X和Y是互相独立的。</p><p><img src="http://colah.github.io/posts/2015-09-Visual-Information/img/Hxy-info.png" alt=""></p><h2 id="信息论与机器学习的关系"><a href="#信息论与机器学习的关系" class="headerlink" title="信息论与机器学习的关系"></a>信息论与机器学习的关系</h2><table><thead><tr><th>信息论视角</th><th>机器学习视角</th></tr></thead><tbody><tr><td>接受信号</td><td>特征</td></tr><tr><td>信源</td><td>标签</td></tr><tr><td>平均互信息</td><td>特征有效性分析</td></tr><tr><td>最大熵模型</td><td>极大似然法</td></tr><tr><td>交叉熵</td><td>逻辑回归损失函数</td></tr></tbody></table><h2 id="最大熵模型"><a href="#最大熵模型" class="headerlink" title="最大熵模型"></a><strong>最大熵模型</strong></h2><p>最大熵模型的原则：</p><ul><li>承认已知事物（知识）；</li><li>对未知事物不做任何假设，没有任何偏见。</li></ul><p>对一个随机事件的概率分布进行预测时，我们的预测应当满足全部已知条件，而对未知的情况不要做任何主观假设。在这种情况下，概率分布最均匀，预测的风险最小。</p><p>因为这时概率分布的信息熵最大，所以人们把这种模型叫做“最大熵模型”（Maximum Entropy）。</p><p>Logistic回归是统计学习中的经典分类方法，可以用于二类分类也可以用于多类分类。</p><p>最大熵模型由最大熵原理推导出来，最大熵原理是概率模型学习或估计的一个准则，最大熵原理认为在所有可能的概率模型的集合中，熵最大的模型是最好的模型，最大熵模型也可以用于二类分类和多类分类。</p><p>Logistic回归模型与最大熵模型都属于对数线性模型。</p><p>逻辑回归跟最大熵模型<strong>没有本质区别</strong>。逻辑回归是最大熵对应类别为<strong>二类</strong>时的特殊情况</p><p><strong>指数簇分布的最大熵</strong>等价于其<strong>指数形式的最大似然</strong>。</p><p><strong>二项式</strong>分布的最大熵解等价于二项式指数形式(<strong>sigmoid</strong>)的最大似然；<br><strong>多项式</strong>分布的最大熵等价于多项式分布指数形式(<strong>softmax</strong>)的最大似然。</p><h2 id="熵总结"><a href="#熵总结" class="headerlink" title="熵总结"></a>熵总结</h2><ul><li><strong>熵：不确定性的度量；</strong></li><li><strong>似然：与知识的吻合程度；</strong></li><li><strong>最大熵模型：对不确定度的无偏分配；</strong></li><li><strong>最大似然估计：对知识的无偏理解。</strong></li></ul><h2 id="2-上溢和下溢"><a href="#2-上溢和下溢" class="headerlink" title="2.上溢和下溢"></a>2.<strong>上溢和下溢</strong></h2><p>在数字计算机上实现连续数学的基本困难是：我们需要通过有限数量的位模式来表示无限多的实数，这意味着我们在计算机中表示实数时几乎都会引入一些近似误差。在许多情况下，这仅仅是舍入误差。如果在理论上可行的算法没有被设计为最小化舍入误差的累积，可能会在实践中失效，因此舍入误差是有问题的，特别是在某些操作复合时。</p><p>一种特别毁灭性的舍入误差是<strong>下溢</strong>。当接近零的数被四舍五入为零时发生下溢。许多函数会在其参数为零而不是一个很小的正数时才会表现出质的不同。例如，我们通常要避免被零除<strong>。</strong></p><p>另一个极具破坏力的数值错误形式是<strong>上溢(overflow)</strong>。当大量级的数被近似为\(\varpi\)时发生上溢。进一步的运算通常将这些无限值变为非数字。</p><p>必须对上溢和下溢进行数值稳定的一个例子是<strong>softmax 函数</strong>。softmax 函数经常用于预测与multinoulli分布相关联的概率，定义为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E4%B8%8A%E6%BA%A2%E5%92%8C%E4%B8%8B%E6%BA%A2.jpg" alt=""></p><p>softmax 函数在多分类问题中非常常见。这个函数的作用就是使得在负无穷到0的区间趋向于0，在0到正无穷的区间趋向于1。上面表达式其实是多分类问题中计算某个样本 \(x_{i}\) 的类别标签 \(y_{i}\)属于K个类别的概率，最后判别 \(y_{i}\)所属类别时就是将其归为对应概率最大的那一个。</p><p>当式中的\(w_{k} x_{i} +b\)都是很小的负数时，\(e^{w_{k} x_{i} +b }\)就会发生下溢，这意味着上面函数的分母会变成0，导致结果是未定的；同理，当式中的\(x_{w_{k} x_{i} +b}\)是很大的正数时，\(e^{w_{k} x_{i} +b }\)就会发生上溢导致结果是未定的。</p><hr><h1 id="凸优化"><a href="#凸优化" class="headerlink" title="凸优化"></a><strong>凸优化</strong></h1><h2 id="1-凸集-Convex-Sets"><a href="#1-凸集-Convex-Sets" class="headerlink" title="1.凸集(Convex Sets)"></a>1.凸集(Convex Sets)</h2><p>集合C是凸的，如果对于所有的\(x,y\in C\)和\(\theta\in\mathbb{R},0\leq\theta\leq 1\)有：<br>$$\theta x+(1-\theta)y\in C$$<br>可以这样理解：在集合C中任选两点，在这两点的连线上的所有点都属于集合C。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%87%B8%E9%9B%86.jpg" alt=""></p><h2 id="2-凸函数-Convex-Fuctions"><a href="#2-凸函数-Convex-Fuctions" class="headerlink" title="2.凸函数(Convex Fuctions)"></a>2.凸函数(Convex Fuctions)</h2><p>如果函数的定义域\({\cal D}(f)\)是一个凸集，并且对于所有的\(x,y\in {\cal D}(f)\)和\(\theta\in\mathbb{R},0\leq\theta\leq1\)，都有：<br>\(f(\theta x+(1-\theta)y)\leq\theta f(x)+(1-\theta)f(y)\)<br><img src="http://oddpnmpll.bkt.clouddn.com/2016-10-05-01%3A23%3A27.jpg" alt=""></p><h3 id="凸函数的一阶条件"><a href="#凸函数的一阶条件" class="headerlink" title="凸函数的一阶条件"></a>凸函数的一阶条件</h3><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%87%B8%E5%87%BD%E6%95%B0%E7%9A%84%E4%B8%80%E9%98%B6%E6%9D%A1%E4%BB%B6.png" alt=""><br>直观上可以这样理解，在函数上随便挑一个点，该点的切线必然在函数的下方<br><img src="http://oddpnmpll.bkt.clouddn.com/2016-10-05-01%3A27%3A53.jpg" alt=""></p><h3 id="凸性质的二阶条件"><a href="#凸性质的二阶条件" class="headerlink" title="凸性质的二阶条件"></a>凸性质的二阶条件</h3><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%87%B8%E5%87%BD%E6%95%B0%E7%9A%84%E4%BA%8C%E9%98%B6%E6%9D%A1%E4%BB%B6.png" alt=""></p><h3 id="琴生不等式-Jensen’s-Inequality"><a href="#琴生不等式-Jensen’s-Inequality" class="headerlink" title="琴生不等式(Jensen’s Inequality)"></a>琴生不等式(Jensen’s Inequality)</h3><p>假设凸函数的基本定义为:<br>\(f(\theta x+(1-\theta)y)\leq\theta f(x)+(1-\theta)f(y)\ \ \ \text{for} \ \ \ 0\leq\theta\leq1\)<br>上述等式可以扩展到多个点:<br>\(f\left(\sum_{i=1}^k\theta_ix_i\right)\leq\sum_{i=1}^k\theta_if(x_i)\ \ \ \text{for}\ \ \ \sum_{i=1}^k\theta_i=1,\theta_i\geq0 \ \ \forall i\)<br>再将上述等式扩展到积分形式:<br>\(f\left(\int p(x)xdx\right)\leq\int p(x)f(x)dx\ \ \ \text{for}\ \ \ \int p(x)dx=1,p(x)\leq0\ \ \forall x\)<br>由于\(p(x)\)积分为1，我们可以把\(p(x)\)看作是一个概率密度函数，所以尚属等式可以用以下形式表达：<br>\(f(\mathbb{E}[x])\leq\mathbb{E}[f(x)]\)<br>最后一条等式就是著名的<strong>琴生不等式</strong>。</p><h2 id="3-凸优化问题-Convex-Optimization-Problems"><a href="#3-凸优化问题-Convex-Optimization-Problems" class="headerlink" title="3.凸优化问题(Convex Optimization Problems)"></a>3.凸优化问题(Convex Optimization Problems)</h2><p>在凸优化问题中，一个最关键的点就是<strong>对于一个凸优化问题，所有的局部最优解(locally optimal)都是全局最优解(globally optimal)</strong>。<br>最优化的基本数学模型如下：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%87%B8%E4%BC%98%E5%8C%96%E9%97%AE%E9%A2%98.jpg" alt=""><br>它有三个基本要素，即：</p><ul><li>设计变量：x是一个实数域范围内的n维向量，被称为决策变量或问题的解；</li><li>目标函数：f(x)为目标函数；</li><li>约束条件：\(h_{i} \left( x \right) =0\)称为等式约束，\(g_{i} \left( x \right) \leq 0\)为不等式约束，\(i=0,1,2,……\)</li></ul><h2 id="4-牛顿法"><a href="#4-牛顿法" class="headerlink" title="4.牛顿法"></a>4.牛顿法</h2><h3 id="牛顿法介绍"><a href="#牛顿法介绍" class="headerlink" title="牛顿法介绍"></a><strong>牛顿法介绍</strong></h3><p><strong>牛顿法</strong>也是求解<strong>无约束最优化</strong>问题常用的方法，<strong>最大的优点是收敛速度快</strong>。</p><p>从本质上去看，<strong>牛顿法是二阶收敛，梯度下降是一阶收敛，所以牛顿法就更快</strong>。<strong>通俗地说</strong>，比如你想找一条最短的路径走到一个盆地的最底部，梯度下降法 每次只从你当前所处位置选一个坡度最大的方向走一步，牛顿法在选择方向时，不仅会考虑坡度是否够大，还会考虑你走了一步之后，坡度是否会变得更大。所以， 可以说牛顿法比梯度下降法看得更远一点，能更快地走到最底部。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%89%9B%E9%A1%BF%E6%B3%95.jpg" alt=""></p><p>或者从几何上说，<strong>牛顿法就是用一个二次曲面去拟合你当前所处位置的局部曲面，而梯度下降法是用一个平面去拟合当前的局部曲面</strong>，通常情况下，二次曲面的拟合会比平面更好，所以牛顿法选择的下降路径会更符合真实的最优下降路径。</p><h3 id="牛顿法的推导"><a href="#牛顿法的推导" class="headerlink" title="牛顿法的推导"></a><strong>牛顿法的推导</strong></h3><p>将目标函数\(f\left( x \right)\) 在\(x_{k}\)处进行二阶泰勒展开，可得：</p><p>$$f\left( x \right) =f\left( x_{k} \right) +f^{‘} \left( x_{k} \right) \left( x-x_{k} \right) +\frac{1}{2} f^{‘’}\left( x_{k} \right) \left( x-x_{k} \right) ^{2}$$<br>因为目标函数\(f\left( x \right)\)有极值的必要条件是在极值点处一阶导数为0，即：\(f^{‘} \left( x \right) =0\)</p><p>所以对上面的展开式两边同时求导（注意\({x}\)才是变量，\(x_{k}\)是常量\(\Rightarrow f^{‘} \left( x_{k} \right) ,f^{‘’} \left( x_{k} \right)\)都是常量），并令\(f^{‘} \left( x \right) =0\)可得：</p><p>$$f^{‘} \left( x_{k} \right) +f^{‘’} \left( x_{k} \right) \left( x-x_{k} \right) =0$$<br>即：</p><p>$$x=x_{k} -\frac{f^{‘} \left( x_{k} \right) }{f^{‘’} \left( x_{k} \right) } $$</p><p>于是可以构造如下的迭代公式：</p><p>$$x_{k+1} =x_{k} -\frac{f^{‘} \left( x_{k} \right) }{f^{‘’} \left( x_{k} \right) }$$</p><p>这样，我们就可以利用该迭代式依次产生的序列逐渐逼近\(f\left( x \right)\)的极小值点了。</p><p>牛顿法的迭代示意图如下：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%89%9B%E9%A1%BF%E6%B3%95%E7%9A%84%E8%BF%AD%E4%BB%A3%E7%A4%BA%E6%84%8F%E5%9B%BE%E5%A6%82%E4%B8%8B.jpg" alt=""></p><p>上面讨论的是2维情况，<strong>高维情况</strong>的牛顿迭代公式是：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%AB%98%E7%BB%B4%E6%83%85%E5%86%B5%E7%9A%84%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E5%85%AC%E5%BC%8F.jpg" alt=""></p><p>式中， ▽\({f}\)是\(f\left( x \right)\)的梯度，即：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%89%9B%E9%A1%BF%E6%B3%953.jpg" alt=""></p><p>H是Hessen矩阵，即：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/Hessen%E7%9F%A9%E9%98%B5.jpg" alt=""></p><h3 id="牛顿法的过程"><a href="#牛顿法的过程" class="headerlink" title="牛顿法的过程"></a><strong>牛顿法的过程</strong></h3><ul><li>1、给定初值\(x_{0} ]\)和精度阈值\(\varepsilon\)，并令\(k=0\)；</li><li>2、计算\(x_{k}\)和\(H_{k}\)；</li><li>3、若\(\left| \left| g_{k} \right| \right| &lt;\varepsilon\)则停止迭代；否则确定搜索方向：\(d_{k} =-H_{k}^{-1} \cdot g_{k}\)；</li><li>4、计算新的迭代点：\(x_{k+1} =x_{k} +d_{k}\)；</li><li>5、令\(k=k+1\)，转至2。</li></ul><h2 id="5-阻尼牛顿法"><a href="#5-阻尼牛顿法" class="headerlink" title="5.阻尼牛顿法"></a>5.<strong>阻尼牛顿法</strong></h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a><strong>引入</strong></h3><p>注意到，牛顿法的迭代公式中没有步长因子，是定步长迭代。对于非二次型目标函数，有时候会出现\(f\left( x_{k+1} \right) &gt;f\left( x_{k} \right)\)的情况，这表明，原始牛顿法不能保证函数值稳定的下降。在严重的情况下甚至会造成序列发散而导致计算失败。</p><p>为消除这一弊病，人们又提出阻尼牛顿法。阻尼牛顿法每次迭代的方向仍然是\(x_{k}\)，但每次迭代会沿此方向做一维搜索，寻求最优的步长因子\(\lambda _{k}\)，即：</p><p>\(\lambda <em>{k} = minf\left( x</em>{k} +\lambda d_{k} \right)\)</p><h3 id="算法过程"><a href="#算法过程" class="headerlink" title="算法过程"></a><strong>算法过程</strong></h3><ul><li>1、给定初值\(x_{0}\)和精度阈值\(\varepsilon\)，并令\(k=0\)；</li><li>2、计算\(g_{k}\)（\(f\left( x \right)\)在\(x_{k}\)处的梯度值）和\(H_{k}\)；</li><li>3、若\(\left| \left| g_{k} \right| \right| &lt;\varepsilon\)则停止迭代；否则确定搜索方向：\(d_{k} =-H_{k}^{-1} \cdot g_{k}\)；</li><li>4、利用\(d_{k} =-H_{k}^{-1} \cdot g_{k}\)得到步长\(\lambda <em>{k}\)，并令\(x</em>{k+1} =x_{k} +\lambda <em>{k} d</em>{k}\)</li><li>5、令\(k=k+1\)，转至2。</li></ul><h2 id="6-拟牛顿法"><a href="#6-拟牛顿法" class="headerlink" title="6.拟牛顿法"></a>6.<strong>拟牛顿法</strong></h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a><strong>概述</strong></h3><p>由于<strong>牛顿法</strong>每一步都要求解目标函数的<strong>Hessen矩阵的逆矩阵</strong>，<strong>计算量比较大</strong>（求矩阵的逆运算量比较大），因此提出一种<strong>改进方法</strong>，即<strong>通过正定矩阵近似代替Hessen矩阵的逆矩阵，简化这一计算过程</strong>，改进后的方法称为<strong>拟牛顿法</strong>。</p><h3 id="拟牛顿法的推导"><a href="#拟牛顿法的推导" class="headerlink" title="拟牛顿法的推导"></a><strong>拟牛顿法的推导</strong></h3><p>先将目标函数在\(x_{k+1}\)处展开，得到：</p><p>$$f\left( x \right) =f\left( x_{k+1} \right) +f^{‘} \left( x_{k+1} \right) \left( x-x_{k+1} \right) +\frac{1}{2} f^{‘’}\left( x_{k+1} \right) \left( x-x_{k+1} \right) ^{2}$$<br>两边同时取梯度，得：</p><p>$$f^{‘}\left( x \right) = f^{‘} \left( x_{k+1} \right) +f^{‘’} \left( x_{k+1} \right) \left( x-x_{k+1} \right)$$</p><p>取上式中的\(x=x_{k}\)，得：</p><p>$$f^{‘}\left( x_{k} \right) = f^{‘} \left( x_{k+1} \right) +f^{‘’} \left( x_{k+1} \right) \left( x-x_{k+1} \right)$$</p><p>即：</p><p>$$g_{k+1} -g_{k} =H_{k+1} \cdot \left( x_{k+1} -x_{k} \right)$$<br>可得：</p><p>$$H_{k}^{-1} \cdot \left( g_{k+1} -g_{k} \right) =x_{k+1} -x_{k}$$</p><p>上面这个式子称为<strong>“拟牛顿条件”</strong>，由它来对Hessen矩阵做约束。</p><hr><h1 id="计算复杂性与NP问题"><a href="#计算复杂性与NP问题" class="headerlink" title="计算复杂性与NP问题"></a><strong>计算复杂性与NP问题</strong></h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>表明问题规模扩大后，程序需要的时间长度增长得有多快。程序的时间复杂度一般可以分为两种级别：</p><ul><li>多项式级的复杂度，如O(1)，O(log(n))、O（n^a）等，</li><li>非多项式级的，如O(a^n)、O(n!)等。后者的复杂度计算机往往不能承受。</li></ul><h2 id="约化-Reducibility"><a href="#约化-Reducibility" class="headerlink" title="约化(Reducibility)"></a>约化(Reducibility)</h2><p>简单的说，一个问题A可以约化为问题B的含义是，可以用问题B的解法解决问题A。（个人感觉也就是说，问题A是B的一种特殊情况。）标准化的定义是，如果能找到一个变化法则，对任意一个A程序的输入，都能按照这个法则变换成B程序的输入，使两程序的输出相同，那么我们说，问题A可以约化为问题B。</p><p>例如求解一元一次方程这个问题可以约化为求解一元二次方程，即可以令对应项系数不变，二次项的系数为0，将A的问题的输入参数带入到B问题的求解程序去求解。</p><p>另外，约化还具有传递性，A可以化约为B，B可以约化为C，那么A也可以约化为C。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="P-Problem"><a href="#P-Problem" class="headerlink" title="P Problem"></a>P Problem</h3><p>假设有 n 个数要排序。一个初级的冒泡排序算法所需时间可能与 n2 成正比，快一点的算法所需时间与 nlog（n） 成正比。在某些条件下，桶排序算法所需时间甚至只和 n 成正比。最不实用的算法就是输入的数字随机排列，直到出现完全有序的情况为止……记前三个算法的时间复杂度分别记为 O(n2)、O(nlogn) 和 O(n)，最后的<a href="http://zh.wikipedia.org/wiki/Bogo%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">“猴子排序”(Bogosort)算法</a>平均时间复杂度则达到了 O(n*n!)。</p><p>在上面的例子中，前三种算法的复杂度是 n 的多项式函数；最后一种算法的复杂度是 n 的阶乘，根据斯特林公式，n! 相当于指数级别的增长。当 n 特别小时，多项式级的算法已经快过指数级的算法。当 n 非常大时，人类根本看不到指数级复杂度算法结束的那天。自然的，大家会对多项式级别的算法抱有好感，希望对每一个问题都能找到多项式级别的算法。问题是——每个问题都能找到想要的多项式级别的算法吗？</p><p>在一个由问题构成的集合中，如果每个问题都存在多项式级复杂度的算法，这个集合就是 P 类问题（Polynomial）。</p><h3 id="NP-Nondeterministic-Polynomial-问题"><a href="#NP-Nondeterministic-Polynomial-问题" class="headerlink" title="NP (Nondeterministic Polynomial)问题"></a>NP (Nondeterministic Polynomial)问题</h3><p>NP 类问题指的是，能在多项式时间内<strong>检验</strong>一个解是否正确的问题。比如我的机器上存有一个密码文件，于是就能在多项式时间内验证另一个字符串文件是否等于这个密码，所以“破译密码”是一个 NP 类问题。NP 类问题也等价为能在多项式时间内<strong>猜出</strong>一个解的问题。这里的“猜”指的是如果有解，那每次都能在很多种可能的选择中运气极佳地选择正确的一步。</p><p>不妨举个例子：给出 n 个城市和两两之间的距离，求找到一个行走方案，使得到达每个城市一次的总路程最短。我们可以这样来“猜测”它的解：先求一个总路程不超过 100 的方案，假设我们可以依靠极好的运气“猜出”一个行走路线，使得总长度确实不超过 100，那么我们只需要每次猜一条路一共猜 n 次。接下来我们再找总长度不超过 50 的方案，找不到就将阈值提高到75…… 假设最后找到了总长度为 90 的方案，而找不到总长度小于 90 的方案。我们最终便在多项式时间内“猜”到了这个旅行商问题的解是一个长度为 90 的路线。它是一个 NP 类的问题。</p><p>也就是说，NP 问题能在多项式时间内“解决”，只不过需要好运气。显然，P 类问题肯定属于 NP 类问题。所谓“P=NP”，就是问——是不是所有的 NP 问题，都能找到多项式时间的确定性算法？</p><h3 id="NPC-Problem"><a href="#NPC-Problem" class="headerlink" title="NPC Problem"></a>NPC Problem</h3><p>在与数不尽的问题搏斗的过程中，人们有时候会发现，解决问题 A 的算法可以同时用来解决问题 B。例如问题 A 是对学生的姓名与所属班级同时排序，问题 B 是对人们按照姓名做排序。这时候，我们只需要让班级全都相同，便能照搬问题 A 的算法来解决问题 B。这种情况下，数学家就说，问题 B 能归约为问题 A。</p><p>人们发现，不同的 NP 问题之间也会出现可归约的关系，甚至存在这么一类（不只是一个）问题，使得任何其它的 NP 问题都能归约到它们上。也就是说，能够解决它们的算法就能够解决所有其它的 NP 问题。这一类问题就是 NPC 问题。这样的问题人们已经找到了几千个，如果我们给其中任何一个找到了多项式级别的算法，就相当于证明了 P=NP。</p><p>但NPC问题目前没有多项式的有效算法，只能用指数级甚至阶乘级复杂度的搜索。</p><h3 id="P-NP？"><a href="#P-NP？" class="headerlink" title="P=NP？"></a>P=NP？</h3><p>证明 P=NP 的一个主要方法就是，给某一个 NPC 问题找到一个快速算法。但是，也不排除有人给出一个“存在性”而非“构造性”的证明，只是告诉大家存在符合要求的算法，但没法详细描述出来。如果 P=NP 被人以这种方式证明出来了，我们也没法依葫芦画瓢地把这个神奇的算法在电脑上写出来，所以对破解密码仍然没有帮助。</p><p>退一步说，假如有人构造出可以运用的多项式算法，以此证明了这个问题。这个算法恐怕也很复杂（毕竟这么难找），它的多项式级别的复杂度也可能会非常慢。假设这个算法的复杂度达到了 O(n10)，那我们依然面临着不小的麻烦。即使 n=100，运算时间也会增长到非常巨大的地步。</p><p>再退一步，假设人类的运气好到 P=NP 是真的，并且找到了复杂度不超过 O(n3) 的算法。如果到了这一步，我们就会有一个算法，能够很快算出某个帐号的密码。《基本演绎法》里面所想象的可能就要成真了，所有的加密系统都会失去效果——应该说，所有会把密码变成数字信息的系统都会失去效果，因为这个数字串很容易被“金钥匙”计算出来。</p><p>除此之外，我们需要担心或期许的事情还有很多：</p><ul><li>一大批耳熟能详的游戏，如扫雷、俄罗斯方块、超级玛丽等，人们将为它们编写出高效的AI，使得电脑玩游戏的水平无人能及。</li><li>整数规划、旅行商问题等许多运筹学中的难题会被高效地解决，这个方向的研究将提升到前所未有的高度。</li><li>蛋白质的折叠问题也是一个 NPC 问题，新的算法无疑是生物与医学界的一个福音。</li></ul><p>参考文献：<br><a href="http://www.junnanzhu.com/?p=141" target="_blank" rel="noopener">http://www.junnanzhu.com/?p=141</a><br><a href="https://www.zybuluo.com/frank-shaw/note/139175" target="_blank" rel="noopener">https://www.zybuluo.com/frank-shaw/note/139175</a><br><a href="http://colah.github.io/posts/2015-09-Visual-Information/" target="_blank" rel="noopener">http://colah.github.io/posts/2015-09-Visual-Information/</a><br><a href="https://www.guokr.com/article/437662/" target="_blank" rel="noopener">https://www.guokr.com/article/437662/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/ai%E4%B8%8E%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://frankblog.site/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://frankblog.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://frankblog.site/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基础（一）</title>
    <link href="http://frankblog.site/2018/05/18/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    <id>http://frankblog.site/2018/05/18/机器学习基础/</id>
    <published>2018-05-18T04:57:16.128Z</published>
    <updated>2018-05-29T11:56:56.817Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/machine-learning-algorithms.jpg" alt=""></p><a id="more"></a><blockquote class="blockquote-center"><font size="5">从IT时代走向DT时代</font></blockquote><hr><h1 id="【机器学习应用】"><a href="#【机器学习应用】" class="headerlink" title="【机器学习应用】"></a>【机器学习应用】</h1><h2 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h2><p>典型的应用包括：<strong>人脸识别、车牌识别、扫描文字识别、图片内容识别、图片搜索</strong>等等。</p><h2 id="自然语言处理"><a href="#自然语言处理" class="headerlink" title="自然语言处理"></a>自然语言处理</h2><p>典型的应用包括：<strong>搜索引擎智能匹配、文本内容理解、文本情绪判断，语音识别、输入法、机器翻译</strong>等等。</p><h2 id="社会网络分析"><a href="#社会网络分析" class="headerlink" title="社会网络分析"></a>社会网络分析</h2><p>典型的应用包括：<strong>用户画像、网络关联分析、欺诈作弊发现、热点发现</strong>等等。</p><h2 id="推荐系统"><a href="#推荐系统" class="headerlink" title="推荐系统"></a>推荐系统</h2><p>典型的应用包括：<strong>虾米音乐的“歌曲推荐”，某宝的“猜你喜欢”</strong>等等。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.png" alt=""></p><h1 id="【数据处理】"><a href="#【数据处理】" class="headerlink" title="【数据处理】"></a>【数据处理】</h1><h2 id="数据分类"><a href="#数据分类" class="headerlink" title="数据分类"></a>数据分类</h2><p>正例(positive example)<br>反例(negative example)<br>训练集(training set)<br>验证集(validation set)<br>用作超参数验证<br>测试集(test set)<br>用作模型测试<br>类别不平衡数据集（class-imbalanced data set）<br>两个类别的标签的分布频率有很大的差异。</p><h2 id="采样方式"><a href="#采样方式" class="headerlink" title="采样方式"></a>采样方式</h2><h3 id="分层采样-stratified-sampling"><a href="#分层采样-stratified-sampling" class="headerlink" title="分层采样(stratified sampling)"></a>分层采样(stratified sampling)</h3><p>保留类别比例的采样方式通常称为分层采样</p><h3 id="留出法（hold-out）"><a href="#留出法（hold-out）" class="headerlink" title="留出法（hold-out）"></a>留出法（hold-out）</h3><p>直接将数据集D划分为两个互斥的集合，其中一个集合作为训练集S，另一个作为测试集T，在S上训练出模型后，用T来评估其测试误差，作为对泛化误差的估计。</p><p><table><tr><td bgcolor="black"></td></tr></table></p><p></p><h3 id="k折交叉验证（k-fold-cross-validation）"><a href="#k折交叉验证（k-fold-cross-validation）" class="headerlink" title="k折交叉验证（k-fold cross validation）"></a>k折交叉验证（k-fold cross validation）</h3><p>交叉验证先将数据集D划分为k个大小相似的互斥子集，每个子集从数据集中分层采样得到，然后，每次用k-1个子集的并集作为训练集，余下的一个子集作为测试集，这样就可以获得k组训练/测试集，最终返回k个测试结果的均值。</p><h3 id="自助法-bootstrapping"><a href="#自助法-bootstrapping" class="headerlink" title="自助法(bootstrapping)"></a>自助法(bootstrapping)</h3><p>对数据集D有放回的随机采样m次后，一个样本不在样本集D1出现的概率：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E8%87%AA%E5%8A%A9%E6%B3%95.png" alt=""></p><p>当n足够大时，大约有36.8%的样本不会被采到，用没采到的部分做测试集，也是包外估计（out-of-bag-estimate）。由于我们的训练集有重复数据，这会改变数据的分布，因而训练结果会有估计偏差，因此，此种方法不是很常用，除非数据量真的很少，比如小于20个。</p><h2 id="数据清洗"><a href="#数据清洗" class="headerlink" title="数据清洗"></a>数据清洗</h2><h3 id="处理缺失值"><a href="#处理缺失值" class="headerlink" title="处理缺失值"></a>处理缺失值</h3><ul><li>使用一个全局常量填补</li><li>使用属性的中心度量（平均数、中位数、众数等）</li><li>先聚类，再使用同类的中心度量</li><li>使用回归计算填补<br>LightGBM和XGBoost都能将NaN作为数据的一部分进行学习，所以不需要处理缺失值。</li></ul><h3 id="处理噪声"><a href="#处理噪声" class="headerlink" title="处理噪声"></a>处理噪声</h3><ul><li>在机器学习中，下列都是异常值：<ul><li>高绝对值的权重。</li><li>与实际值差距过大的预测值。</li><li>比平均值多大约 3 个标准差的输入数据的值。</li></ul></li><li>噪声数据处理：</li></ul><ol><li>分箱（考察近邻数据值，有箱均值、箱中位数、箱边界光滑方法）</li><li>回归</li><li>离群点分析</li></ol><h1 id="【特征工程】"><a href="#【特征工程】" class="headerlink" title="【特征工程】"></a>【特征工程】</h1><h2 id="特征编码"><a href="#特征编码" class="headerlink" title="特征编码"></a>特征编码</h2><ul><li>独热编码（one-hot encoding）<br>  独热编码的优点：能够处理非数值属性；在一定程度上扩充了特征；编码后的属性是稀疏的，存在大量的零元分量。</li><li>特征二值化（Binarization）<br>  特征二元化的过程是将数值型的属性转换为布尔值的属性，设定一个阈值作为划分属性值为0和1的分隔点。</li></ul><h2 id="归一化（Normalization）"><a href="#归一化（Normalization）" class="headerlink" title="归一化（Normalization）"></a>归一化（Normalization）</h2><p><img src="https://www.zhihu.com/equation?tex=%5Cvec%7Bx%27%7D+%3D+%5Cfrac%7B%5Cvec%7Bx%7D%7D%7Bl%28%5Cvec%7Bx%7D%29%7D" alt="link"></p><p>在处理自然图像时，我们获得的像素值在 [0,255] 区间中，常用的处理是将这些像素值除以 255，使它们缩放到 [0,1] 中。</p><h2 id="区间缩放（scaling）"><a href="#区间缩放（scaling）" class="headerlink" title="区间缩放（scaling）"></a>区间缩放（scaling）</h2><p><img src="https://www.zhihu.com/equation?tex=x%27+%3D+%5Cfrac%7Bx%7D%7Bmax%28%7CX%7C%29%7D" alt="link"></p><p><img src="https://www.zhihu.com/equation?tex=x%27+%3D+%5Cfrac%7Bx+-+min%28X%29%7D%7Bmax%28X%29+-+min%28X%29%7D" alt="link"></p><h2 id="标准化（Standardization）"><a href="#标准化（Standardization）" class="headerlink" title="标准化（Standardization）"></a>标准化（Standardization）</h2><p><img src="https://www.zhihu.com/equation?tex=x%27+%3D+%5Cfrac%7Bx+-+%5Cmu%7D%7B%5Csigma%7D" alt="link"></p><h2 id="特征变换"><a href="#特征变换" class="headerlink" title="特征变换"></a>特征变换</h2><ul><li>特征交叉（feature cross）<br>  将特征进行交叉（乘积或者笛卡尔乘积）运算后得到的合成特征。特征交叉有助于表示非线性关系。</li><li>特征降维（DimensionalityReduction）<br>  使用数据编码或变换，以便得到原数据的归约或“压缩”表示。归约分为无损的和有损的。有效的有损维归约方法为：小波变换和主成分分析</li></ul><h1 id="【线性回归模型】"><a href="#【线性回归模型】" class="headerlink" title="【线性回归模型】"></a>【线性回归模型】</h1><h2 id="线性回归的正则化"><a href="#线性回归的正则化" class="headerlink" title="线性回归的正则化"></a>线性回归的正则化</h2><h3 id="Lasso回归"><a href="#Lasso回归" class="headerlink" title="Lasso回归"></a>Lasso回归</h3><ul><li>线性回归的L1正则化通常称为Lasso回归，α来调节损失函数的均方差项和正则化项的权重。</li><li>Lasso回归可以使得一些特征的系数变小，甚至还是一些绝对值较小的系数直接变为0，故具有特征选择的功能，增强了模型的泛化能力。</li></ul><h3 id="岭回归"><a href="#岭回归" class="headerlink" title="岭回归"></a>岭回归</h3><ul><li>线性回归的L2正则化通常称为Ridge回归。</li><li>Ridge回归在不抛弃任何一个特征的情况下，缩小了回归系数，使得模型相对而言比较的稳定，但和Lasso回归比，这会使得模型的特征留的特别多，模型解释性差。</li><li>Ridge回归的求解比较简单，一般用最小二乘法。</li></ul><p><strong>L1正则化产生稀疏的权值, 具有特征选择的作用；L2正则化产生平滑的权值</strong>。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/L1,L2%E6%AD%A3%E5%88%99%E5%8C%96.png" alt=""></p><h2 id="最小二乘法的局限性"><a href="#最小二乘法的局限性" class="headerlink" title="最小二乘法的局限性"></a>最小二乘法的局限性</h2><ol><li>最小二乘法需要计算XTX的逆矩阵，有可能它的逆矩阵不存在，这样就没有办法直接用最小二乘法了</li><li>当样本特征n非常的大的时候，计算XTX的逆矩阵是一个非常耗时的工作（nxn的矩阵求逆），当然，我们可以通过对样本数据进行整理，去掉冗余特征。让XTX的行列式不为0，然后继续使用最小二乘法。</li><li>如果拟合函数不是线性的，这时无法使用最小二乘法，需要通过一些技巧转化为线性才能使用</li><li>当样本量m很少，小于特征数n的时候，这时拟合方程是欠定的，常用的优化方法都无法去拟合数据。当样本量m等于特征数n的时候，用方程组求解就可以了。当m大于n时，拟合方程是超定的，也就是我们常用与最小二乘法的场景了。</li></ol><h1 id="【逻辑回归模型】"><a href="#【逻辑回归模型】" class="headerlink" title="【逻辑回归模型】"></a>【逻辑回归模型】</h1><p>逻辑回归是一个分类算法，它可以处理二元分类以及多元分类。用sigmoid函数对线性回归模型进行变换。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%AE%9A%E4%B9%89_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><p>θ为分类模型的要求出的模型参数。对于模型输出hθ(x)，我们让它和我们的二元样本输出y（假设为0和1）有这样的对应关系，如果hθ(x)&gt;0.5 ，即xθ&gt;0, 则y为1。如果hθ(x)&lt;0.5，即xθ&lt;0。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><ul><li>概率分布函数<br>根据二元逻辑回归的定义，假设我们的样本输出是0或者1两类。</li></ul><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><ul><li>似然函数</li></ul><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E4%BC%BC%E7%84%B6%E5%87%BD%E6%95%B0_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><ul><li>损失函数<br>这里我们用对数似然函数最大化，对数似然函数取反即为我们的损失函数J(θ)</li></ul><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><ul><li>简写成矩阵形式</li></ul><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%BA%BF%E6%80%A7%E6%A8%A1%E5%9E%8B%E7%9F%A9%E9%98%B5%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><ul><li>损失函数优化方法<br>用梯度下降法对损失函数进行优化，得到迭代公式:</li></ul><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D1_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><h1 id="【决策树】"><a href="#【决策树】" class="headerlink" title="【决策树】"></a>【决策树】</h1><h2 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h2><p>熵用来度量事物的不确定性</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E7%86%B5%E7%9A%84%E5%AE%9A%E4%B9%89_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><ul><li>联合熵<br>两个变量X和Y的联合熵</li></ul><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E8%81%94%E5%90%88%E7%86%B5_%E7%9C%8B%E5%9B%BE%E7%8E%8B.png" alt=""></p><ul><li>条件熵</li></ul><ol><li>条件熵H(X|Y)度量了我们在知道Y以后X剩下的不确定性，那么H(X)-H(X|Y)呢？从上面的描述大家可以看出，它度量了X在知道Y以后不确定性减少程度，这个度量我们在信息论中称为互信息，，记为I(X,Y)。在决策树ID3算法中叫做信息增益。</li><li>用下面这个图很容易明白他们的关系。左边的椭圆代表H(X),右边的椭圆代表H(Y),中间重合的部分就是我们的互信息或者信息增益I(X,Y), 左边的椭圆去掉重合部分就是H(X|Y),右边的椭圆去掉重合部分就是H(Y|X)。两个椭圆的并就是H(X,Y)。</li></ol><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%9D%A1%E4%BB%B6%E7%86%B5.png" alt=""></p><h2 id="决策树构建中的分裂准则"><a href="#决策树构建中的分裂准则" class="headerlink" title="决策树构建中的分裂准则"></a>决策树构建中的分裂准则</h2><p>决策树可以通过一系列规则递归地分割特征空间</p><h3 id="信息增益（information-gain）"><a href="#信息增益（information-gain）" class="headerlink" title="信息增益（information gain）"></a><strong>信息增益（information gain）</strong></h3><p>属性划分减少的信息熵，信息熵是度量样本集合纯度的一种指标，假设第k类样本所占比例为pk，则数据集D的信息熵为：Ent(D)=-∑pklogpk，Ent(D)越小，D的纯度越高。 Gain(D,a)=Ent(D)-∑(Dv/D*Ent(Dv))，Dv是某个属性a的某个可能取值的样本集合</p><h3 id="增益率（gain-ratio）"><a href="#增益率（gain-ratio）" class="headerlink" title="增益率（gain ratio）"></a><strong>增益率（gain ratio）</strong></h3><p>信息增益准则对可取值数目较多的属性有偏好，为减少这种偏好的不利影响，使用增益率选择最优划分属性，增益率定义为:Gain_ratio(D,a)=Gain(D,a)/IV(a), IV(a)=-∑(Dv/D*log(Dv/D))，IV(a)称为为a的固有值。属性可能取值数目越多，IV(a)的值越大，增益率即增益/固有值。</p><h3 id="基尼指数-Gini-index"><a href="#基尼指数-Gini-index" class="headerlink" title="基尼指数(Gini index)"></a><strong>基尼指数(Gini index)</strong></h3><p>基尼指数是另外一种数据的不纯度的度量方法，其定义如下：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/gini%E7%B3%BB%E6%95%B01.jpg" alt="">　　</p><p>其中的m仍然表示数据集D中类别C的个数，Pi表示D中任意一个记录属于Ci的概率，计算时Pi=(D中属于Ci类的集合的记录个数/|D|)。如果所有的记录都属于同一个类中，则P1=1，Gini(D)=0，此时不纯度最低。<br>在CART(Classification and Regression Tree)算法中利用基尼指数构造二叉决策树，对每个属性都会枚举其属性的非空真子集，以属性R分裂后的基尼系数为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%9F%BA%E5%B0%BC%E7%B3%BB%E6%95%B02.jpg" alt=""></p><p>D1为D的一个非空真子集，D2为D1在D的补集，即D1+D2=D，对于属性R来说，有多个真子集，即GiniR(D)有多个值，但我们选取最小的那么值作为R的基尼指数。最后：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%9F%BA%E5%B0%BC%E7%B3%BB%E6%95%B03.jpg" alt=""></p><p>对于二类分类，基尼系数和熵之半的曲线如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/40658-24f62052d3f57559.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="link"></p><p>从上图可以看出，基尼系数和熵之半的曲线非常接近，仅仅在45度角附近误差稍大。因此，基尼系数可以做为熵模型的一个近似替代</p><h2 id="常用决策树模型"><a href="#常用决策树模型" class="headerlink" title="常用决策树模型"></a>常用决策树模型</h2><h3 id="决策树模型总结"><a href="#决策树模型总结" class="headerlink" title="决策树模型总结"></a>决策树模型总结</h3><table><thead><tr><th>算法</th><th>支持模型</th><th>树结构</th><th>特征选择</th><th>连续值处理</th><th>缺失值处理</th><th>剪枝</th></tr></thead><tbody><tr><td>ID3</td><td>分类</td><td>多叉树</td><td>信息增益</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>C4.5</td><td>分类</td><td>多叉树</td><td>信息增益比</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>CART</td><td>分类，回归</td><td>二叉树</td><td>基尼系数，均方差</td><td>支持</td><td>支持</td><td>支持</td></tr></tbody></table><h3 id="CART决策树属性分裂方法"><a href="#CART决策树属性分裂方法" class="headerlink" title="CART决策树属性分裂方法"></a>CART决策树属性分裂方法</h3><ol><li>m个样本的连续特征A有m个，从小到大排列为a1,a2,…,ama1,a2,…,am,则CART算法取相邻两样本值的中位数，一共取得m-1个划分点。</li><li>对于这m-1个点，分别计算以该点作为二元分类点时的基尼系数。选择基尼系数最小的点作为该连续特征的二元离散分类点。</li></ol><h2 id="决策树优化方法"><a href="#决策树优化方法" class="headerlink" title="决策树优化方法"></a>决策树优化方法</h2><h3 id="后剪枝（postpruning）"><a href="#后剪枝（postpruning）" class="headerlink" title="后剪枝（postpruning）"></a>后剪枝（postpruning）</h3><p>先从训练集生成一颗完整的决策树，然后自底向上地对非叶节点进行考察，若将该结点子树替换成叶节点能提升泛化性能，则进行替换，后剪枝训练时间开销大。</p><h3 id="预剪枝（prepruning）"><a href="#预剪枝（prepruning）" class="headerlink" title="预剪枝（prepruning）"></a>预剪枝（prepruning）</h3><p>在决策树生成过程中，对每个结点在划分前先进行估计，若当前结点的划分不能带来决策树泛化性能的提升，则停止划分并将当前结点标记为叶节点，预剪枝基于贪心存在欠拟合的风险。</p><h3 id="抑制单颗决策树的复杂度的方法"><a href="#抑制单颗决策树的复杂度的方法" class="headerlink" title="抑制单颗决策树的复杂度的方法"></a>抑制单颗决策树的复杂度的方法</h3><ol><li>限制树的最大深度</li><li>限制叶子节点的最少样本数量</li><li>限制节点分裂时的最少样本数量</li><li>吸收 bagging 的思想对训练样本采样，在学习单颗决策树时只使用一部分训练样本</li><li>借鉴随机森林的思路在学习单颗决策树时只采样一部分特征，在目标函数中添加正则项惩罚复杂的树结。</li></ol><h2 id="决策树算法的优点"><a href="#决策树算法的优点" class="headerlink" title="决策树算法的优点"></a>决策树算法的优点</h2><ol><li>基本不需要预处理，不需要提前归一化，处理缺失值。</li><li>使用决策树预测的代价是O(log2m)O(log2m)。 m为样本数。</li><li>既可以处理离散值也可以处理连续值。很多算法只是4.专注于离散值或者连续值。</li><li>可以处理多维度输出的分类问题。</li><li>相比于神经网络之类的黑盒分类模型，决策树在逻辑上可以得到很好的解释</li><li>可以交叉验证的剪枝来选择模型，从而提高泛化能力。</li><li>对于异常点的容错能力好，健壮性高。</li></ol><h2 id="决策树算法的缺陷"><a href="#决策树算法的缺陷" class="headerlink" title="决策树算法的缺陷"></a>决策树算法的缺陷</h2><ol><li>决策树算法非常容易过拟合，导致泛化能力不强。可以通过设置节点最少样本数量和限制决策树深度来改进。</li><li>决策树会因为样本发生一点点的改动，就会导致树结构的剧烈改变。这个可以通过集成学习之类的方法解决。</li><li>寻找最优的决策树是一个NP难的问题，我们一般是通过启发式方法，容易陷入局部最优。可以通过集成学习之类的方法来改善。</li><li>有些比较复杂的关系，决策树很难学习，比如异或。这个就没有办法了，一般这种关系可以换神经网络分类方法来解决。</li><li>如果某些特征的样本比例过大，生成决策树容易偏向于这些特征。这个可以通过调节样本权重来改善。</li></ol><h1 id="【梯度】"><a href="#【梯度】" class="headerlink" title="【梯度】"></a>【梯度】</h1><p>在最小化损失函数时，可以通过梯度下降法来一步步的迭代求解，得到最小化的损失函数，和模型参数值。反过来，如果我们需要求解损失函数的最大值，这时就需要用梯度上升法来迭代了。</p><h2 id="梯度下降法的超参数"><a href="#梯度下降法的超参数" class="headerlink" title="梯度下降法的超参数"></a>梯度下降法的超参数</h2><ul><li>步长（step size）<br>学习速率（learning rate）乘以偏导数的值，即梯度下降中的步长。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D.jpg" alt=""></li></ul><h2 id="梯度下降的算法调优"><a href="#梯度下降的算法调优" class="headerlink" title="梯度下降的算法调优"></a>梯度下降的算法调优</h2><ol><li><p>算法的步长选择。在前面的算法描述中，我提到取步长为1，但是实际上取值取决于数据样本，可以多取一些值，从大到小，分别运行算法，看看迭代效果，如果损失函数在变小，说明取值有效，否则要增大步长。前面说了。步长太大，会导致迭代过快，甚至有可能错过最优解。步长太小，迭代速度太慢，很长时间算法都不能结束。所以算法的步长需要多次运行后才能得到一个较为优的值。</p></li><li><p>算法参数的初始值选择。 初始值不同，获得的最小值也有可能不同，因此梯度下降求得的只是局部最小值；当然如果损失函数是凸函数则一定是最优解。由于有局部最优解的风险，需要多次用不同初始值运行算法，关键损失函数的最小值，选择损失函数最小化的初值。</p></li><li><p>标准化。由于样本不同特征的取值范围不一样，可能导致迭代很慢，为了减少特征取值的影响，可以对特征数据标准化，这样特征的新期望为0，新方差为1，迭代次数可以大大加快。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E6%A0%87%E5%87%86%E5%8C%96%E4%BC%98%E5%8A%BF.png" alt=""></p></li></ol><h2 id="梯度下降方法总结"><a href="#梯度下降方法总结" class="headerlink" title="梯度下降方法总结"></a>梯度下降方法总结</h2><h3 id="批梯度下降-batch-gradient-descent-BGD"><a href="#批梯度下降-batch-gradient-descent-BGD" class="headerlink" title="批梯度下降(batch gradient descent/BGD)"></a>批梯度下降(batch gradient descent/BGD)</h3><p>求梯度的时候就用了所有m个样本的梯度数据。</p><h3 id="随机梯度下降（stochastic-gradient-descent-SGD）"><a href="#随机梯度下降（stochastic-gradient-descent-SGD）" class="headerlink" title="随机梯度下降（stochastic gradient descent/SGD）"></a>随机梯度下降（stochastic gradient descent/SGD）</h3><p>随机梯度下降法由于每次仅仅采用一个样本来迭代。优点是速度快以及可以跳出局部最优解，缺点是导致迭代方向变化很大，不能很快的收敛到局部最优解。</p><h3 id="小批量随机梯度下降（mini-batch-stochastic-gradient-descent）"><a href="#小批量随机梯度下降（mini-batch-stochastic-gradient-descent）" class="headerlink" title="小批量随机梯度下降（mini-batch stochastic gradient descent）"></a>小批量随机梯度下降（mini-batch stochastic gradient descent）</h3><p>小批量梯度下降法是批量梯度下降法和随机梯度下降法的折衷，也就是对于m个样本，我们采用x个样子来迭代，1&lt;x&lt;m。一般可以取x=10，当然根据样本的数据，可以调整这个x的值。</p><h2 id="梯度下降法与最小二乘法"><a href="#梯度下降法与最小二乘法" class="headerlink" title="梯度下降法与最小二乘法"></a>梯度下降法与最小二乘法</h2><ul><li>梯度下降法和最小二乘法相比，梯度下降法需要选择步长，而最小二乘法不需要。</li><li>梯度下降法是迭代求解，最小二乘法是计算解析解。如果样本量不算很大，且存在解析解，最小二乘法比起梯度下降法要有优势，计算速度很快。但是如果样本量很大，用最小二乘法由于需要求一个超级大的逆矩阵，这时就很难或者很慢才能求解解析解了，使用迭代的梯度下降法比较有优势。</li></ul><h1 id="【分类模型指标】"><a href="#【分类模型指标】" class="headerlink" title="【分类模型指标】"></a>【分类模型指标】</h1><h2 id="混淆矩阵（confusion-matrix）"><a href="#混淆矩阵（confusion-matrix）" class="headerlink" title="混淆矩阵（confusion matrix）"></a>混淆矩阵（confusion matrix）</h2><p><img src="https://upload-images.jianshu.io/upload_images/145616-0a7a7fd1ff77dcd9.png" alt="link"></p><h2 id="准确率（Accuracy）"><a href="#准确率（Accuracy）" class="headerlink" title="准确率（Accuracy）"></a>准确率（Accuracy）</h2><p><strong>准确率</strong>是预测和标签一致的样本在所有样本中所占的比例</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%87%86%E7%A1%AE%E7%8E%87%EF%BC%88Accuracy%EF%BC%89.svg" alt="link"></p><h2 id="精确率（Precision）"><a href="#精确率（Precision）" class="headerlink" title="精确率（Precision）"></a>精确率（Precision）</h2><p><strong>精确率</strong>是你预测为正类的数据中，有多少确实是正类</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%9F%A5%E5%87%86%E7%8E%87%EF%BC%88Precision%EF%BC%89.svg" alt="link"></p><h2 id="查全率（Recall）"><a href="#查全率（Recall）" class="headerlink" title="查全率（Recall）"></a>查全率（Recall）</h2><p><strong>查全率</strong>是所有正类的数据中，你预测为正类的数据占比</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%9F%A5%E5%85%A8%E7%8E%87%EF%BC%88Recall%EF%BC%89.svg" alt="link"></p><p><img src="https://upload.wikimedia.org/wikipedia/commons/2/26/Precisionrecall.svg" alt="link"></p><p>不同的问题，判别标准不同。对于推荐系统，更侧重于查准率；对于医学诊断系统，更侧重于查全率。查准率和查全率是一个矛盾体，往往差准率高的情况查重率比较低。</p><h2 id="F1-Score"><a href="#F1-Score" class="headerlink" title="F1 Score"></a>F1 Score</h2><p>有时也用一个F1值来综合评估精确率和召回率，它是精确率和召回率的调和均值。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/F1%20Score.svg" alt="link"></p><h2 id="F-beta-Score"><a href="#F-beta-Score" class="headerlink" title="F-beta Score"></a>F-beta Score</h2><p>有时候我们对精确率和召回率并不是一视同仁，比如有时候我们更加重视精确率。我们用一个参数β来度量两者之间的关系。如果β&gt;1, 召回率有更大影响，如果β&lt;1,精确率有更大影响。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/F-beta%20Score.svg" alt="link"></p><h2 id="ROC-（receiver-operating-characteristic-curve）"><a href="#ROC-（receiver-operating-characteristic-curve）" class="headerlink" title="ROC （receiver operating characteristic curve）"></a>ROC （receiver operating characteristic curve）</h2><p>绘制方法：首先根据分类器的预测对样例进行排序，排在前面的是分类器被认为最可能为正例的样本。按照真例y方向走一个单位，遇到假例x方向走一个单位。<br>ROC曲线的横坐标为false positive rate（FPR），纵坐标为true positive rate（TPR）。<br>ROC曲线有个很好的特性：当测试集中的正负样本的分布变化的时候，ROC曲线能够保持不变。</p><p><img src="https://habrastorage.org/files/267/36b/ff1/26736bff158a4d82893ff85b2022cc5b.gif" alt=""></p><h2 id="AUC（Area-Under-the-Curve）"><a href="#AUC（Area-Under-the-Curve）" class="headerlink" title="AUC（Area Under the Curve）"></a>AUC（Area Under the Curve）</h2><p>ROC曲线下的面积，AUC的取值范围一般在0.5和1之间。AUC越大代表分类器效果更好。</p><p><img src="https://upload-images.jianshu.io/upload_images/145616-ce8221a29d9c01ef.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="link"></p><p>理想目标：TPR=1，FPR=0，即图中(0,1)点，故ROC曲线越靠拢(0,1)点，越偏离45度对角线越好，Sensitivity、Specificity越大效果越好。</p><h1 id="【集成学习】"><a href="#【集成学习】" class="headerlink" title="【集成学习】"></a>【集成学习】</h1><ol><li>一般来说，集成学习指的同质基学习器的集成，而同质基学习器使用最多的模型是CART决策树和神经网络。</li><li>同质基学习器按照个体学习器之间是否存在依赖关系可以分为两类，第一个是基学习器之间存在强依赖关系，基本都需要串行生成，代表算法是boosting系列算法，第二个是个体学习器之间不存在强依赖关系，可以并行生成，代表算法是bagging和随机森林（Random Forest）系列算法。</li></ol><h2 id="boosting算法"><a href="#boosting算法" class="headerlink" title="boosting算法"></a>boosting算法</h2><ol><li>用初始权重训练出一个弱学习器1，根据其误差率表现来更新训练样本的权重，使误差率高的训练样本权重变高，使得这些误差率高的点在后面的弱学习器2中得到更多的重视。</li><li>重复进行第一步骤，直到弱学习器数达到事先指定的数目T，最终将这T个弱学习器通过集合策略进行整合，得到最终的强学习器。Boosting系列算法里最著名算法主要有AdaBoost算法和提升树(boosting tree)系列算法。</li></ol><h2 id="bagging算法"><a href="#bagging算法" class="headerlink" title="bagging算法"></a>bagging算法</h2><ol><li>基学习器的训练集是通过随机采样得到的。通过T次的基于自助法的随机采样，我们就可以得到T个采样集，我们可以分别独立的训练出T个弱学习器，再对这T个弱学习器通过集合策略来得到最终的强学习器。</li><li>大约36.8%的没有被采样到的数据，我们常常称之为袋外数据(Out Of Bag, 简称OOB)。这些数据没有参与训练集模型的拟合，因此可以用来检测模型的泛化能力。</li></ol><ul><li>随机森林在bagging的样本随机采样基础上，又加上了特征的随机选择。<h2 id="bagging-amp-boosting"><a href="#bagging-amp-boosting" class="headerlink" title="bagging&amp;boosting"></a>bagging&amp;boosting</h2>对于 Bagging 算法来说，由于我们会并行地训练很多不同的分类器的目的就是降低这个方差（variance），因为采用了相互独立的基分类器多了以后，h 的值自然就会靠近。所以对于每个基分类器来说，目标就是如何降低这个偏差（bias），所以我们会采用深度很深甚至不剪枝的决策树。</li></ul><p>对于 Boosting 来说，每一步我们都会在上一轮的基础上更加拟合原数据，所以可以保证偏差（bias），所以对于每个基分类器来说，问题就在于如何选择 variance 更小的分类器，即更简单的分类器，所以我们选择了深度很浅的决策树。</p><h3 id="GBDT"><a href="#GBDT" class="headerlink" title="GBDT"></a>GBDT</h3><ul><li>一个通俗的例子解释，假如有个人30岁，我们首先用20岁去拟合，发现损失有10岁，这时我们用6岁去拟合剩下的损失，发现差距还有4岁，第三轮我们用3岁拟合剩下的差距，差距就只有一岁了。如果我们的迭代轮数还没有完，可以继续迭代下面，每一轮迭代，拟合的岁数误差都会减小。</li></ul><h3 id="xgboost相比GBDT的优势"><a href="#xgboost相比GBDT的优势" class="headerlink" title="xgboost相比GBDT的优势"></a>xgboost相比GBDT的优势</h3><p>1、传统GBDT以CART作为基分类器，xgboost还支持线性分类器，这个时候xgboost相当于带L1和L2正则化项的逻辑斯蒂回归（分类问题）或者线性回归（回归问题）。<br>2、传统GBDT在优化时只用到一阶导数信息，xgboost则对代价函数进行了二阶泰勒展开，同时用到了一阶和二阶导数。顺便提一下，xgboost工具支持自定义代价函数，只要函数可一阶和二阶求导。<br>3、xgboost在代价函数里加入了正则项，用于控制模型的复杂度。正则项里包含了树的叶子节点个数、每个叶子节点上输出的score的L2模的平方和。从Bias-variance tradeoff角度来讲，正则项降低了模型的variance，使学习出来的模型更加简单，防止过拟合，这也是xgboost优于传统GBDT的一个特性。<br>4、Shrinkage（缩减），相当于学习速率（xgboost中的eta）。xgboost在进行完一次迭代后，会将叶子节点的权重乘上该系数，主要是为了削弱每棵树的影响，让后面有更大的学习空间。实际应用中，一般把eta设置得小一点，然后迭代次数设置得大一点。（补充：传统GBDT的实现也有学习速率）<br>5、列抽样（column subsampling）。xgboost借鉴了随机森林的做法，支持列抽样，不仅能降低过拟合，还能减少计算，这也是xgboost异于传统gbdt的一个特性。<br>6、xgboost的并行是在特征粒度上的。我们知道，决策树的学习最耗时的一个步骤就是对特征的值进行排序（因为要确定最佳分割点），xgboost在训练之前，预先对数据进行了排序，然后保存为block结构，后面的迭代中重复地使用这个结构，大大减小计算量。这个block结构也使得并行成为了可能，在进行节点的分裂时，需要计算每个特征的增益，最终选增益最大的那个特征去做分裂，那么各个特征的增益计算就可以开多线程进行。</p><h2 id="随机森林的优劣"><a href="#随机森林的优劣" class="headerlink" title="随机森林的优劣"></a>随机森林的优劣</h2><ul><li>优势：<br>1） 训练可以高度并行化，对于大数据时代的大样本训练速度有优势。<br>2） 由于可以随机选择决策树节点划分特征，这样在样本特征维度很高的时候，仍然能高效的训练模型。<br>3） 在训练后，可以给出各个特征对于输出的重要性<br>4） 由于采用了随机采样，训练出的模型的方差小，泛化能力强。<br>5） 相对于Boosting系列的Adaboost和GBDT， RF实现比较简单。<br>6） 对部分特征缺失不敏感。</li><li>缺点：<br>1）在某些噪音比较大的样本集上，RF模型容易陷入过拟合。<br>2)  取值划分比较多的特征容易对RF的决策产生更大的影响，从而影响拟合的模型的效果。</li></ul><h2 id="集合策略"><a href="#集合策略" class="headerlink" title="集合策略"></a>集合策略</h2><ul><li>对于数值类的回归预测问题，通常使用的结合策略是平均法。</li><li>对于分类问题的预测，我们通常使用的是投票法。</li><li>对于学习误差较大的情况，我们将训练集弱学习器的学习结果作为输入，将训练集的输出作为输出，重新训练一个学习器来得到最终结果，这种方法称为学习法。简单来说，对于测试集，我们首先用初级学习器预测一次，得到次级学习器的输入样本，再用次级学习器预测一次，得到最终的预测结果。</li></ul><h1 id="【聚类】"><a href="#【聚类】" class="headerlink" title="【聚类】"></a>【聚类】</h1><h2 id="K-means算法"><a href="#K-means算法" class="headerlink" title="K-means算法"></a>K-means算法</h2><ul><li><p>算法思想：按照样本之间的距离大小，将样本集划分为K个簇。让簇内的点尽量紧密的连在一起，而让簇间的距离尽量的大。</p></li><li><p>优点：<br>1）原理比较简单，实现也是很容易，收敛速度快。<br>2）聚类效果较优。<br>3）算法的可解释度比较强。<br>4）主要需要调参的参数仅仅是簇数k。</p></li><li>缺点：<br>1）K值的选取不好把握<br>2）对于不是凸的数据集比较难收敛<br>3）如果各隐含类别的数据不平衡，比如各隐含类别的数据量严重失衡，或者各隐含类别的方差不同，则聚类效果不佳。<br>4） 采用迭代方法，得到的结果只是局部最优。<br>5） 对噪音和异常点比较的敏感。</li></ul><h1 id="【关联规则】"><a href="#【关联规则】" class="headerlink" title="【关联规则】"></a>【关联规则】</h1><ol><li>项集（itemset）</li><li>事务（transaction）：为一个非空项集</li><li>频度（frequency）</li><li>关联规则（association rules），X=&gt;Y，X，Y是两个不相交的非空项集。</li><li>强关联规则：支持度和置信度都高于阈值</li><li>支持度（support）：包含X∪YX∪Y的事务的出现概率</li><li>置信度（confidence）：包含X的事务同时也包含Y的概率，P(Y|X)</li></ol><h1 id="【文本挖掘】"><a href="#【文本挖掘】" class="headerlink" title="【文本挖掘】"></a>【文本挖掘】</h1><ul><li>Word2Vec(词向量学习模型)</li><li>TF(Term Frequency词频)</li><li>TF-IDF(Term Frequency-Inverse DocumentFrequency 词频-逆向文档频率)</li><li>IG(InformationGain 信息增益)</li><li>IGR(Information Gain Ratio 信息增益率)</li></ul><h1 id="【模型选择与评估】"><a href="#【模型选择与评估】" class="headerlink" title="【模型选择与评估】"></a>【模型选择与评估】</h1><h2 id="算法选择"><a href="#算法选择" class="headerlink" title="算法选择"></a>算法选择</h2><p><img src="http://p4rlzrioq.bkt.clouddn.com/sklearn%20%E4%B8%AD%E6%96%87.png" alt=""></p><h2 id="泛化能力、欠拟合和过拟合"><a href="#泛化能力、欠拟合和过拟合" class="headerlink" title="泛化能力、欠拟合和过拟合"></a>泛化能力、欠拟合和过拟合</h2><p><img src="http://p4rlzrioq.bkt.clouddn.com/overfitting.jpg" alt=""></p><h2 id="偏差和方差"><a href="#偏差和方差" class="headerlink" title="偏差和方差"></a>偏差和方差</h2><p>偏差方差分解解释了机器的泛化误差。偏差度量了算法的期望预测与真实结果之间的误差。方差度量了训练集的变动所导致的学习性能的变化。<br><img src="http://p4rlzrioq.bkt.clouddn.com/%E5%87%86%E4%B8%8E%E7%A1%AE.jpeg" alt="link"></p><ul><li>有一些算法天生是高方差的算法。如KNN、决策树。非参数学习通常是高方差算法，对数据较为敏感，因为不对数据进行任何假设。</li><li>有一些算法天生就是高偏差算法。如线性回归。参数学习通常是高偏差算法，因为对数据具有极强的假设。</li><li>机器学习的主要挑战来自于方差，解决高方差的通常手段有：<ul><li>1.降低模型复杂度</li><li>2.减少数据维度；降噪</li><li>3.增加样本数</li><li>4.使用验证集</li><li>5.模型正则化</li></ul></li></ul><p>此图献给奋战在一线的调参侠们！</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/machine%20learning%20funny.jpg" alt="link"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/machine-learning-algorithms.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://frankblog.site/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://frankblog.site/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="深度学习" scheme="http://frankblog.site/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Git学习</title>
    <link href="http://frankblog.site/2018/04/08/git%E5%AD%A6%E4%B9%A0/"/>
    <id>http://frankblog.site/2018/04/08/git学习/</id>
    <published>2018-04-07T16:08:44.007Z</published>
    <updated>2018-06-04T02:25:11.516Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/git.jpg" alt=""><br><a id="more"></a></p><hr><h2 id="Git-简介"><a href="#Git-简介" class="headerlink" title="Git 简介"></a>Git 简介</h2><p>Git是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件，是目前世界上最先进的分布式版本控制系统。<br>主要优势有：公共服务器压力和数据量都不会太大，任意两个开发者之间可以很容易的解决冲突并且可以进行离线工作。</p><h2 id="Git-术语"><a href="#Git-术语" class="headerlink" title="Git 术语"></a>Git 术语</h2><ul><li>commit<br>提交持有的库的当前状态，每个提交的对象有父commit对象的指针。从给定的commit可以遍历寻找父指针，查看历史记录的提交。</li><li>branches<br>分支用来创建另一条线的发展，默认情况下，git的主分支，是master分支，和上线的版本是一样的，平时要工作的新功能创建一个分支，功能完成之后，它被合并回master分支，每当做出一个commit，HEAD更新为最新提交</li><li>tags<br>git中的tag指向一次commit的id。通常用来给开发做版本号。</li><li>clone<br>克隆操作不仅仅是检出的工作拷贝，也反映了完整的信息</li><li>pull<br>pull操作是用于两个存储库实例之间的同步</li><li>push<br>将本地仓库中的文件同步到远端库中</li><li>head<br>HEAD指针总是指向分支的最新提交，每当你做了一个提交。HEAD更新为最新提交,HEAD树枝存储在.git/refs/heads/中</li><li>工作区：就是你在电脑里能看到的目录。</li><li>暂存区：英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li><li>版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li></ul><h2 id="Bash-基本指令"><a href="#Bash-基本指令" class="headerlink" title="Bash 基本指令"></a>Bash 基本指令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pwd : 显示当前所在的目录路径。</span><br><span class="line">ls(ll): 都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</span><br><span class="line">touch : 新建一个文件 如 touch index.js 就会在当前目录下新建一个index.js文件。</span><br><span class="line">rm: 删除一个文件, rm index.js 就会把index.js文件删除。</span><br><span class="line">mkdir: 新建一个目录,就是新建一个文件夹。</span><br><span class="line">rm -r : 删除一个文件夹, rm -r src 删除src目录， 好像不能用通配符。</span><br><span class="line">mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,必须保证文件和目标文件夹在同一目录下。</span><br><span class="line">reset 重新初始化终端/清屏。</span><br><span class="line">clear 清屏。</span><br><span class="line">history 查看命令历史。</span><br><span class="line">elp 帮助。</span><br><span class="line">exit 退出。</span><br></pre></td></tr></table></figure><h2 id="常用基础命令"><a href="#常用基础命令" class="headerlink" title="常用基础命令"></a>常用基础命令</h2><h3 id="安装-amp-配置"><a href="#安装-amp-配置" class="headerlink" title="安装&amp;配置"></a>安装&amp;配置</h3><ul><li>官网下载安装完，右键看到<strong>Git Bash</strong>代表安装完成</li><li>初始配置（–local 项目级；–global 当前用户级；–system 系统级）<br><code>git config --global user.name&quot;Your Name&quot;</code><br><code>git config --global user.email&quot;email@example.com&quot;</code></li><li>查看配置 <code>- git config -l</code></li></ul><h3 id="初始化-amp-克隆"><a href="#初始化-amp-克隆" class="headerlink" title="初始化&amp;克隆"></a>初始化&amp;克隆</h3><ul><li>本地初始化：<code>git init</code> 仓库目录下会多了一个.git隐藏文件夹。</li><li>克隆版本库：<code>git clone &quot;url&quot;</code></li></ul><p>p.s. 版本控制系统可以告诉你每次的改动，比如在第x行加了代码。而图片、视频这些二进制文件没法跟踪文件的变化，也就是只知道图片从100KB改成了120KB，但到底改了啥，版本控制系统不知道。 不幸的是，Microsoft的Word格式是二进制格式，因此，版本控制系统是没法跟踪Word文件的改动的。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/git%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4.png" alt=""></p><h3 id="管理分支"><a href="#管理分支" class="headerlink" title="管理分支"></a>管理分支</h3><ul><li>查看分支：<code>git branch</code></li><li>创建分支：<code>git branch branch_name</code></li><li>切换分支：<code>git checkout branch_name</code></li><li>创建+切换分支：<code>git checkout -b branch_name</code></li><li>合并某分支到当前分支：<code>git merge branch_name</code></li><li>重命名分支：<code>git branch -m branch_name branch_new_name</code> //不会覆盖已经存在的分支</li><li>重命名分支：<code>git branch -M branch_name branch_new_name</code> //会覆盖已经存在的分支</li><li>删除分支：<code>git branch -d branch_name</code></li><li>强制删除分支： <code>git branch -D branch_name</code></li><li>删除远程分支： <code>git push origin : branch_name</code> //可以使用这种语法，推送一个空分支到远程分支，其实就相当于删除远程分支</li></ul><h3 id="查看-amp-修改"><a href="#查看-amp-修改" class="headerlink" title="查看&amp;修改"></a>查看&amp;修改</h3><ul><li>拉取代码：<code>git pull orgin branch_name</code></li><li>查看更改：<code>git status</code>;<code>git status -s</code>//以简短格式输出</li><li>查看更改细节：<code>git diff file_name</code>//尚未缓存的改动<code>git diff --cached</code>//查看已缓存的改动</li><li>查看谁修改过代码：<code>git blame filename</code></li><li>回到上次修改：<code>git reset --hard</code></li><li>查看历史记录：<code>git log</code>；<code>git log --pretty=oneline</code>//将每次<code>commit</code>的记录打印成一行</li><li>查看git远程地址：<code>git remote -v</code></li><li>删除：<code>git rm</code> //将文件从缓存区中移除</li></ul><h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><ul><li>添加单个文件：<code>git add filename.js</code>  //该文件添加到缓存</li><li>添加所有js文件：<code>git add *.js</code></li><li>添加所有文件：<code>git add</code></li></ul><h3 id="提交文件"><a href="#提交文件" class="headerlink" title="提交文件"></a>提交文件</h3><ul><li>提交添加的文件：<code>git commit -m &quot;your description about this branch&quot;</code>//记录缓存区的快照。</li><li>提交单个文件：<code>git commit -m &quot;your description about this branch&quot; filename.js</code></li><li>推送分支：<code>git push orgin your_branch_name</code></li><li>备份当前分支内容：<code>git stash</code></li></ul><h3 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h3><ul><li>创建标签：<code>git tag 1.0.0</code>  //标签无法重命名</li><li>显示标签列表：<code>git tag</code></li><li>切出标签：<code>git checkout 1.0.0</code></li><li>删除标签：<code>git tag -d 1.0.0</code></li></ul><h2 id="流程化管理"><a href="#流程化管理" class="headerlink" title="流程化管理"></a>流程化管理</h2><ul><li>从主分支分支拉一下代码<br><code>git pull origin master</code></li><li>创建开发分支develop<br><code>git co(checkout) -b develop</code></li><li>如果其他分支有需要处理的bug，先将当前状态保存一下<br><code>git stash</code></li><li>切换到别的分支修改代码<br><code>git checkout -b branch_name</code></li><li>修复bug后提交代码查看修改<br><code>git status</code></li><li>需要查看修改的细节<br><code>git diff file_name</code></li><li><p>没有问题就提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit &quot;your description&quot;</span><br><span class="line">git push orgin your_branch_name</span><br></pre></td></tr></table></figure></li><li><p>解决完bug切换到原来的分支<br><code>git checkout -b you_old_branch</code></p></li><li><p>恢复刚刚保存的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash   //备份当前的工作区的内容，保存到git栈</span><br><span class="line">git stash pop  //从git栈中读取最近一次保存的内容，恢复工作区的相关内容，由于会存在多个stash内容，所以用栈来保存，pop出最近一个stash中读取的内容并恢复</span><br><span class="line">git stash list //显示git栈内所有的备份，可以利用这个列表来决定从哪个地方恢复</span><br><span class="line">git stash clear //清空git栈，此时使用git等图形化工具会发现，原来stash的那些节点都消失了</span><br></pre></td></tr></table></figure></li><li><p>最后，提交三部曲</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit &quot;your description&quot;</span><br><span class="line">git push orgin your_branch_name</span><br></pre></td></tr></table></figure></li></ul><h2 id="Github-pages"><a href="#Github-pages" class="headerlink" title="Github pages"></a>Github pages</h2><h3 id="Git初始设置"><a href="#Git初始设置" class="headerlink" title="Git初始设置"></a>Git初始设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure><h3 id="hexo初始化设置"><a href="#hexo初始化设置" class="headerlink" title="hexo初始化设置"></a>hexo初始化设置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd d:/hexo</span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">hexo init folder</span><br><span class="line">cd folder</span><br><span class="line">npm install</span><br><span class="line">hexo g  或者hexo generate</span><br><span class="line">hexo s  或者hexo s -p 5000 （ctrl+c退出）</span><br><span class="line">hexo d  #部署到远程</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/git.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Software" scheme="http://frankblog.site/categories/Software/"/>
    
    
      <category term="Git" scheme="http://frankblog.site/tags/Git/"/>
    
      <category term="Github" scheme="http://frankblog.site/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>数学之美学习笔记</title>
    <link href="http://frankblog.site/2018/03/06/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/"/>
    <id>http://frankblog.site/2018/03/06/数学之美/</id>
    <published>2018-03-06T13:59:33.332Z</published>
    <updated>2018-06-02T03:14:11.099Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E.jpg" alt=""><br><a id="more"></a></p><blockquote class="blockquote-center"><font size="4">技术分为术和道，具体的做事方法是术，做事的原理和原则是道。——吴军</font></blockquote><h4 id="自然语言处理，语音识别，机器翻译"><a href="#自然语言处理，语音识别，机器翻译" class="headerlink" title="自然语言处理，语音识别，机器翻译"></a>自然语言处理，语音识别，机器翻译</h4><h5 id="基于规则的语言处理"><a href="#基于规则的语言处理" class="headerlink" title="基于规则的语言处理"></a>基于规则的语言处理</h5><p>早期学术界认为，要让机器完成翻译和语音识别这种人类才能做的事情，就必须先让计算机理解自然语言，而做到这点就要让机器有类似人类的智能。这个方法论被称为“鸟飞派”（通过观察鸟的飞行方式，采用仿生的思路造出飞机）。</p><p>那么怎么让机器理解自然语言呢？受传统语言学的影响，他们觉得要让机器做好两件事：分析句子语法和获取语义。分析句子语法就是按照语法把句子拆分，分清它的主语、谓语、宾语是什么，每个部分的词性是什么，用什么标点符号。而语义分析，就是弄清句子要表达的具体意思。语法规则很容易用计算机算法描述，这让人们觉得基于规则的方法是对的。但是这种方法很快就陷入困境，因为基于语法的分析器处理不了复杂句子，同时，词的多义性无法用规则表述，例如下面的例子：</p><blockquote><p>The pen is in the box. 和 The box is in the pen.<br>第二句话让非英语母语的人很难理解，盒子怎么在钢笔里呢？其实在这里，pen是围栏的意思。这里pen是钢笔还是围栏，通过上下文已经不能解决，而需要常识，即钢笔可以放在盒子里，但是盒子比钢笔大，所以不能放在盒子里，于是pen在这里是围栏的意思，盒子可以放在围栏里。</p></blockquote><h5 id="基于统计的语言处理"><a href="#基于统计的语言处理" class="headerlink" title="基于统计的语言处理"></a>基于统计的语言处理</h5><p>贾里尼克（Jelinek）把语音识别问题当作通信问题，并用两个隐含马尔可夫模型（声学和语言模型）概括了语音识别，推动了基于统计的语言处理方法。</p><p>在语音识别中，计算机需要知道一个文字序列是否能构成一个大家理解而且有意义的句子。早期的做法是判断给出的句子是否合乎语法，由前文可知这条路走不通。贾里尼克从另外角度看这个问题：<strong>通过计算一个句子出现的概率大小来判断它的合理性</strong>，于是语音识别问题转换成计算概率问题，根据这个思路，贾里尼克建立了<strong>统计语言模型</strong>。</p><p>假定S表示某一个有意义的句子，由一连串特定顺序排列的词w1,w2,w3…组成。我们想知道S在文本中出现的可能性，计算S的概率P(S)，根据条件概率公式：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/1.png" alt=""></p><p>其中P(w1)为w1出现的概率，P(w2|w1)为已知第一个词出现的条件下，第二个词出现的概率，以此类推。前面几个概率容易计算，但是后面的概率随着变量增多，变得不可计算。在这里需要应用马尔可夫假设来简化计算。<strong>马尔可夫假设</strong>假定当前状态只与前一个状态有关，即Wi出现的概率只同它前面的词有关Wi-1，于是上面的公式可以简化为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/2.png" alt=""></p><p>接下来的问题是估算条件概率P(Wi|Wi-1)，由条件概率公式得：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/3.png" alt=""></p><p>而估计联合概率P(Wi-1, Wi)和P(Wi-1)可以统计语料库得到，通过计算(Wi-1, Wi)这对词在语料库中前后相邻出现的次数C，以及Wi-1单独出现的次数，就可得到这些词或者二元组的相对频度。根据大数定理，只要统计量足够，相对频度就等于概率，于是</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/4.png" alt=""></p><p>于是复杂的语序合理性问题，变成了简单的次数统计问题。</p><p>上式对应的统计语言模型是二元模型，实际应用中，google翻译用到四元模型。</p><h5 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h5><p>对于西方拼音语言来说，词之间有明确的分界符（空格），但是中、日、韩、泰等语言没有。因此，首先要对句子进行分词，才能做进一步自然语言处理。对一个句子正确的分词结果如下：</p><blockquote><p>分词前：中国航天官员应邀到美国与太空总署官员开会。<br>分词后：中国/航天/官员/应邀/到/美国/与/太空/总署/官员/开会/。</p></blockquote><p>最容易想到的分词方法是“查字典”，即<strong>把一个句子从左到右扫描一遍，遇到字典里有的词就标出来，遇到复合词就找最长匹配，遇到不认识的字串就分割成单字</strong>。这个方法能解决七八成的问题，但是遇到有二义性的分割就无能为力了，例如“发展中国家”，正确的分割是“发展-中-国家”，但是按照查字典法就会分成“发展-中国-家”。另外，并不是最长匹配都一定正确，例如“上海大学城书店”，正确的分割是“上海-大学城-书店”，而不是“上海大学-城-书店”。</p><p>按照前文的成功思路，依靠语法规则无法解决分词的二义性问题，还是得靠统计语言模型。</p><p>假设一个句子S有n种分词方法，利用前文的统计语言模型，<strong>分别计算出每种分词方法的概率，概率最大的即为最好的分词方法</strong>。因为穷举所有的分词方法计算量太大，所以可以把它看成是一个<strong>动态规划</strong>问题，并利用<strong>维特比算法</strong>快速找到最佳分词。具体应用时还要考虑分词的颗粒度。</p><h4 id="拼音输入法"><a href="#拼音输入法" class="headerlink" title="拼音输入法"></a>拼音输入法</h4><h5 id="拼音输入法中的数学"><a href="#拼音输入法中的数学" class="headerlink" title="拼音输入法中的数学"></a>拼音输入法中的数学</h5><p>中文输入法经历了以自然音节编码输入，到偏旁笔画拆字输入，再回归自然音节输入的过程。输入法输入汉字的快慢取决于对汉字编码的平均长度，也就是击键次数乘以寻找这个键需要的时间。单纯地减少编码长度未必能提高输入速度，因为寻找一个键的时间会增长。</p><p>将汉字输入到计算机中，是将人能看懂的信息编码变成计算机约定的编码（Unicode或UTF-8）的过程。对汉字的编码分为两部分：对拼音的编码和消除（一音多字）歧义。键盘上可使用的是26个字母和10个数字键，最直接的方式是让26个字母对应拼音，用10个数字消除歧义性。只有当两个编码都缩短时，汉字的输入才能够变快。早期的输入法常常只注重第一部分而忽略第二部分，例如双拼输入法和五笔输入法。</p><p>每一个拼音对应多个汉字，把一个拼音串对应的汉字由左向右连起来，就是一张有向图，如下图所示，y1,y2,y3…是输入的拼音串，W11,W12,W13是第一个音的候选汉字（后面的文字描述用W1代替），以此类推。从第一个字到最后一个字可以组成很多句子，每个句子对应图中的一条路径。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/5.jpg" alt=""></p><p>拼音输入法就是要根据上下文在给定的拼音条件下找到最优的句子，即求</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/6.1.png" alt=""></p><p>（Arg是argument的缩写，Arg Max为获得最大值的信息串）<br>化简这个概率需要用到<strong>隐含马尔可夫模型</strong>（见2.2介绍），我们把拼音串看成能观察到的“显状态”，候选汉字看成“隐状态”，然后求在这个“显状态”下的“隐状态”概率。带入下文中的隐含马尔可夫模型公式（2.3），式（2.1）化简为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/7.png" alt=""></p><p>化简连乘， 需要将等式两边取对数得</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/8.png" alt=""></p><p>乘法变成了加法。我们定义两个词之间的距离</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/9.png" alt=""></p><p>这样，寻找最大概率问题变成了寻找最短路径问题。</p><h5 id="隐含马尔可夫模型"><a href="#隐含马尔可夫模型" class="headerlink" title="隐含马尔可夫模型"></a>隐含马尔可夫模型</h5><p>上文介绍过马尔可夫假设（研究随机过程中的一个假设），即在随机状态序列中，假设其中的一个状态只于前一个状态有关。如天气预报，假设今天的天气只与昨天有关，这样就能得到近似解：<br><img src="http://p4rlzrioq.bkt.clouddn.com/9-1.png" alt=""><br><img src="http://p4rlzrioq.bkt.clouddn.com/10.png" alt=""></p><p>马尔可夫链</p><p>符合这个假设的随机过程称为马尔可夫过程，也叫马尔可夫链。隐含马尔可夫模型是马尔可夫链的一个扩展：任意时刻t的状态St是不可见的，但在每个时刻会输出Ot， Ot仅和St相关，这叫独立输出假设，数学公式如下：<br><img src="http://p4rlzrioq.bkt.clouddn.com/11.png" alt=""></p><p>P(Ot|St)我们可以通过观察得到。<br><img src="http://p4rlzrioq.bkt.clouddn.com/12.png" alt=""></p><p>隐马尔可夫模型</p><p>解决问题通常是通过已知求未知，我们要通过观察到$o_t$求出$s_t$的概率，即求<br><img src="http://p4rlzrioq.bkt.clouddn.com/12-1.png" alt=""></p><p>由条件概率公式可得：<br><img src="http://p4rlzrioq.bkt.clouddn.com/13.png" alt=""></p><p>因为观察到的状态O一旦产生就不会变了，所以它是一个可忽略的常数，上式可以化简为</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/14.png" alt=""></p><p>因为</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/16.png" alt=""></p><p>式(2.2)可以化简为</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/17.png" alt=""></p><h4 id="信息论：信息的度量和作用"><a href="#信息论：信息的度量和作用" class="headerlink" title="信息论：信息的度量和作用"></a>信息论：信息的度量和作用</h4><h5 id="信息熵"><a href="#信息熵" class="headerlink" title="信息熵"></a>信息熵</h5><p>香农在他的论文“通信的数学原理”[想到牛顿的“自然哲学与数学原理”]，提出了信息熵（shang），把信息和数字联系起来，解决了信息的度量，并量化出信息的作用。</p><p>一条信息的信息量和它的不确定性正相关，信息熵约等于不确定性的多少。香农给出的信息熵公式为</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/20.png" alt=""></p><p>P(x)为x的概率分布。</p><p>信息熵的公式为什么取负数？因为概率小于1，小数求得的对数是负数，给整个公式加上负号，最终的结果为正。</p><p>下面举例说明信息熵公式为什么会用到log和概率。</p><blockquote><p>猜中世界杯冠军需要多少次？<br>足球世界杯共32个球队，给他们编号1-32号，第一次猜冠军是否在1-16号之中，如果对了就会接着猜是否在1-8号，如果错了就知道冠军在9-16号，第三次猜是否在9-12号，这样只需要5次就能猜中，log32 = 5。这里采用的是折半查找，所以取对数。</p></blockquote><blockquote><p>但实际情况不需要猜5次，因为球队有强弱，可以先把夺冠热门分一组，剩下的分一组，问冠军是否在热门组中，再继续这个过程，按照夺冠概率对剩下的球队分组。引入概率就会让查找数更少，也就是不确定性更小，信息熵更小。可以计算，当每支球队夺冠概率相等时（1/32），信息熵的结果为5。</p></blockquote><h5 id="条件墒："><a href="#条件墒：" class="headerlink" title="条件墒："></a>条件墒：</h5><p>假定X和Y是两个随机变量，X是我们要了解的，已知X的随机分布P(X)，于是X的熵为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/21.png" alt=""></p><p>假定我们还知道Y的一些情况，包括它和X一起出现的概率，即联合概率分布，以及在Y取不同值前提下X的概率分布，即条件概率分布，于是在Y条件下X的条件熵为：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/22.png" alt=""></p><p>可证明H(X|Y) &lt;H(X), 即引入相关信息后，不确定性下降了。</p><h5 id="互信息"><a href="#互信息" class="headerlink" title="互信息"></a>互信息</h5><p>信息之间的相关性如果度量呢？ 香农提出了用互信息度量两个随机事件的相关性。例如，“好闷热”和“要下雨了”的互信息很高。<br>X与Y的互信息公式如下：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/23.png" alt=""></p><p>经过演算，可得到</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/24.png" alt=""></p><p>只要有足够的语料库，P(x,y), P(x) 和P(y)是很容易计算的。</p><p>机器翻译中最难的两个问题之一是二义性，如Bush 既可以是总统布什，也可以是灌木丛，Kerry既可以是国务卿克里，也可以是小母牛。如何正确的翻译？一种思路是通过语法辨别，但效果不好； 另一种思路是用互信息，从大量文本中找出和总统布什一起出现的词语，如总统、美国、国会等，再用同样的方法找出和灌木丛一起出现的词，如土壤、植物等，有了这两组词，在翻译Bush时，看看上下文中哪类词更多就可以了。</p><h5 id="相对熵-交叉熵"><a href="#相对熵-交叉熵" class="headerlink" title="相对熵/交叉熵"></a>相对熵/交叉熵</h5><p>相对熵（KL Divergence），衡量两个取值为正的函数的相似性:</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/25.png" alt=""></p><p>结论：</p><ol><li>两个完全相等的函数，相对熵为零；</li><li>相对熵越大，两个函数差异越大。</li><li>对于概率分布函数，或者概率密度函数，相对熵可以度量两个随机分布的差异性。</li></ol><p>在自然语言处理中，常用相对熵计算两个常用词在不同文本中的概率分布，看他们是否同义；或者根据两篇文章中不同词的分布，衡量它们的内容是否相等。利用相对熵，可以得到信息检索中最重要的概念：词频率-逆向文档频率（TF-IDF），在后面的搜索章节会对它详细介绍。</p><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><h5 id="获取网页：网络爬虫"><a href="#获取网页：网络爬虫" class="headerlink" title="获取网页：网络爬虫"></a>获取网页：网络爬虫</h5><p>把整个互联网看作一张大图，每个网页就是图中的一个节点，超链接是连接节点的弧。通过网络爬虫，用图的遍历算法，就能自动地访问到每个网页并把它们存起来。</p><p>网络爬虫是这样工作：假定从一家门户网站的首页出发，先下载这个网页，再通过这个网页分析出里面包含的所有超链接，接下来访问并下载这些超链接指向的网页。让计算机不同地做下去，就能下载整个互联网。 还需要用一个记事本（哈希表）记录下载了哪些网页避免重复下载。</p><p>工程实现问题：</p><ol><li>遍历算法采用广度优先还是深度优先？<br>搜索引擎要做到在有限的时间内，最多地爬下最重要的网页。显然各个网站最重要的是它的首页，那么就应该先下载所有网站的首页。如果把爬虫再扩大一点，就要继续下载首页直接链接的网页，因为这些网页是网站设计者自己认为相当重要的网页。在这个前提下，似乎应该采用广度优先。</li></ol><p>但是还要考虑网络通信的“握手”问题。网络爬虫每次访问网站服务器时，都要通过“握手”建立连接（TCP协议），如果采用广度优先，每个网站先轮流下载所有首页，再回过头来下载第二级网页，这样就要频繁的访问网站，增加“握手”耗时。</p><p>实际的网络爬虫是由成百上千台服务器组成的分布式系统，由调度系统决定网页下载的顺序，对于某个网站，一般是由特定的一台或几台服务器专门下载，这些服务器先下载完一个网站再进入下一个网站，这样可以减少握手次数（深度优先）。具体到每个网站，采用广度优先，先下载首页，再下载首页直接链接的网页。</p><ol><li><p>页面分析和超链接（URL）提取<br>早期的网页都是直接用HTML书写，URL以文本的形式放在网页中，前后有明显标识，很容易提取出来。但现在很多网页都是用脚本语言（如JavaScript）生成，URL不是直接可见的文本，所以网络爬虫要模拟浏览器运行网页后才能得到隐含的URL，但很多网页的脚本写的不规范，很难解析，这就导致这样的网页无法被搜索引擎收录。</p></li><li><p>维护超链接哈希表<br>在一台服务器上建立和维护一张哈希表并不是难事，但如果同时有成千上万台服务器一起下载网页，维护一张统一的哈希表就会遇到很多问题：</p></li></ol><p>首先，这张哈希表会大到存不下来；其次，每台服务器下载前和下载后都要访问哈希表，于是哈希表服务器的通信就成了整个爬虫系统的瓶颈。解决办法是：明确分工，将某个区间的URL分给特定的几台服务器，避免所有服务器对同一个URL做判断；批量询问哈希表，减少通信次数，每次更新一大批哈希表的内容。</p><h5 id="网页检索：布尔代数"><a href="#网页检索：布尔代数" class="headerlink" title="网页检索：布尔代数"></a>网页检索：布尔代数</h5><p>最简单的索引结构是用一个很长的二进制数表示一个关键字是否在每个网页中，有多少个网页就有多少位数，每一位对应一个网页，1代表相应的网页有这个关键字，0代表没有。比如关键字“原子能”对应的二进制数是0100 1000 1100 0001…表示（从左到右）第二、第五、第九、第十、第十六个网页包含这个关键字。假定关键字“应用”对应的二进制数是0010 1001 1000 0001…，那么要找到同时包含“原子能”和“应用”的网页时，只需要将这两个二进制数进行布尔AND运算，结果是0000 1000 0000 0001…表示第五和第十六个网页满足要求。 这个二进制数非常长，但是计算机做布尔运算非常快，现在最便宜的微机，在一个指令周期进行32位布尔运算，一秒钟十亿次以上。</p><p>为了保证对任何搜索都能提供相关网页，主要的搜索引擎都是对所有词进行索引，假如互联网上有100亿个有意义的网页，词汇表大小是30万，那么这个索引至少是100亿x30万=3000万亿。考虑到大多数的词只出现在一部分文本中，压缩比是100：1，也是30万亿的量级。为了网页排名方便，索引中还要存其他附加信息，如每个词出现的位置，次数等等。因此整个索引就变得非常大，需要通过分布式存储到不同服务器上（根据网页编号划分为很多小块，根据网页重要性建立重要索引和非重要索引）。</p><h5 id="度量网页和查询的相关性：TF-IDF"><a href="#度量网页和查询的相关性：TF-IDF" class="headerlink" title="度量网页和查询的相关性：TF-IDF"></a>度量网页和查询的相关性：TF-IDF</h5><p>我们以查找包含“原子能的应用”网页举例，“原子能的应用”可以分成三个关键词：原子能、的、应用。凭直觉，我们认为包含这三个关键词较多的网页，比包含它们较少的网页相关。但这并不可取，因为这样的话，内容长的网页比内容短的网页占便宜，所以要根据网页长度对关键词的次数进行归一化，用关键词的次数，除以网页的总字数，这个商叫做“关键词的频率”或“单文本频率”（TF：Term Frequency）。比如，某个网页上有1000词，其中“原子能”“的”“应用”分别出现了2次、35次、5次，那么它们的词频就是0.002、0.035、0.005，将这三个数相加就是相应网页和查询“原子能的应用”的单文本频率。所以，度量网页和查询的相关性，一个简单的方法就是直接使用各个关键词在网页中出现的总频率。</p><p>但是这也有不准确的地方，例如上面的例子中，“的”占了总词频的80%以上，但是它对确定网页的主题几乎没什么用，我们叫这样的词为停止词（stop word），类似的还有“是”“和”等。 另外“应用”是很普通的词，而“原子能”是专业词，后者在相关性排名中比前者重要。因此需要给每个词给一个权重，权重的设定满足两个条件：</p><ol><li>一个词预测主题的能力越强，权重就越大；</li><li>停止词权重为零。</li></ol><p>在信息检索中，使用最多的是“逆文本频率指数”（IDF：Inverse Document Frequency），公式为</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/30.png" alt=""></p><p>（D是全部网页数，Dw为关键词w出现的网页个数）。最终确定查询相关性，是利用TF和IDF的加权求和。 （IDF其实是在特定条件下关键词概率分布的交叉熵）</p><h5 id="搜索结果页排序：Page-Rank算法"><a href="#搜索结果页排序：Page-Rank算法" class="headerlink" title="搜索结果页排序：Page Rank算法"></a>搜索结果页排序：Page Rank算法</h5><p>这是拉里·佩奇和谢尔盖·布林发明的计算网页自身质量的数学模型，google凭借该算法，使搜索的相关性有了质的飞跃，圆满解决了以往搜索页中排序不好的问题。该算法的核心思想为：<strong>如果一个网页被很多其他网页所链接，说明它收到普遍的承认和信赖，那么它的排名就高</strong>。当然，在具体应用中还要加上权重，给排名高的网页链接更高的权重。这里有一个怪圈，计算搜索结果网页排名过程中需要用到网页本身的排名，这不是“先有鸡还是先有蛋的问题”吗？ 谢尔盖·布林解决了这个问题，他把这个问题变成了一个二维矩阵问题，先假定所有网页排名相同（1/N），在根据这个初始值不断迭代排名，最后能收敛到真实排名。</p><h5 id="新闻分类：余弦定理"><a href="#新闻分类：余弦定理" class="headerlink" title="新闻分类：余弦定理"></a>新闻分类：余弦定理</h5><p>google有新闻频道，里面的内容是由计算机聚合、整理并分类各网站内容。以前门户网站的内容是由编辑在读懂之后，再根据主题分类。但是计算机根本读不懂新闻，它只会计算，所以要让计算机分类新闻，首先就要把文字变成可计算的数字，再设计一个算法来计算任意两篇新闻的相似性。</p><p>计算一篇新闻中所有实词的TF-IDF值，再把这些值按照对应的实词在词汇表的位置依次排列，就得到一个向量。例如词汇表中有64000个词，其编号和词如左下表所示，在某一篇新闻中，这64000个词的TF-IDF值如右下表所示，这64000个数就组成了一个64000维的向量，我们就用这个向量代表这篇新闻，成为这篇新闻的特征向量。每篇新闻都有一个特征向量，向量中的每个数代表对应的词对这篇新闻主题的贡献。</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/31.png" alt=""></p><p>同一类的新闻，一定某些主题词用的较多，两篇相似的新闻，它们的特征向量一定在某几个纬度的值比较大。如果两个向量的方向一致，就说明新闻的用词比例基本一致，我们采用余弦定理计算两个向量间的夹角：</p><p><img src="http://p4rlzrioq.bkt.clouddn.com/32.png" alt=""></p><p>新闻分类算法分为有目标和无目标：第一种是已知一些新闻类别的特征向量，拿它分别和所有待分类的新闻计算余弦相似性，并分到对应的类别中，这些已知的新闻类别特征向量既可以手工建立，也可以自动建立； 第二种是没有分好类的特征向量做参考，它采用自底向上的聚类方法，计算所有新闻两两之间的余弦相似性，把相似性大于一个阈值的新闻分作一个小类，再比较各小类之间的余弦相似性，就这样不断待在聚合，一直到某一类因为太大而导致里面的新闻相似性很小时停止。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="数学" scheme="http://frankblog.site/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="统计算法" scheme="http://frankblog.site/tags/%E7%BB%9F%E8%AE%A1%E7%AE%97%E6%B3%95/"/>
    
      <category term="NLP" scheme="http://frankblog.site/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>优雅高效地使用windows</title>
    <link href="http://frankblog.site/2018/02/26/%E4%BC%98%E9%9B%85%E9%AB%98%E6%95%88%E5%9C%B0%E4%BD%BF%E7%94%A8windows/"/>
    <id>http://frankblog.site/2018/02/26/优雅高效地使用windows/</id>
    <published>2018-02-26T13:36:19.428Z</published>
    <updated>2018-05-30T08:35:58.092Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="http://p4rlzrioq.bkt.clouddn.com/v2-bd237c6411061932e99836393728ec02_r.jpg" alt=""><br><a id="more"></a></p><blockquote class="blockquote-center"><font size="5">工欲善其事，必先利其器！</font></blockquote><hr><h1 id="【日常工具】"><a href="#【日常工具】" class="headerlink" title="【日常工具】"></a>【<strong>日常工具</strong>】</h1><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><ul><li><a href="http://www.listary.com/" target="_blank" rel="noopener">Listary</a>：Windows文件浏览增强工具，double-ctrl调用，并且可以在(Xftp，clover 等等)窗口中使用，极其方便！</li><li><a href="https://github.com/Wox-launcher/Wox" target="_blank" rel="noopener">Wox</a>：免费开源的效率启动器,不仅可以搜索文件还可以浏览网页，Alt+Space调用，以及定制的插件(<a href="http://www.getwox.com/plugin" target="_blank" rel="noopener">wox-plugin</a>)，堪比MAC上的 <strong>Alfred</strong></li></ul><h2 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h2><ul><li><a href="https://potplayer.en.softonic.com/" target="_blank" rel="noopener">Potplayer</a>：拥有强大的内置解码器，不用额外针对某类视频去下载了</li></ul><h2 id="下载神器"><a href="#下载神器" class="headerlink" title="下载神器"></a>下载神器</h2><ul><li><a href="https://www.internetdownloadmanager.com/" target="_blank" rel="noopener">IDM</a>(cracked version)： 全宇宙最快的下载器!唯一缺陷是不支持P2P，想下载磁力或者BT可以先用百度云网盘的离线功能，再通过油猴脚本抓取链接进行下载。</li><li><a href="http://www.eagleget.com/cn/" target="_blank" rel="noopener">EagleGet</a>：下载后自动安装Chrome扩展探测视频，缺陷也是不支持BT/磁力链接，方法同上</li><li><a href="http://download.flvcd.com/" target="_blank" rel="noopener">硕鼠</a>：主要是下载网站的视频，不过现在不支持像腾讯视频之类的大网站了</li></ul><h2 id="PDF阅读"><a href="#PDF阅读" class="headerlink" title="PDF阅读"></a>PDF阅读</h2><ul><li><a href="https://www.foxitsoftware.cn/" target="_blank" rel="noopener">福昕阅读器</a>：功能算比较齐全了(会占用端口4000)</li><li><a href="http://www.abbyy.cn/finereader/" target="_blank" rel="noopener">ABBYY_FineReader</a>：PDF转WORD</li></ul><h2 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a>写作工具</h2><ul><li><a href="https://zh.snipaste.com/" target="_blank" rel="noopener">snipaste</a>：<br>开源、免费的国产截图神器。比QQ截图工具清晰很多。</li><li><a href="https://ivarptr.github.io/yu-writer.site/" target="_blank" rel="noopener">Yu writer</a>：windows上好用的markdown工具！</li><li><a href="https://sourceforge.net/projects/ditto-cp/files/" target="_blank" rel="noopener">Ditto</a>：剪切板工具，保存所有复制过的文字和图片，用ctrl+`调用</li><li><a href="https://www.pasteasy.com/" target="_blank" rel="noopener">Pasteasy</a>：全平台跨设备复制粘贴</li></ul><h2 id="素材库"><a href="#素材库" class="headerlink" title="素材库"></a>素材库</h2><ul><li><a href="http://www.officeplus.cn/Template/Home.shtml" target="_blank" rel="noopener">OfficePLUS</a>：微软Office官方在线模板网站！</li><li><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">Iconfont</a>：阿里巴巴矢量图标库</li><li><a href="https://pixabay.com/" target="_blank" rel="noopener">Free Images - Pixabay</a></li><li><a href="http://icons8.com/" target="_blank" rel="noopener">icons8</a>：icon素材库</li><li><a href="https://images.nasa.gov/" target="_blank" rel="noopener">NASA IMAGE</a>：NASA素材库</li><li><a href="https://pixabay.com/zh/" target="_blank" rel="noopener">pixabay</a>:高清免费图片素材库</li></ul><h2 id="PPT制作"><a href="#PPT制作" class="headerlink" title="PPT制作"></a>PPT制作</h2><ul><li><a href="http://www.nordritools.com/" target="_blank" rel="noopener">Nordri Tools</a>：超级好用的ppt插件</li><li><a href="http://www.cr173.com/soft/285461.html" target="_blank" rel="noopener">Photozoom pro</a>：利用插值算法提高图片分辨率</li><li><a href="http://ppt.baidu.com/" target="_blank" rel="noopener">PPT遥控器</a>：代替遥控笔</li><li><a href="http://www.pptminimizer.com/chn/index.php" target="_blank" rel="noopener">FILEminimizer</a>：ppt压缩神器</li><li><a href="www.screentogif.com">Screen to Gif</a>: Gif制作软件</li><li><a href="https://wordart.com/" target="_blank" rel="noopener">Tagul</a>：文字云生成器</li></ul><h2 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h2><ul><li><a href="https://www.xmind.cn/" target="_blank" rel="noopener">Xmind</a>：付费，全平台，模板多，支持鱼骨图、二维图、树形图等格式，可以与Evernote同步</li><li><a href="https://mubu.com/" target="_blank" rel="noopener">幕布</a>：笔记一键生成思维导图</li></ul><h2 id="视频录制"><a href="#视频录制" class="headerlink" title="视频录制"></a>视频录制</h2><ul><li><a href="https://obsproject.com/download" target="_blank" rel="noopener">OBS Studio</a>：功能齐全的视频录制工具，直播必备</li><li><a href="https://www.adobe.com/cn/products/premiere/free-trial-download.html" target="_blank" rel="noopener">Adobe Premiere Pro CC</a>：视频剪辑工具</li></ul><h2 id="文件整理"><a href="#文件整理" class="headerlink" title="文件整理"></a>文件整理</h2><ul><li><a href="https://www.softwareok.com/?seite=Freeware/Q-Dir" target="_blank" rel="noopener">Q-dir</a>：需要在文件夹之间移动文件的时候，这个整理神器就能派上用场了！</li><li><a href="http://cn.ejie.me/" target="_blank" rel="noopener">Clover 3</a>：为资源管理器添加多标签页功能，可以将常用文件夹添加为书签</li><li><a href="https://www.goodsync.com/" target="_blank" rel="noopener">Goodsyne</a>：强大的数据同步工具</li><li><a href="https://www.bandisoft.com/bandizip/" target="_blank" rel="noopener">bandzip</a>：win10下好用的压缩软件</li></ul><h2 id="快速启动"><a href="#快速启动" class="headerlink" title="快速启动"></a>快速启动</h2><ul><li><a href="http://www.truelaunchbar.com/" target="_blank" rel="noopener">TrueLaunchBar</a>：对快速启动项进行分组；允许你把任何文件夹组织成菜单的形式；实现剪切板管理、性能监视等功能</li><li><a href="http://www.yingdev.com/projects/wgestures" target="_blank" rel="noopener">Wgestures</a>：全局鼠标手势！</li></ul><h1 id="【系统开发与优化工具】"><a href="#【系统开发与优化工具】" class="headerlink" title="【系统开发与优化工具】"></a>【<strong>系统开发与优化工具</strong>】</h1><h2 id="桌面优化"><a href="#桌面优化" class="headerlink" title="桌面优化"></a>桌面优化</h2><ul><li><a href="https://www.stardock.com/products/fences/download" target="_blank" rel="noopener">Fences</a>：付费,桌面文件分类整理软件</li><li><a href="http://store.steampowered.com/app/431960/Wallpaper_Engine/" target="_blank" rel="noopener">Wallpapaer</a>：动态壁纸软件，装逼神器！</li></ul><h2 id="屏保"><a href="#屏保" class="headerlink" title="屏保"></a>屏保</h2><ul><li><a href="https://fliqlo.en.softonic.com/" target="_blank" rel="noopener">Fliqlo</a>：数字时钟的屏幕保护，逼格满满</li><li><a href="https://justgetflux.com/" target="_blank" rel="noopener">Flux</a>： 视力保护，通过根据时间调节屏幕颜色，减少蓝光对视力的影响</li></ul><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><ul><li>PowerTool：查看系统进程等信息，安全修复！</li><li><a href="https://www.chuyu.me/zh-Hans/" target="_blank" rel="noopener">Dism++</a>：简洁的系统管理软件，集成了很多小工具，还可以系统备份</li><li><a href="https://www.ccleaner.com/ccleaner" target="_blank" rel="noopener">Ccleaner</a>：系统清理工具</li></ul><h2 id="文件修改"><a href="#文件修改" class="headerlink" title="文件修改"></a>文件修改</h2><ul><li><a href="http://download.cnet.com/Bulk-Rename-Utility-64-Bit/3000-2248_4-75211571.html" target="_blank" rel="noopener">Bulk Rename Utility</a>：批量重命名工具 </li><li><a href="https://sourceforge.net/projects/rem-empty-dir/files/" target="_blank" rel="noopener">remove empty directories</a>：删除空文件夹，强迫症的福音</li></ul><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><ul><li><a href="https://mirrors.tuna.tsinghua.edu.cn/" target="_blank" rel="noopener">清华大学开源软件镜像站</a>：可以下载到Linux镜像文件以及python第三方库文件等，速度很快！</li><li><a href="http://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">Ultraiso</a>：制作启动盘</li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">Fiddler</a>：抓包工具</li></ul><h2 id="文本编辑器"><a href="#文本编辑器" class="headerlink" title="文本编辑器"></a>文本编辑器</h2><ul><li><a href="https://www.sublimetext.com/3" target="_blank" rel="noopener">Sublime Text3</a>：文本神器</li><li><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a>：中文友好，渲染插件多</li></ul><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul><li><a href="https://www.jetbrains.com/pycharm/download/" target="_blank" rel="noopener">Pycharm</a>：社区版免费，Python开发必备</li><li><a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda</a>：集成了python科学计算的第三方库，内置spyder和jupyter notebook</li><li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noopener">IntelliJ IDEA</a>：前端必备IDE</li><li><a href="http://cmder.net/" target="_blank" rel="noopener">Cmder</a>：monokai配色主题，完美代替原生cmd</li></ul><h1 id="【chrome插件】"><a href="#【chrome插件】" class="headerlink" title="【chrome插件】"></a>【<strong>chrome插件</strong>】</h1><h2 id="开发必备"><a href="#开发必备" class="headerlink" title="开发必备"></a>开发必备</h2><ul><li>Vimium(键盘浏览插件)</li><li>JSONView(json数据进行转码和格式化)</li><li>Proxy SwitchyOmega (代理)</li><li>Qiniu upload files (七牛图床插件)</li><li>Markdown Here (转化为markdown格式）</li><li>The QR Code Extension (二维码生成器)</li></ul><h2 id="日常管理"><a href="#日常管理" class="headerlink" title="日常管理"></a>日常管理</h2><ul><li>Extensity (扩展管理工具)</li><li>LastPass (密码管理器)</li></ul><h2 id="浏览优化"><a href="#浏览优化" class="headerlink" title="浏览优化"></a>浏览优化</h2><ul><li>书签侧边栏</li><li>Imtranslator（翻译）</li><li>Imagus (悬停放大图片)</li><li>OneTab (内存优化神器)</li><li>Better History (查看历史记录)</li><li>Sexy Undo Close Tab (恢复关闭网页)</li><li>Infinity (方便的新标签页定制)</li><li>CrxMouse Chrome Gestures (鼠标手势、超级拖拽)</li><li>Tampermonkey (油猴：脚本管理平台，神器！！)</li><li>IE Tab (打开用IE内核支持的网页，常用于银行支付环境)</li><li>Listen 1 (集成各大平台的音乐，再也不用为音乐版权的问题头疼了)</li></ul><h2 id="下载-amp-收藏"><a href="#下载-amp-收藏" class="headerlink" title="下载&amp;收藏"></a>下载&amp;收藏</h2><ul><li>印象笔记裁剪</li><li>网页截图：注释&amp;录屏</li><li>RSS Subscription Extension </li><li>Eagleget Free Download</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p4rlzrioq.bkt.clouddn.com/v2-bd237c6411061932e99836393728ec02_r.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Software" scheme="http://frankblog.site/categories/Software/"/>
    
    
      <category term="Windows" scheme="http://frankblog.site/tags/Windows/"/>
    
      <category term="Chrome" scheme="http://frankblog.site/tags/Chrome/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text3 快捷键</title>
    <link href="http://frankblog.site/2018/02/22/sublime%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://frankblog.site/2018/02/22/sublime快捷键/</id>
    <published>2018-02-22T07:11:51.808Z</published>
    <updated>2018-02-27T04:41:18.415Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://i.loli.net/2018/02/22/5a8e9d17ab4cd.jpg" alt=""></p><a id="more"></a><h1 id="选择类"><a href="#选择类" class="headerlink" title="选择类"></a>选择类</h1><p>Ctrl + D  选择单文本</p><p>Alt  + F3 选中文件所有相同文本 </p><p>Ctrl + L  选中整行</p><p>Ctrl + shift + M 选中括号中文本（与搜狗有热键冲突） </p><p>Ctrl + M  光标移动结束或开始位置</p><p>Ctrl + Enter  在下一行插入新行</p><p>Ctrl + Shift + Enter 在上一行插入新行</p><p>Ctrl + Shift + [  选中，折叠代码</p><p>Ctrl + Shift + ]  选中，展开代码</p><p>Ctrl + K + 0  展开所有折叠代码</p><p>Ctrl + ←/→  快速移动光标</p><p>shift + ↑/↓  向上/向下选中多行</p><p>Shift + ←/→  向左/向右选中文本</p><p>Ctrl + Shift + ←/→  向左/向右快速选择文本</p><h1 id="编辑类"><a href="#编辑类" class="headerlink" title="编辑类"></a>编辑类</h1><p>Ctrl + J  合并多行代码为一行</p><p>Ctrl + Shift + D  复制整行，插入到下一行</p><p>Tab  向右缩进 &amp; Shift + Tab  向左缩进</p><p>Ctrl + K + K  从光标处开始删除代码至行尾。</p><p>Ctrl + Shift + K  删除整行。</p><p>Ctrl + /  注释单行。</p><p>Ctrl + Shift + /  注释多行。</p><p>Ctrl + K + U/L  转换大/小写。</p><p>Ctrl + Z  撤销</p><p>Ctrl + Y  恢复撤销</p><p>Ctrl + F2  设置书签</p><p>Ctrl + T  左右字母互换。</p><p>F6  单词检测拼写</p><h1 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h1><p>Ctrl + F  文件内搜索</p><p>Ctrl + shift + F 文件夹内搜索</p><p>Ctrl + P  按类别搜索。举个栗子：1、输入当前项目中的文件名；快速搜索文件，2、输入@和关键字，查找文件中函数名；3、输入：和数字，跳转到文件中该行代码，4、输入#和关键字，查找变量名。</p><p>Ctrl + G  数字定位搜索</p><p>Ctrl + R  函数定位搜索</p><p>Ctrl + ： 变量、属性名定位搜索</p><p>Ctrl + Shift + P  打开命令框。场景栗子：打开命名框，输入关键字，调用sublime text或插件的功能，例如使用package安装插件。</p><h1 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h1><p>Ctrl + Tab  按浏览顺序切换窗口</p><p>Ctrl + PageDown  向左切换当前窗口的标签页</p><p>Ctrl + PageUp  向右切换当前窗口的标签页。</p><p>Alt + Shift + “1/2/3”  分屏</p><p>Ctrl + K + B  开启/关闭侧边栏。</p><p>F11  全屏模式</p><p>Shift + F11  免打扰模式</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/02/22/5a8e9d17ab4cd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="编辑器" scheme="http://frankblog.site/categories/%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    
    
      <category term="Sublime" scheme="http://frankblog.site/tags/Sublime/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://frankblog.site/2018/02/16/hello-world/"/>
    <id>http://frankblog.site/2018/02/16/hello-world/</id>
    <published>2018-02-16T15:20:02.641Z</published>
    <updated>2018-02-25T13:11:14.319Z</updated>
    
    <content type="html"><![CDATA[<script src="\assets\js\APlayer.min.js"> </script><p><img src="https://i.loli.net/2018/02/22/5a8e9ef8c09a8.jpg" alt=""></p><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/02/22/5a8e9ef8c09a8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="网页配置" scheme="http://frankblog.site/categories/%E7%BD%91%E9%A1%B5%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="HEXO" scheme="http://frankblog.site/tags/HEXO/"/>
    
  </entry>
  
</feed>
